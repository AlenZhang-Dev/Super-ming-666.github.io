<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlenZhang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://superming.life/"/>
  <updated>2021-05-13T03:07:22.694Z</updated>
  <id>https://superming.life/</id>
  
  <author>
    <name>AlenZhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QuickSort</title>
    <link href="https://superming.life/2021/05/13/quicksort/"/>
    <id>https://superming.life/2021/05/13/quicksort/</id>
    <published>2021-05-13T03:04:41.000Z</published>
    <updated>2021-05-13T03:07:22.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h1><p>The quicksort algorithm has a worst-case running time of $\Theta(n^{2})$ on input array of n numbers.</p><p>Despite this slow worst-cast running time, quicksort is often the best practical choice for sorting because it’r remarkably efficient on the average.</p><p>It also has the advantage of sorting <strong>in place</strong>. Also it works well in virtual-memory environments.</p><a id="more"></a><h2 id="Description"><a href="#Description" class="headerlink" title="Description."></a><strong>Description.</strong></h2><p>Use the conception of divide-and-conquer paradigm. </p><p><strong>Divide</strong>: Partition (rearrange) the array A[p…r] into two (possibly empty) subarrays A[p, q- 1]and A[q+1, r] such that each element of A[p, q- 1] is less than or equal to A[q], which is, in turn, less than or equal to each element of A[q+1, r]. Compute the index q as part of this partitioning procedure.</p><p><strong>Conquer</strong>: Sort the two subarrays A[p, q- 1] and A[q+1, r] by recursive calls to quicksort.</p><p><strong>Combine</strong>: The subarrays are already sorted, no work is needed to combine them: the entire array is sorted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(A, low, high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">int</span> index = partition(A, low, high);</span><br><span class="line">        quickSort(A, low, index - <span class="number">1</span>);</span><br><span class="line">        quickSOrt(A, index + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Partitioning the array.</p><p>The partition function make sure put the pivot to the right position. All elements at the left of the pivot is smaller than the pivot, on the right is larger than the pivot.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The goal of the partition function is that find the right position of pivot.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = A[high];</span><br><span class="line">    <span class="keyword">int</span> i = low - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = low; j &lt; high; ++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[j] &lt; pivot)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            swap(A, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(A, i + <span class="number">1</span>, high);</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Condition during for loop:</p><ol><li><code>A[low, i] &lt; pivot</code></li><li><code>A[i+1, j] &gt; pivot</code></li></ol><p>The four region maintained by the procedure PARTITION on a subarray A[p..r].</p><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_8.39.38_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_8.39.38_AM.png"></p><p>The operation of partition sample:</p><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_8.36.49_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_8.36.49_AM.png"></p><p>Maintain the low and high point. Make sure low point to the element which is smaller than pivot, and </p><p>Conditions:</p><ol><li><p><code>A[0, low] &lt; pivot</code></p></li><li><p><code>A[low, length] &gt; pivot</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">moveBothPartition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = A[high];</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; A[low] &lt;= pivot)</span><br><span class="line">            low++;</span><br><span class="line">        swap(arr, low, high);</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high &amp;&amp; A[high] &lt;= pivot)</span><br><span class="line">            high--;</span><br><span class="line">        swap(arr, low, high);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java implementation in Algs.4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = hi + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//find the item on left to swap</span></span><br><span class="line">        <span class="keyword">while</span>(less(a[++i], a[lo])</span><br><span class="line">            <span class="keyword">if</span>(i == hi) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//find the item on right to swap</span></span><br><span class="line">        <span class="keyword">while</span>(less(a[lo], a[--j])</span><br><span class="line">            <span class="keyword">if</span>(j == lo) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    exch(a, lo, j)</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">    StdRandom.shuffle(a);</span><br><span class="line">    sort(a, <span class="number">0</span>, a.lenght-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) </span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j - <span class="number">1</span>);</span><br><span class="line">    sort(a, j + <span class="number">1</span>; hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The running time of Partition on the subarray A[p..r] is $\Theta (n)$, where <code>n = r - p + 1</code>;</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance."></a><strong>Performance.</strong></h2><p>The running time of quicksort depends on whether the partitioning is balanced or unbalanced, which in turn depends on which elements are used for partitioning.If the partitioning is balanced, the algorithm runs asymptotically as fast as merge sort. If unbalanced, it can run as slowly as insertion sort.</p><h2 id="Worst-case"><a href="#Worst-case" class="headerlink" title="Worst-case."></a><strong>Worst-case.</strong></h2><p>the worst-case behavior occurs when the partition routine produces one subproblem with n - 1 elements and one with 0 element. The partition cost $\Theta(n)$ time. Since the recursive call on an array of size 0 just returns, T(0) = $\Theta(1)$.The recurrence for the running time is $T(n) = T(n - 1) + T(0) + \Theta(n) = T(n-1) + \Theta(n)$</p><p>Intuitively, the total cost is $\Theta(n^{2})$.</p><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_11.28.55_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_11.28.55_AM.png"></p><h2 id="Best-case"><a href="#Best-case" class="headerlink" title="Best-case."></a><strong>Best-case.</strong></h2><p>In the most even case, partition produces two subproblems, each of size no more than n/2, since one is of size $\left \lfloor n/2 \right \rfloor$ and one of size $\left \lfloor n/2 - 1 \right \rfloor$. In this case, the recurrence for the running time is $T(n) = 2T(n/2) + \Theta(n)$.</p><p>The total cost is $\Theta(nlgn)$.</p><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_11.28.27_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_11.28.27_AM.png"></p><h2 id="Balanced-partitioning"><a href="#Balanced-partitioning" class="headerlink" title="Balanced partitioning."></a><strong>Balanced partitioning.</strong></h2><p>The average-case running time of quicksort is much closer to the best case than to the worst case.</p><p>Assume algorithms always produces a 9-to-1 proportional split, it seems quite unbalanced. </p><p>The recurrence is $T(n)=T(9n/10)+T(n/10)+cn$.</p><p>It create a recursion tree of depth $\Theta(lgn)$ .</p><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_9.09.17_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_9.09.17_AM.png"></p><p>The total cost of quicksort is therefore $\Theta(nlgn)$.The running time is therefore $\Theta(nlgn)$ whenever the split has constant proportionality.</p><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_9.48.36_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_9.48.36_AM.png"></p><p><strong>A randomized version of quicksort.</strong></p><p>In exploring the average-case behavior of quicksort, we have made an assumption that all permutations of the input numbers are equally likely. Many people regard the resulting randomized version of quicksort as the sorting algorithm of choice for large enough inputs.</p><p>We could do a <strong>random sampling</strong> to simpler analysis. So we select a randomly chosen element from the subarray as the pivot.we ensure that the pivot element <code>x = A[r]</code> is equally likely to be any of the <code>r - p + 1</code> elements in the subarray.</p><p>The change is small.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">random</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">int</span> pivot = rand.nextInt(high - low) + low;</span><br><span class="line">    swap(A, pivot, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition_random</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    random(a, low, high);</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[high];</span><br><span class="line">    <span class="keyword">int</span> i = low - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = low, j &lt; high; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[j] &lt; pivot)</span><br><span class="line">            swap(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, i + <span class="number">1</span>, j);</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = partition_random(a, low, high);</span><br><span class="line">    partition_random(a. p, q -<span class="number">1</span>);</span><br><span class="line">    partition_random(a, q + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The worst case is still $\Theta(n^{2})$.  The expected running time is $\Theta(nlogn)$. [The analysis of the algorithms check CLRS 7.4.2]</p><h2 id="Improvements"><a href="#Improvements" class="headerlink" title="Improvements."></a><strong>Improvements.</strong></h2><p><strong>Insertion sort small subarrays.</strong></p><ul><li>Even quicksort has too much overhead for tiny subarrays.</li><li>Cutoff to insertion sort for ≈ 10 items.</li><li>Note: could delay insertion sort until one pass at end.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (hi &lt;= lo + CUTOFF - <span class="number">1</span>)&#123;</span><br><span class="line">      Insertion.sort(a, lo, hi);</span><br><span class="line">      <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">   sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">   sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Median of sample.</strong></p><ul><li>Best choice of pivot item = median.</li><li>Estimate true median by taking median of sample.</li><li>Median-of-3(random) items.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">int</span> m = medianOf3(a, lo, lo + (hi - lo)/<span class="number">2</span>, hi);</span><br><span class="line">   swap(a, lo, m);</span><br><span class="line">   <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">   sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">   sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/7559608/median-of-three-values-strategy">median of three values strategy</a></p><p><strong>Selection</strong></p><p>Goal. Given a array of N items, find a k^th smallest item.</p><p>Ex. Min(k = 0), max(k = N -1), median(k = N/2)</p><p>Applications.</p><ul><li>Order statistics.</li><li><p>Find the “top k.”</p><p>  <img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_3.13.19_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_3.13.19_PM.png"></p></li></ul><p><strong>Quick-select</strong></p><p>Partition array so that:</p><ul><li>Entry a[j] is in place.</li><li>No larger entry to the left of j.</li><li>No smaller entry to the right of j.</li></ul><p>Repeat in one subarray, depending on j, finished when j equals k.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Compareble <span class="title">select</span><span class="params">(Comparable[] a, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    StdRandom.shuffle(a);</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(hi &gt; lo)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        <span class="keyword">if</span>(j &lt; k) lo = j + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; k) hi = j - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Mathematical analysis</strong></p><p><img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_4.00.02_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_4.00.02_PM.png"></p><p><strong>Duplicate keys</strong></p><p>Often, purpose of sort is to bring items with equal keys together.</p><ul><li>Sort population by age.</li><li>Remove duplicates from mailing list.</li><li>Sort job application by college attended.</li></ul><p><strong>The Problem</strong></p><p><img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_3.32.19_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_3.32.19_PM.png"></p><h2 id="3-way-Partitioning"><a href="#3-way-Partitioning" class="headerlink" title="3-way Partitioning"></a>3-way Partitioning</h2><p>Goal. Partition array into 3 parts so that:</p><ul><li>Entries between lt and gt equal to partition item v.</li><li>No larger entries to left of lt.</li><li>No smaller entries to right of gt.</li></ul><p><img src="/2021/05/13/quicksort/Screen_Shot_2021-05-12_at_11.22.21_AM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2021-05-12_at_11.22.21_AM.png"></p><p><strong>Dutch nation flag problem.[Edsger Dijkstra]</strong></p><ul><li>Let v be partitioning item a[lo].</li><li>Scan i from left to right.<ul><li>(a[i] &lt; v): exchange a[lt] with a[i]; increment both lt and i</li><li>(a[i] &gt; v): exchange a[gt] with a[i]; decrement gt</li><li>(a[i] == v): increment i</li></ul></li></ul><p><img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_3.35.34_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_3.35.34_PM.png"></p><p><strong>Trace.</strong></p><p><img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_3.37.51_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_3.37.51_PM.png"></p><p><img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_4.40.58_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_4.40.58_PM.png"></p><p><strong>3-way Quicksort: Java implementation.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt; lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> lt = lo, gt = hi;</span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= gt)&#123;</span><br><span class="line">        <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">        <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>) exch(a, lt++, i++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmp &gt; <span class="number">0</span>) exch(a, i, gt--);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, lo, lt - <span class="number">1</span>);</span><br><span class="line">    sort(a, gt + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/13/quicksort/Screen_Shot_2020-11-27_at_3.40.58_PM.png" alt="%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20/Screen_Shot_2020-11-27_at_3.40.58_PM.png"></p><p>References：</p><p><a href="https://algs4.cs.princeton.edu/23quicksort/">Algs4 2.3</a></p><p>CLRS</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Quick-Sort&quot;&gt;&lt;a href=&quot;#Quick-Sort&quot; class=&quot;headerlink&quot; title=&quot;Quick Sort&quot;&gt;&lt;/a&gt;Quick Sort&lt;/h1&gt;&lt;p&gt;The quicksort algorithm has a worst-case running time of $\Theta(n^{2})$ on input array of n numbers.&lt;/p&gt;
&lt;p&gt;Despite this slow worst-cast running time, quicksort is often the best practical choice for sorting because it’r remarkably efficient on the average.&lt;/p&gt;
&lt;p&gt;It also has the advantage of sorting &lt;strong&gt;in place&lt;/strong&gt;. Also it works well in virtual-memory environments.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>HeapSort</title>
    <link href="https://superming.life/2021/05/07/Heapsort/"/>
    <id>https://superming.life/2021/05/07/Heapsort/</id>
    <published>2021-05-07T02:48:56.000Z</published>
    <updated>2021-05-07T12:15:52.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heapsort"><a href="#Heapsort" class="headerlink" title="Heapsort"></a>Heapsort</h1><h2 id="堆-Heaps"><a href="#堆-Heaps" class="headerlink" title="堆(Heaps)"></a>堆(Heaps)</h2><p>（二叉）堆数据结构是一个数组，且需要满足完全二叉树的性质，也就是除最底层之外，树是完全充满的，而且从左向右填充的。</p><p>用于表示堆的数组A一般有两个属性：<code>A.length</code>表示数组元素的个数。<code>A.heap-size</code>表示堆元素在数组中的元素个数，即有效数组元素。</p><p>如下图所示，数组长度可以为100，但用于存储堆的有效数组长度为10。</p><p><img src="/2021/05/07/Heapsort/Screen_Shot_2021-05-06_at_3.40.43_PM.png" alt="Heapsort%20/Screen_Shot_2021-05-06_at_3.40.43_PM.png"></p><p>如果数组的index从1开始，元素i的parent表示为$\left \lfloor i/2 \right \rfloor$，元素i的左孩子为<code>2 * i</code>；元素的右孩子为<code>2 * i + 1</code>。</p><a id="more"></a><p>二叉堆一般有两种形式：最大堆和最小堆。</p><p><strong>最大堆</strong></p><p>需要满足堆的性质，最大堆中除了根结点之外所有的结点i都需要满足<code>A[Parent(i)] ≥ A[i]</code>。</p><p><strong>最小堆</strong></p><p>需要满足堆的性质，最小堆中除了跟结点之外的所有结点都需要满足<code>A[Parent(i)] ≤ A[i]</code>。</p><p>在堆排序算法中，一般使用最大堆；在优先队列中，一般使用最小堆。堆可以看成一颗完全二叉树，我们定义一个堆中结点的高度即该结点到叶结点的距离，故在堆上的操作时间与树的高度成正比，时间复杂度为<code>O(logn)</code> 。</p><p>使用堆的时间复杂度：取出最大元素<code>O(1)</code> 、插入<code>O(logn)</code>、删除<code>O(logn)</code> 。</p><h2 id="维护堆-Maintaining-the-heap-property"><a href="#维护堆-Maintaining-the-heap-property" class="headerlink" title="维护堆(Maintaining the heap property)"></a>维护堆(Maintaining the heap property)</h2><p>Max-heapify用于维护最大堆性质，是进行堆操作非常重要的一个过程。该函数的作用是将一个选定范围的数组维护成最大堆。</p><p>假定根结点的Left(i) 和 Right(i)的二叉树均为最大堆，但此时A[i]可能小于其两个孩子结点，此时通过Heapify函数将A[i]的值在最大堆中逐级下降的方式，使堆重新满足最大堆的性质。整体时间复杂度为<code>O(h)</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = leftChild(start); i &lt; end; i = i * <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//find largest among root, left child and right child</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; end &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//swap and continue heapifying if root isn&#x27;t largest</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; temp) &#123;</span><br><span class="line">                swap(arr, start, i);</span><br><span class="line">                start = i;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用递归的方式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxHeapifyRecursion</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//save the current root in case the child is bigger than root.</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">        <span class="keyword">int</span> left = leftChild(start);</span><br><span class="line">        <span class="keyword">int</span> right = rightChild(start);</span><br><span class="line">        <span class="keyword">int</span> max = left;</span><br><span class="line">        <span class="comment">//if one&#x27;s right child is bigger than end, definatly his left child is invalid</span></span><br><span class="line">        <span class="keyword">if</span>(right &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//if one&#x27;s right child is valid.</span></span><br><span class="line">        <span class="keyword">if</span>(right &lt; end &amp;&amp; arr[right] &gt; arr[left]) &#123;</span><br><span class="line">            max = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr[max] &gt; temp)&#123;</span><br><span class="line">            swap(arr, max, start);</span><br><span class="line">            maxHeapifyRecursion(arr, max, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="建立堆-Building-a-heap"><a href="#建立堆-Building-a-heap" class="headerlink" title="建立堆(Building a heap)"></a>建立堆(Building a heap)</h2><p>从树的第一个非叶结点开始，通过自底向上调用Max-heapify把一个数组转换为一个最大堆。</p><p>构建堆的时间复杂度表述如图所示。</p><p><img src="/2021/05/07/Heapsort/Screen_Shot_2021-05-06_at_6.29.10_PM.png" alt="Heapsort%20/Screen_Shot_2021-05-06_at_6.29.10_PM.png"></p><p>我们可以在线性时间内构造一个最大堆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = parent(arr.length);</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maxHeapify(arr, i--, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序-Heapsort"><a href="#堆排序-Heapsort" class="headerlink" title="堆排序(Heapsort)"></a>堆排序(Heapsort)</h2><p>最大堆的最大元素存储在数组的首元素中，每次将最大元素与n【heap_size】所在的元素进行互换，同时减少heap_size的大小。重复该算法，知道heap_size减少到1。此时数组按递增顺序排列。</p><p>Heapsort的时间复杂度为<code>O(nlgn)</code>，一共调用n-1次Max-heapify，Max-heapify本身时间复杂度为<code>O(logn)</code>。</p><p>堆排序过程如图所示：</p><p><img src="/2021/05/07/Heapsort/Screen_Shot_2021-05-06_at_6.39.00_PM.png" alt="Heapsort%20/Screen_Shot_2021-05-06_at_6.39.00_PM.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">        buildMaxHeap(arr);</span><br><span class="line">        <span class="keyword">int</span> j = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            swap(arr,<span class="number">0</span>, j);</span><br><span class="line">            maxHeapify(arr, <span class="number">0</span>, j--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用<code>max-Heapify</code>实现Heapsort。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        heap_sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Build heap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            max_heapify(arr, i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Sort Process, extract an element one by one.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">//Move current root to end.</span></span><br><span class="line">            swap(arr, <span class="number">0</span>, j);</span><br><span class="line">            <span class="comment">//Rebuild the heap.</span></span><br><span class="line">            max_heapify(arr, <span class="number">0</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//adjust the heap, the core function of HeapSort;</span></span><br><span class="line">    <span class="comment">//To heapify a subtree from start to end.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//keep the current swap element.</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">        <span class="comment">//compare the child, from left to right</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start * <span class="number">2</span> + <span class="number">1</span>; i &lt; end; i = i * <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//select the larger one between right child and left child</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; end &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//swap the root node with larger one.</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; temp) &#123;</span><br><span class="line">                arr[start] = arr[i];</span><br><span class="line">                start = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[start] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap the element</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列-Priority-Queue"><a href="#优先队列-Priority-Queue" class="headerlink" title="优先队列(Priority Queue)"></a>优先队列(Priority Queue)</h2><p>优先队列是堆数据结构的很好应用。</p><p><a href="https://en.wikipedia.org/wiki/Priority_queue">优先队列</a>和堆一样，具有最大优先队列和最小优先队列。优先队列是一种用来维护有一组元素构成的集合S的数据结构，其中每一个元素都有一个相关的值称为关键字(Key)。</p><p>根据维基百科的定义，一个优先队列至少需要包含以下操作：</p><ol><li><p><code>is_empty</code>：检查队列是否有元素。</p></li><li><p><code>insert_with_priority</code>：根据元素的优先级将元素插入堆中。</p></li><li><p><code>pull_highest_priority_element</code>: 将优先队列中优先级最高的元素取出并返回。</p></li></ol><p><strong>最大优先队列应用</strong>：共享计算机系统的作业调度。最大优先队列记录要执行每个作业以及它们之间的相对优先级。当完成一个作业或者被中断后，每次调度器调用优先队列中优先级最高的作业执行。</p><p><strong>最小优先队列应用</strong>：基于事件驱动的模拟器。队列中保存要模拟的事件，每个事件都有一个发生事件作为关键字。事件必须按照发生的时间顺序进行模拟，因为某一事件的模拟可能会触发对其他事件的模拟。每一步中，模拟器调用最小优先队列队首的元素进行模拟，然后通过调用Insert将新触发的事件其插入最小优先队列中。</p><h3 id="多路归并-Multiway"><a href="#多路归并-Multiway" class="headerlink" title="多路归并(Multiway)"></a><strong>多路归并(Multiway)</strong></h3><p>多路归并是优先队列的一个应用。</p><p>在Algorithms.4th中的API如下：</p><p><img src="/2021/05/07/Heapsort/Screen_Shot_2021-05-07_at_7.23.32_PM.png" alt="Heapsort%20/Screen_Shot_2021-05-07_at_7.23.32_PM.png"></p><p>实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(In[] streams)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = streams.length;</span><br><span class="line">        IndexMinPQ&lt;String&gt; pq = <span class="keyword">new</span> IndexMinPQ&lt;String&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (!streams[i].isEmpty())</span><br><span class="line">                pq.insert(i, streams[i].readString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extract and print min and read next from its stream. </span></span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            StdOut.print(pq.minKey() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i = pq.delMin();</span><br><span class="line">            <span class="keyword">if</span> (!streams[i].isEmpty())</span><br><span class="line">                pq.insert(i, streams[i].readString());</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = args.length;</span><br><span class="line">        In[] streams = <span class="keyword">new</span> In[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            streams[i] = <span class="keyword">new</span> In(args[i]);</span><br><span class="line">        merge(streams);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Algorithms.4th.</strong></p><p>在Algorithms. 4th.中通过<code>swim()</code> 和 <code>sink()</code>方法分别实现元素的上浮和下沉，用于替代<code>Max-heapify</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n means the heap size.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k * <span class="number">2</span> &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; less(j, j + <span class="number">1</span>))</span><br><span class="line">            j++;</span><br><span class="line">        swap(j, k);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k &gt; <span class="number">1</span> &amp;&amp; less(k / <span class="number">2</span>, k) &#123;</span><br><span class="line">        swap(k / <span class="number">2</span>, k);</span><br><span class="line">        k = k / <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在删除元素时使用<code>sink()</code>方法，将元素下沉到正确位置。</p><p>在构建最大堆时，可以遍历整个数组，调用<code>swim()</code>构建，类似元素插入。也可以使用从<code>n/2</code>结点开始，调用sink()函数构建，可以减少一半的数组扫描次数。</p><p>定义：对于一个含有N个元素的基于堆的优先队列，插入元素的操作不超过<code>lgN</code>次比较，删除最大元素的操作需要不超过<code>2lgN</code>次比较。</p><ul><li>删除操作需要比较两次，一次找出孩子结点中较大的结点，另一次将较大的结点与父节点比较，再决定是否需要进行后续交换等操作。</li><li>插入操作比较一次即可，插入结点后与父节点相比，再决定是否需要进行后续操作。</li></ul><p>对于需要大量插入和删除最大元素操作的应用场景，以上定义意味着很大的性能提升。基于堆的实现能够保证在对数时间内完成操作，而不再是线性时间。</p><p><strong>使用sink()方法构建的堆排序如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(Comparable[] a, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; less(a, j, j + <span class="number">1</span>)</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (!less(a, k, j))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(a, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = n / <span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">        sink(a, k, n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> k = n;</span><br><span class="line">    <span class="keyword">while</span>(k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        swap(a, <span class="number">1</span>, k--);</span><br><span class="line">        sink(a, <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于堆排序："><a href="#关于堆排序：" class="headerlink" title="关于堆排序："></a><strong>关于堆排序：</strong></h2><p>堆排序在排序复杂性中有很重要的地位。是已知唯一能够同时最优利用空间和时间的方法，即使在最坏的情况下，也能够保证<code>O(2NlgN)</code>次比较和恒定的额外空间。</p><p>堆排序一般用在空间比较紧张的环境中（嵌入式设备等），只需要使用较少的代码实现很高的性能。</p><p>现代系统的应用中很少使用堆排序，其无法有效利用缓存，数组元素很少与相邻的其他数组进行比较，导致缓存的命中次数较少，效率远低于大多数比较都在相邻元素的算法，如快速排序、归并排序，甚至希尔排序。</p><p>而优先队列在现代应用程序中地位越加重要，其插入操作和删除最大元素混合操作的动态场景中能够保证对数级别的运行时间。</p><ul><li>在一些数据处理的场景如TopM 和 Multiway，数据量大到很难用排序实现【假设10亿条数据，很难装入内存】，因此我们只能通过优先队列中先取出一部分进行处理，再决定是否向优先队列中加入更多数据。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Abdul Bari: <a href="https://www.youtube.com/watch?v=HqPJF2L5h9U&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=32">2.6.3 Heap - Heap Sort - Heapify - Priority Queues</a></p><p>MIT 6.006 Introduce to Algorithms, Fall 2011: <a href="https://www.youtube.com/watch?v=B7hVxCmfPtM">4. Heaps and Heap Sort</a></p><p>Algs4: <a href="https://algs4.cs.princeton.edu/24pq/">Priority Queues. Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne.</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heapsort&quot;&gt;&lt;a href=&quot;#Heapsort&quot; class=&quot;headerlink&quot; title=&quot;Heapsort&quot;&gt;&lt;/a&gt;Heapsort&lt;/h1&gt;&lt;h2 id=&quot;堆-Heaps&quot;&gt;&lt;a href=&quot;#堆-Heaps&quot; class=&quot;headerlink&quot; title=&quot;堆(Heaps)&quot;&gt;&lt;/a&gt;堆(Heaps)&lt;/h2&gt;&lt;p&gt;（二叉）堆数据结构是一个数组，且需要满足完全二叉树的性质，也就是除最底层之外，树是完全充满的，而且从左向右填充的。&lt;/p&gt;
&lt;p&gt;用于表示堆的数组A一般有两个属性：&lt;code&gt;A.length&lt;/code&gt;表示数组元素的个数。&lt;code&gt;A.heap-size&lt;/code&gt;表示堆元素在数组中的元素个数，即有效数组元素。&lt;/p&gt;
&lt;p&gt;如下图所示，数组长度可以为100，但用于存储堆的有效数组长度为10。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/07/Heapsort/Screen_Shot_2021-05-06_at_3.40.43_PM.png&quot; alt=&quot;Heapsort%20/Screen_Shot_2021-05-06_at_3.40.43_PM.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果数组的index从1开始，元素i的parent表示为$\left \lfloor i/2 \right \rfloor$，元素i的左孩子为&lt;code&gt;2 * i&lt;/code&gt;；元素的右孩子为&lt;code&gt;2 * i + 1&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>The analysis of algorithms</title>
    <link href="https://superming.life/2021/04/26/The%20analysis%20of%20algorithms/"/>
    <id>https://superming.life/2021/04/26/The%20analysis%20of%20algorithms/</id>
    <published>2021-04-26T07:15:19.000Z</published>
    <updated>2021-04-26T07:50:38.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-analysis-of-algorithms"><a href="#The-analysis-of-algorithms" class="headerlink" title="The analysis of algorithms"></a>The analysis of algorithms</h1><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Untitled.png" alt="The%20analysis%20of%20algorithms/Untitled.png"></p><h2 id="Brief"><a href="#Brief" class="headerlink" title="Brief."></a>Brief.</h2><p>Analyzing an algorithms algorithm has come to mean predicting the resources that the algorithms requires. Occasionally, resources such as memory, communication, bandwidth, or computer hardware are of primary concern, but most often it’s <strong>computational time</strong> that we want to measure.</p><a id="more"></a><p><strong>System independent effects.</strong></p><ul><li>Algorithm.</li><li>Input data.</li></ul><p><strong>System dependent effects.</strong></p><ul><li>Hardware: CPU, memory, cache.</li><li>Software: compiler, interpreter, garbage collector…</li><li>System: operating system, network, other apps…</li></ul><p><strong>Reasons to analyze algorithms.</strong></p><ol><li>Predict performance.</li><li>Compare algorithms.</li><li>Provide guarantees.</li><li>Understand theoretical basis.</li></ol><p><strong>Running time.</strong></p><p>“ As soon as an Analytic Engine exists, it will necessarily guide the future course of the science. Whenever any result is sought by its aid, the question will arise—By what course of calculation can these results be arrived at by the machine in the shortest time? ”  — Charles Babbage (1864)</p><p>Total running time: <strong>sum of cost x frequency for all operations.</strong></p><ul><li>Need to analyze program to determine set of operations.</li><li>Cost depends on machine compiler.</li><li>Frequency depends on algorithm, input data.</li></ul><p><strong>Simplifying the calculations.</strong></p><p>“ It is convenient to have a measure of the amount of work involved in a computing process, even though it be a very crude one. We may count up the number of times that various elementary operations are applied in the whole process and then given them various weights. We might, for instance, count the number of additions, subtractions, multiplications, divisions, recording of numbers, and extractions of figures from tables. In the case of computing with matrices most<br>of the work consists of multiplications and writing down numbers, and we shall therefore only attempt to count the number of multiplications and recordings. ” — Alan Turing</p><p><strong>Why analysis the algorithms are so important?</strong></p><p>With all these data we consume and generate every day, algorithms must be good enough to handle operations in large volumes of data.</p><p>The basic theory of algorithms. </p><h2 id="Frequency-count-method"><a href="#Frequency-count-method" class="headerlink" title="Frequency count method."></a>Frequency count method.</h2><p><strong>Take some examples.</strong></p><p>eg.1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sum (A,n) &#123;</span><br><span class="line">    S = <span class="number">0</span>;              ---&gt; <span class="number">1</span> time</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)&#123; ---&gt; n + <span class="number">1</span> times</span><br><span class="line">        S = S + A[i];   ---&gt; n times</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S;           ---&gt;  <span class="number">1</span> time</span><br><span class="line">&#125;</span><br><span class="line">Total time: f(n) = <span class="number">2</span>n + <span class="number">1</span> times   =&gt; O(n)</span><br><span class="line">Space: </span><br><span class="line">A n </span><br><span class="line">n <span class="number">1</span></span><br><span class="line">s <span class="number">1</span></span><br><span class="line">i <span class="number">1</span></span><br><span class="line">----</span><br><span class="line">Total space time: s(n) = n + <span class="number">3</span>  =&gt; O(n)</span><br></pre></td></tr></table></figure><p>eg.2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Add (A, B, n) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)         ---&gt; n + <span class="number">1</span> times</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)      ---&gt; n * (n + <span class="number">1</span>) times</span><br><span class="line">            C[i,j] = A[i,j] + B[i,j];--&gt; n * n times</span><br><span class="line">&#125;</span><br><span class="line">Total time: f(n) = <span class="number">2</span>n^<span class="number">2</span> + <span class="number">2</span>n + <span class="number">2</span>  =&gt; O(n^<span class="number">2</span>)</span><br><span class="line">Space:</span><br><span class="line">A  n^<span class="number">2</span></span><br><span class="line">B  n^<span class="number">2</span></span><br><span class="line">C  n^<span class="number">2</span></span><br><span class="line">n  <span class="number">1</span></span><br><span class="line">i  <span class="number">1</span></span><br><span class="line">j  <span class="number">1</span></span><br><span class="line">Total space: s(n) = <span class="number">3</span> n^<span class="number">2</span> + <span class="number">3</span>  =&gt; O(n^<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>eg.3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Multiply(A, B, n)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)    ---&gt; n + <span class="number">1</span> times</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)&#123; --&gt; n (n + <span class="number">1</span>) times</span><br><span class="line">            c[i,j] = <span class="number">0</span>;         --&gt; n * n times</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; n; k++) -&gt; n * n * (n + <span class="number">1</span>) times  </span><br><span class="line">                c[i,j] = c[i,j] + A[i,k] * B[k,j] -&gt; n * n * n times  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Total time: f(n) = <span class="number">2</span>n^<span class="number">3</span> + <span class="number">3</span>n^<span class="number">2</span> + <span class="number">2</span>n + <span class="number">1</span> =&gt; O(n^<span class="number">3</span>)</span><br><span class="line">Space:</span><br><span class="line">A n^<span class="number">2</span></span><br><span class="line">B n^<span class="number">2</span></span><br><span class="line">C n^<span class="number">2</span></span><br><span class="line">n <span class="number">1</span></span><br><span class="line">i <span class="number">1</span></span><br><span class="line">j <span class="number">1</span></span><br><span class="line">k <span class="number">1</span></span><br><span class="line">Total spcae: s(n) = <span class="number">3</span> * n^<span class="number">2</span> + <span class="number">4</span>  =&gt; O(n^<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>Worst-case and average-case analysis.</strong></p><ul><li>The worst-case running time of an algorithm gives us an upper bound on the running time for any input. It provides a guarantee that the algorithms will never take any longer.</li><li>For some algorithms, the worst case occurs fairly often.</li><li>The “average case” if often roughly as bad as the worst case.</li></ul><p><strong>Time complexity.</strong></p><p>In computer science, the <strong>time complexity</strong> is the terminology that describes the amount of computer time it takes to run an algorithms. </p><p>The <strong>time complexity</strong> is the number of operations an algorithms performs to complete its task. The algorithm that performs the task in smallest number of operations is considered the most efficient one in terms of the time complexity.</p><p>The time complexity is commonly expressed by using <strong>big O notation</strong>, where <strong>n</strong> is the input size of units of bits needed to represent the input.</p><p>不同参考书中对于时间复杂度的概念。</p><ul><li><p><strong>《算法导论》</strong></p><p>  2.2 &amp; 3.1 &amp; 3.2</p><p>  分析算法的结果意味着预测算法所需要的资源。一般来说度量的是计算时间。</p><p>  一般来说，算法需要的时间与输入规模同步增长，所以通常把一个程序的运行时间描述成其输入规模的函数。</p><p>  <strong>输入规模</strong>的最佳概念依赖于研究的问题。</p><p>  一个算法在特定输入上的<strong>运行时间</strong>是指执行的基本操作或步数。</p></li><li><p><strong>《王道》</strong></p><p>  一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记为T(n)，它是该算法<strong>问题规模</strong>n的函数，时间复杂度主要分析T(n)的数量级。算法中基本运算的频度与T(N)同数量级，因此通常采用算法中基本运算频度f(n)来分析算法的时间复杂度。 <code>T(n) = O(f(n))</code></p></li><li><p><strong>《算法基础》</strong></p><p>  一般情况下，算法的时间复杂度分析就是针对输入规模的每个取值，计算该算法执行来多少次<strong>基本运算</strong>。 因此可以某些基本运算的执行次数，将其表示为输入规模的函数，来分析算法的效率。</p><p>  在某些情况下，基本运算的执行次数不仅取决于输入规模，还与输入值有关。</p><p>  T(n)定义为：对输入规模n的一个具体取值，该算法执行基本运算的次数。T(n)称算法所有情况时间复杂度(every-case time complexity)，对T(n)的计算称为所有情况时间复杂度分析。</p><p>  对于给定算法，W(n)定义为：当输入规模为n时，该算法执行基本运算的最大次数。所以W(n)为算法最差时间复杂度，W(n)计算称为最差情况时间复杂度分析。</p><p>  B(n)定义为：对于输入规模n，该算法执行基本运算的最小次数。为算法的最佳情况时间复杂度，对B(n)的求解称为最佳情况时间复杂度分析。</p></li></ul><p><strong>Take some examples</strong></p><p>eg.1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)  -&gt; n + <span class="number">1</span> times</span><br><span class="line">    excute. -&gt; n times</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = n; i &gt; <span class="number">0</span>; i--)  -&gt; n + <span class="number">1</span> times</span><br><span class="line">    excute. -&gt; n times</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i+<span class="number">2</span>)  -&gt; n / <span class="number">2</span> times</span><br><span class="line">    excute. -&gt; n / <span class="number">2</span> times</span><br><span class="line"></span><br><span class="line">Formular above  =&gt; O(n)</span><br></pre></td></tr></table></figure><p>eg.2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  -&gt; n + <span class="number">1</span> times</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) -&gt; n * (n + <span class="number">1</span>) times</span><br><span class="line">        excute. -&gt; n * n times</span><br><span class="line">Total: f(n) = <span class="number">2</span>n^<span class="number">2</span> + <span class="number">2</span>n + <span class="number">1</span>  =&gt; O(n^<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)  -&gt; n + <span class="number">1</span> times</span><br><span class="line">    <span class="keyword">for</span>(j = i; j &lt; n; j++) -&gt; n * ∑&#123;i=<span class="number">1</span>, i=n&#125;n times</span><br><span class="line">        excute.  -&gt; n * ∑&#123;i=<span class="number">1</span>, i=n&#125;n - <span class="number">1</span> times</span><br></pre></td></tr></table></figure><p>eg.3</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">P = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; P &lt;= n; i++) &#123;</span><br><span class="line">    P = P + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Analog.</span><br><span class="line">i  P </span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>+<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>+<span class="number">2</span>=<span class="number">3</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>+<span class="number">3</span> =<span class="number">6</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">. </span><br><span class="line">K  <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+...K = K(<span class="number">1</span>+K)/<span class="number">2</span></span><br></pre></td></tr></table></figure><p>Assume the program stops when P &gt; n.</p><p>$P = k * (1 + k) &gt; n;<br>k &gt; \sqrt(n) \Rightarrow   O(\sqrt(n))$ </p><p>eg.4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i = i * <span class="number">2</span>) </span><br><span class="line">    excute.</span><br><span class="line">----</span><br><span class="line">i </span><br><span class="line"><span class="number">2</span>^<span class="number">1</span></span><br><span class="line"><span class="number">2</span>^<span class="number">2</span></span><br><span class="line"><span class="number">2</span>^<span class="number">3</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="number">2</span>^k</span><br><span class="line">---</span><br><span class="line">same <span class="keyword">if</span> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i = i / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Assume the program stops when i ≥ n.</p><p> $i = 2^k\geq n \Rightarrow O(\log_{2}n)$</p><p>eg.5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">P = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i = i * <span class="number">2</span>)</span><br><span class="line">    P++;    -&gt; <span class="built_in">log</span>(n)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; P; j = j * <span class="number">2</span>)</span><br><span class="line">    excute.   -&gt; <span class="built_in">log</span>(P)</span><br><span class="line">P = <span class="built_in">log</span>(n)</span><br><span class="line">f(n) = <span class="built_in">log</span>(<span class="built_in">log</span>(n)) =&gt; O(<span class="built_in">log</span>(<span class="built_in">log</span>(n))</span><br></pre></td></tr></table></figure><p>eg.6</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)   -&gt; n + <span class="number">1</span> times</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n; j = j + <span class="number">2</span>) -&gt; n * (logn) times </span><br><span class="line">        excute. -&gt; n * (logn) times</span><br><span class="line">Total time. f(n) = <span class="number">2</span>n * logn + n times =&gt; O(nlogn)</span><br></pre></td></tr></table></figure><h2 id="Asymptotic-notation"><a href="#Asymptotic-notation" class="headerlink" title="Asymptotic notation."></a><strong>Asymptotic notation.</strong></h2><p>The examples above give us a simple characterization of algorithm’s efficiency and allow us to compare the relative performance of alternative algorithms. For large enough inputs, the multiplicative constants and lower-order terms of an exact running time are <strong>dominated</strong> by the input of the input size itself. So when the input sizes large enough to make only the order of growth of the running relevant,  we need Asymptotic efficiency to describe an algorithms.</p><p><u>Intuitive picture of functions f(n) and g(n).</u></p><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_10.55.37_AM.png" alt="The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_10.55.37_AM.png"></p><p><strong>Overview</strong></p><p>Big O notation  = &gt; upper bound.</p><p>Big Ω notation = &gt; lower bound.</p><p>Θ notation = &gt; average bound.</p><p><strong>Best case</strong>. Lower bound on cost.</p><ul><li>Determined by “easiest” input.</li><li>Provides a goal for all inputs.</li></ul><p><strong>Worst case.</strong> Upper bound on cost</p><ul><li>Determined by “most difficult” input.</li><li>Provides a guarantee for all input.</li></ul><p><strong>Average case.</strong> Expected cost for random input.</p><ul><li>Need a model for “random” input.</li><li>Provides a way to predict performance.</li></ul><p><strong>Big O notation:</strong> </p><p>O notation have an <strong>asymptotic upper bound.</strong> </p><blockquote><p>$O(g(n)) = f(n):$  </p><p>there exist positive constants  $c$  and  $n_{0}$  </p><p>such that  $0\leq f(n) \leq cg(n)$  for all  $n \geq n_{0}$.</p></blockquote><p><strong>Big Ω notation:</strong></p><p>Ω notation provides an <strong>asymptotic lower bound</strong>.</p><blockquote><p>$\Omega(g(n)) = f(n):$</p><p>there exist positive constants $c$ and $n_{0}$ </p><p>such that $0\leq cg(n)\leq f(n)$for all $n \geq n_{0}$.</p></blockquote><p><strong>$\Theta$ notation:</strong></p><p>$\Theta$ notation asymptotically bounds a function from <strong>above and below.</strong></p><blockquote><p>$\Theta(g(n)) = f(n):$</p><p>there exist positive constants $c$ and $n_{0}$ </p><p>such that $0\leq c<em>{1}g(n)\leq f(n) \leq c</em>{2}g(n)$ for all $n \geq n_{0}$.</p></blockquote><h2 id="Properities-of-Asymptotic-notations"><a href="#Properities-of-Asymptotic-notations" class="headerlink" title="Properities of Asymptotic notations."></a><strong>Properities of Asymptotic notations.</strong></h2><p><strong>Theorem</strong>.</p><p>For any two functions $f(n)$ and $g(n)$, we have $f(n)=\Theta(g(n))$ if and only if $f(n) = \Omega(g(n))$ and $f(n) = O(g(n))$ .</p><p><strong>Transitivity</strong>.</p><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_12.31.56_PM.png" alt="The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_12.31.56_PM.png"></p><p><strong>Reflexivity</strong>.</p><p>$f(n) = \Theta(f(n))$ </p><p>$f(n) = O(f(n))$</p><p>$f(n) = \Omega(f(n))$</p><p><strong>Symmetry</strong></p><p>$f(n)=O(g(n))$ if and only if $g(n)=\Theta(f(n))$,</p><p><strong>Transpose sysmmetric</strong></p><p>$f(n)=O(g(n))$ if and only if $g(n)=\Omega(f(n))$,</p><p>we can draw an analogy below:</p><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_12.39.34_PM.png" alt="The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_12.39.34_PM.png"></p><h2 id="Comparison-of-function"><a href="#Comparison-of-function" class="headerlink" title="Comparison of function."></a><strong>Comparison of function.</strong></h2><p>Method: Apply log on both sides.</p><p>Take below formulas for examples.</p><ol><li>$logn^{2}$   and $logn^{^3}$</li><li>$f(n)=3n^{\sqrt(n)}$ and  $g(n) = 2 ^{\sqrt(n)}logn$</li><li>$f(n)=n^{logn}$ and $g(n)=2^{\sqrt{n}}$</li><li>$f(n)=2^{logn}$ and $g(n)=n^{\sqrt n}$</li><li>$f(n)=2^{n}$ and $g(n) = 2^{2n}$</li></ol><p><a href="https://www.notion.so/926ae6d72805493b888269b5f00d1fc0">Table of common  time compliexities</a></p><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_2.51.59_PM.png" alt="The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_2.51.59_PM.png"></p><h2 id="Big-O-cheat-sheet"><a href="#Big-O-cheat-sheet" class="headerlink" title="Big-O cheat sheet"></a>Big-O cheat sheet</h2><p>The Big-O complexity chart.</p><p><a href="https://www.bigocheatsheet.com/">Know Thy Complexities!</a></p><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_2.10.14_PM.png" alt="The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_2.10.14_PM.png"></p><p><img src="/2021/04/26/The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_2.10.24_PM.png" alt="The%20analysis%20of%20algorithms/Screen_Shot_2021-04-26_at_2.10.24_PM.png"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Books:<br><a href="https://algs4.cs.princeton.edu/home/">Algorithms Fourth Edition</a> </p><ul><li>1.4 Analysis of algorithms.</li></ul><p><a href="https://mitpress.mit.edu/books/introduction-algorithms-third-edition">Introduction to Algorithms</a></p><ul><li>2.2 Analyzing of algorithms</li><li>3 Growth of function</li></ul><p><a href="https://en.wikipedia.org/wiki/Category:Analysis_of_algorithms">Category:Analysis of algorithms - Wikipedia</a></p><p><a href="https://en.wikipedia.org/wiki/Time_complexity">Time complexity - Wikipedia</a></p><p><a href="https://towardsdatascience.com/understanding-time-complexity-with-python-examples-2bda6e8158a7">Understanding time complexity with Python examples</a></p><p><a href="https://www.freecodecamp.org/news/time-complexity-of-algorithms/">An Introduction to the Time Complexity of Algorithms</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;The-analysis-of-algorithms&quot;&gt;&lt;a href=&quot;#The-analysis-of-algorithms&quot; class=&quot;headerlink&quot; title=&quot;The analysis of algorithms&quot;&gt;&lt;/a&gt;The analysis of algorithms&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/04/26/The%20analysis%20of%20algorithms/Untitled.png&quot; alt=&quot;The%20analysis%20of%20algorithms/Untitled.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Brief&quot;&gt;&lt;a href=&quot;#Brief&quot; class=&quot;headerlink&quot; title=&quot;Brief.&quot;&gt;&lt;/a&gt;Brief.&lt;/h2&gt;&lt;p&gt;Analyzing an algorithms algorithm has come to mean predicting the resources that the algorithms requires. Occasionally, resources such as memory, communication, bandwidth, or computer hardware are of primary concern, but most often it’s &lt;strong&gt;computational time&lt;/strong&gt; that we want to measure.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Report 3</title>
    <link href="https://superming.life/2021/04/19/Weekly-Report-3/"/>
    <id>https://superming.life/2021/04/19/Weekly-Report-3/</id>
    <published>2021-04-19T00:30:00.000Z</published>
    <updated>2021-04-20T01:08:26.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-4-weekly-report-3-Apr"><a href="#2021-4-weekly-report-3-Apr" class="headerlink" title="2021.4 weekly report 3[Apr]"></a>2021.4 weekly report 3[Apr]</h1><h2 id="周记录-4-11-4-18"><a href="#周记录-4-11-4-18" class="headerlink" title="周记录(4.11-4.18)"></a>周记录(4.11-4.18)</h2><p><strong>“人生的剧本你早就在天堂看过了，你选择这个剧本是因为这一生有你认为值得的地方“</strong></p><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><p><strong><a href="https://book.douban.com/subject/27591495/">《万古江河》</a></strong></p><p>“坐上许先生的飞行器，穿过中国历史文化的洪流。“<br>许先生在13邀有一期采访，很有深度，也是了解许先生一个很好的资源。</p><p><a href="https://v.qq.com/x/cover/mzc0020019dz35p.html">13邀：许倬云</a></p><p><a href="https://webplus.nju.edu.cn/_s26/8c/a2/c276a36002/page.psp">史学大师许倬云先生的郑重拜托</a></p><p>许老先生用一个局外人的身份，将中国从史前到现代中经历的一些变革串联了起来。点到却不深入，整体阅读体验不错。</p><a id="more"></a><p><a href="https://book.douban.com/subject/27182602/">《安藤忠雄：建造属于自己的世界》</a></p><p>思考多于图片，图片多于文字。激荡而丰富的一本册子。</p><p>书本中反复提及安藤忠雄对<code>自由和挑战</code>的理解：</p><p>“其实人生下来就是不自由的。”</p><p>“如果没有自由的话，我们的世界观是很难扩展的。在日本人心中，我觉得最缺乏的就是这种自由，所以大家都想去大公司上班，年轻人都被拘束着，想在大公司一直工作到60岁。“</p><p>“挑战这种东西，不是搏斗，也不是战斗，而是因为没有学习，因为不足才有了挑战。“</p><p>”我希望成为勒 柯布西那样自由的人。“</p><p>在切除肿瘤和脾脏后：</p><p>“人这种生物有时候也是很坚强的，一场大病之后，如何活下去就看自己的选择了。人生路上会发生什么，谁也不知道，但是我要按自己的生活方式继续走下去。“</p><p>关于<code>美</code>：</p><p>”我觉得美是每个地方的人，大家都相互尊重，和谐共处，这样才叫美。如果千篇一律，都是同一个形式，这就不叫美。各种各样的事务和谐共处的时候，才是美，才有生命力。“</p><p>“我觉得要去思考，在行动之前，人还是要有一定的视野，如果没有的话，是学不到新东西的。”</p><h2 id="Explore"><a href="#Explore" class="headerlink" title="Explore"></a>Explore</h2><p><code>API</code></p><p><a href="https://www.theverge.com/2021/4/5/22367851/google-oracle-supreme-court-ruling-java-android-api">Supreme Court sides with Google in Oracle’s API copyright case</a></p><p>Google和Oracle就在Android开发中使用Java API是否合法这一长期诉讼有了结果，Google胜诉。<strong>对整个软件开发生态而言意义重大，尤其是开源生态。</strong>给从API这一方向进行垄断，打压相关生态开发者这类事件进行了一个定调。</p><p><code>Computer Networks</code></p><p>计算机网络相关很不错的一个学习资源。[Books &amp; Blogs]</p><p><a href="https://www.systemsapproach.org/">Computer Networks: A Systems Approach</a></p><p>System Approach: Explaining the Internet: its technology, its architecture, and its evolution</p><p><a href="https://book.systemsapproach.org/index.html">Computer Networks: A Systems Approach</a></p><p><code>李笑来：自学是们手艺</code></p><p>Github：<a href="https://github.com/selfteaching/the-craft-of-selfteaching">the-craft-of-selfteaching</a></p><p><code>Instant Messenger</code></p><p>两篇关于Instant Messenger的文章</p><p>Walled Gardens. 即时通讯软件之间的现状，无论国内外。平台之间的割裂导致很多时候我们没的选，生态之间的割裂已经到了无法割裂的程度，而底层逻辑却是大同小异。</p><p>Instant Message生态环境引发的debate。</p><p><a href="https://www.republik.ch/2021/02/24/kill-the-messenger">Kill the Messenger</a></p><p><a href="https://stuker.com/2021/whatsapp-and-most-alternatives-share-the-same-problem/">WhatsApp and most alternatives share the same problem - Jürg Stuker</a></p><h2 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h2><p>最近看到、听到、经历了很多动容的事情。</p><p><code>人物</code></p><p>周信静：<a href="https://zhuanlan.zhihu.com/p/360390223?utm_source=com.twitter.android&amp;utm_medium=social&amp;utm_oi=928260215894343680">讲讲他的故事：从职高到MIT计算机博士录取</a></p><p>其中一条评论：</p><p>《了不起的盖茨比》开头有句话说：“每当你想批评别人时，记住，并不是世界上所有人都有和你一样的优越条件。”信静的故事对我来说就是：“每当你找借口说自己做不到时，记住，世界上有人克服了很多很多你想象不到的困难，站到了和你同样的台阶，达成了你不敢想象的成就。”</p><p>有些人天生带着与众不同的气质，专注、热情、行动力、知识检索能力…环境往往不会制约这些人。再年轻点看到这些文章会像打鸡血一样，恨不得把时间掰开用。但越来越会发现，<strong>个人成长的基础永远都是先了解和认识你自己。</strong>也碰到过类似的朋友，能做的更多的是从他们身上认识自己，去感受那种热情，回过头去发掘自己的Spark。</p><p><code>Life sucks？</code></p><p>随机波动的一期信箱</p><p>夹在一群陌生工人间吃着快餐，忍了一路，听到最后一期，实在没忍住，情绪崩溃，掩盖尴尬默默按下了暂停键。</p><p><a href="https://www.stovol.club/post02">【随机信箱】从父辈的工厂到我们的大厂，人要逃向哪里？</a></p><p><code>The Art of Programming</code></p><p><a href="https://mp.weixin.qq.com/s/ZA-_BARVAWe0Q4eM0lYgwg">透过 Rust 探索系统的本原：编程语言</a></p><p><a href="https://draveness.me/heterogeneous-computing/">CPU 和 GPU - 异构计算的演进与发展</a></p><h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>喜欢听不同人发生不同的故事，像是探索世界很独特的方式和角度，别人的故事总能够刺激我去思考，去想一些事情。意识到生活之外有那么多可能性，真真切切的在别人的身上经历过，各种各样的人，各种各样的事，立体又生动，充满层次感和复杂性。很难真实又准确的描述出这些事情和经历对我个人的影响或是塑造，但却能感受到它的存在，在流淌。</p><p>不经意间会发现自己也是狭隘甚至充满偏见，sometimes judgemental，亦或是浑身的缺点。但这一切都是那么平和自然，包容思考然后做点什么，是接受了那种多样性？然后心平气和在这种夹缝中修复自己。好复杂的描述…</p><p>说到交流，发现在交流过程中，会更多把自己当成一个输入者，而非一个输出者。尽量选择不让自己的想法去打断或attack别人的观点，即使我的想法和他有很大的出入，又感觉这可能不是比较良性的交流。这种表面平顺的输出有时会导致communication很难深入，产生那种观点之间的碰撞而产生的新观点。后续尝试尝试，需要对自己逻辑组织并表达的能力的锻炼，日后值得注意的一个点。</p><p>友谊和工作才是持久永恒的带来安定和快乐的。</p><p>喜欢巴迪欧说，艺术、科学、爱和政治，是我们人类走向真理的四种途径。在这四条道路上的每一种追求，都会把我们升华到更高的命运刻度。</p><hr><p>我想谈一谈为什么我是一 名女性主义者。 原因其实很简单:从某种意义上来说，我也是一名“女性”。</p><p>在异国他乡，我是一名alien; 在种族大熔炉中，我是一名少数族裔者; 在极权社会中，我是一名 dissenter;在传统家庭观念之下，我是一名“不孝之子”(我不仅远游，我还无后) ;在互联网世界，我是一名手机上瘾者。</p><p>在这些身份之下，在观念、规则和意识形态的包围之中，我渴望能被平等对待，我渴望能冲破阻碍，获得自由。也正是在这个意义上，在想象到(谈不上理解)女性的困境之后，在发现彼此都渴望在寻求自我之路上获得解放之后，我发现其实我也是一名“女性”。</p><p>我在想，是谁会对女性主义有如此强的敌意:对自己处境一-无所知之人， 对他人处境无法想象之人，对生活停止反思之人。”</p><p>by 《不丧》播客</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2021-4-weekly-report-3-Apr&quot;&gt;&lt;a href=&quot;#2021-4-weekly-report-3-Apr&quot; class=&quot;headerlink&quot; title=&quot;2021.4 weekly report 3[Apr]&quot;&gt;&lt;/a&gt;2021.4 weekly report 3[Apr]&lt;/h1&gt;&lt;h2 id=&quot;周记录-4-11-4-18&quot;&gt;&lt;a href=&quot;#周记录-4-11-4-18&quot; class=&quot;headerlink&quot; title=&quot;周记录(4.11-4.18)&quot;&gt;&lt;/a&gt;周记录(4.11-4.18)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;“人生的剧本你早就在天堂看过了，你选择这个剧本是因为这一生有你认为值得的地方“&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Books&quot;&gt;&lt;a href=&quot;#Books&quot; class=&quot;headerlink&quot; title=&quot;Books&quot;&gt;&lt;/a&gt;Books&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://book.douban.com/subject/27591495/&quot;&gt;《万古江河》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“坐上许先生的飞行器，穿过中国历史文化的洪流。“&lt;br&gt;许先生在13邀有一期采访，很有深度，也是了解许先生一个很好的资源。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v.qq.com/x/cover/mzc0020019dz35p.html&quot;&gt;13邀：许倬云&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webplus.nju.edu.cn/_s26/8c/a2/c276a36002/page.psp&quot;&gt;史学大师许倬云先生的郑重拜托&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;许老先生用一个局外人的身份，将中国从史前到现代中经历的一些变革串联了起来。点到却不深入，整体阅读体验不错。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://superming.life/categories/Life/"/>
    
    
      <category term="Weekly-Report" scheme="https://superming.life/tags/Weekly-Report/"/>
    
  </entry>
  
  <entry>
    <title>B-tree</title>
    <link href="https://superming.life/2021/04/15/B-tree/"/>
    <id>https://superming.life/2021/04/15/B-tree/</id>
    <published>2021-04-15T06:48:56.000Z</published>
    <updated>2021-04-15T06:27:38.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h1><h2 id="Disk-Structure"><a href="#Disk-Structure" class="headerlink" title="Disk Structure"></a>Disk Structure</h2><p>B tree and B+ tree are widly used in filesystem for indexing. </p><p>Understanding the disk structure will be helpful when learning B / B+ tree.</p><p>The pic below explian how data is stored and manage on the disk specifically.</p><a id="more"></a> <p><img src="/2021/04/15/B-tree/disk.png" alt></p><p>Disk is divided into many tracks and sectors. </p><p>We read and write in terms of blocks. and any block on the disk can be addressed by <strong>tracker number and sector number.</strong></p><p>When we reach the block then we can visit <strong>a particular byte</strong> on disk with the offset. [tracker number, block number, offset]</p><p>Data can’t read and write directly from disk, we will put them into main memory(RAM), after the operation then put back.</p><p><strong>Main point:</strong></p><p>The indexes of tracker and sector are also stored in blocks.</p><p><strong>How many blocks we need for accessing the records in disk?</strong></p><p>We need 4 blocks to store the index and 1 block to assess the data. [The example above]</p><p>A: (4 + 1) blocks are required to accessing every data of the database.[not 25 blocks]</p><p><strong>How many blocks we need to storage those records?</strong></p><p>A: 25 blocks for records and 4 blocks for Index.</p><h2 id="Muti-Level-indexing"><a href="#Muti-Level-indexing" class="headerlink" title="Muti-Level indexing"></a>Muti-Level indexing</h2><p>Situation: When the records is extremely large.How we handle this situation.</p><p>Exp. We have 1000 records.[250 blocks], and we need 40 blocks for index.</p><p>The problem is that the index itself is large, so we need muti-level indexing to recude the access time.</p><p><img src="/2021/04/15/B-tree/mutilevel.png" alt></p><p><strong>So how many blocks do we need after we design a new index for indexing.</strong></p><p>Second level index: 2 blocks.</p><p>First level index: 40 blocks.</p><p>Total: 2 + 1 + 1 = 4 blocks.</p><p>Adding one more index will reduce the access of blocks.</p><p>That’s the basic idea for B / B+ tree.</p><p>So the final point is: we want self-manage multi level indexing so that’s the idea of b / b+ trees.</p><h2 id="M-way-search-tree"><a href="#M-way-search-tree" class="headerlink" title="M-way search tree"></a>M-way search tree</h2><p>Wikipedia: <a href="https://en.wikipedia.org/wiki/M-tree">M-tree</a></p><p>M-way search means each node can have at most M children and m - 1 keys.[The extension of BST]</p><p><img src="/2021/04/15/B-tree/mway.png" alt></p><p><strong>What’s the problem of m-way search tree?</strong></p><p>There is <strong>no control</strong> of m-way search tree. You can insert as you like.</p><p>Exp: if i have n keys, so the height of the tree may be n. so <strong>time-consuming</strong>.</p><p><strong>So the B-tree set some rules of m-way tree.</strong></p><p>Rules that B-tree made in order to keep efficiency.</p><ul><li>Every node you must fill at least half. $\left \lceil m/2 \right \rceil$</li><li>root can have min 2 children.</li><li>All leave nodes at same level.</li><li><strong>bottom up creation.[Inorder to understand how b-tree is growing]</strong></li></ul><p>The restrictions make B-trees always at least half full, have few levels, and remain perfectly balanced.</p><h2 id="Wikipedia"><a href="#Wikipedia" class="headerlink" title="Wikipedia"></a>Wikipedia</h2><p>In computer science, a B-tree is <strong>a self-balancing tree</strong> data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in <strong>logarithmic time</strong>. The B-tree generalizes the binary search tree, allowing for nodes with <strong>more than two children.</strong> Unlike other self-balancing binary search trees, the B-tree is well suited for storage systems that read and write relatively large blocks of data, such as disks. It is commonly used in databases and file systems.</p><p>Keywords: self-balance, logarithmic time, more than two children</p><p><strong>Time complexity :</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">Algorithm</th><th><strong>Average</strong></th><th><strong>Worst case</strong></th></tr></thead><tbody><tr><td style="text-align:left">Space</td><td>O(<em>n</em>)</td><td>O(<em>n</em>)</td></tr><tr><td style="text-align:left">Search</td><td>O(log <em>n</em>)</td><td>O(log <em>n</em>)</td></tr><tr><td style="text-align:left">Insert</td><td>O(log <em>n</em>)</td><td>O(log <em>n</em>)</td></tr><tr><td style="text-align:left">Delete</td><td>O(log <em>n</em>)</td><td>O(log <em>n</em>)</td></tr></tbody></table></div><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>According to Knuth’s definition, a B-tree of order <strong>m</strong> is a tree which satisfies the following properties:</p><ol><li>Every node has at most m child.</li><li>Every non-leaf node (except root) has <strong>at least</strong> ⌈m/2⌉ child nodes.</li><li>The root has at least two children if it is not a leaf node.</li><li>A non-leaf node with k children contains k - 1 keys.</li><li>All leaves appear in the same level and carry no information.</li></ol><p>Internal nodes: Internal nodes are nodes except for leaf nodes and the root node.</p><p>The root node: The root node’s number of children has the same upper limit as internal nodes, but has no lower limit.</p><p>Leaf nodes: Leaf node do not carry any information [Knuth’s terminology]</p><p>B-tree do not need re=balancing as frequently as other self-balancing searching trees, but may waste some space, since nodes are not entirely full.</p><h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><h3 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h3><p>Starting from the root, the tree is recursively traversed from top to bottom. At each level, the search reduces its field of view to the child pointer(subtree) whose range includes the search value.</p><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><p>The core knowledge of Insertion is <strong>split</strong> when the node is full.</p><p>All insertions start at leaf node.</p><p>Search the tree and find out the leaf node where the new element will be added.</p><p>Here are some parameters will be used later.</p><p>node.num : the number of child pointers of a node.</p><p>maxKey : the maximum number of a node.</p><p>minKey: the minimum number of a node.</p><p>use <code>.</code>to visit the node.</p><p>node means the leaf node that will be inserted in.</p><ol><li><code>node.num &lt; maxKey</code>. It means the node has room for the new element.  Insert the new elements to the right position.[sort(node)]</li><li><code>node.num == maxKey</code>.It means the node has no extra room for the new element, so we need to split the node.</li><li><code>median = m / 2</code> . Insert the element to the leaf node and then choose a single median of the node.[m/2]<ol><li>Values less than median are put in the new leaf node, and values greater than the median are put in the new right node, and median as a separation value.</li></ol></li><li><code>node.parent.num == maxKey</code>[after inserting]. The separation value is inserted in the node’s parent, which may cause parent to be split if the parent’s child pointer is full after the inserting.<ol><li><code>node.parent == null</code>. It means we should create a new root above the original root. <code>height++</code></li></ol></li></ol><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><p>Deletion from a B-tree is much more complicated than insertion. We should consider whether node will be deleted, leaf node or internal node.</p><h4 id="Deletion-from-a-leaf-node"><a href="#Deletion-from-a-leaf-node" class="headerlink" title="Deletion from a leaf node."></a>Deletion from a leaf node.</h4><p>Locate and delete the element then rebalance the tree.</p><ol><li>Search the value to delete.</li><li>If the value is a leaf node, simply delete it.</li><li>Rebalanced the tree when underflow happens.[Go to Rebalancing]</li></ol><h4 id="Deletion-from-an-internal-node"><a href="#Deletion-from-an-internal-node" class="headerlink" title="Deletion from an internal node."></a>Deletion from an internal node.</h4><p>The value of each internal node means <strong>the separation value for two subtrees</strong>. So we need to find a <strong>replacement</strong> for the separation<strong>.</strong></p><ol><li>Choose a new separator if we can.<ol><li><code>node.parent.right.key &gt; minKey</code>  means we can borrow the element from the right brother and right rotate to replace the separator number.</li><li><code>node.parent.left.key &gt; minKey</code> means we can borrow the element from the left brother and left rotate to replace the separator number.</li></ol></li><li>Rebalance after rotate. If that leaf node is deficient after deletion, we need to rebalance the tree and starting from the leaf node.</li></ol><h4 id="Rebalancing"><a href="#Rebalancing" class="headerlink" title="Rebalancing"></a>Rebalancing</h4><p>If deletion an element from a node has brought it under minimum size, and some element must be redistributed to bring all nodes up to the minimum size.</p><p><strong>Rotation</strong>. Element from a sibling node that has more than the minimum number of nodes.</p><ol><li><code>node.parent.right.key &gt; minKey</code>  means we can borrow the element from the right brother and right rotate to replace the separator number.</li><li><code>node.parent.left.key &gt; minKey</code> means we can borrow the element from the left brother and left rotate to replace the separator number.</li></ol><p><strong>If no sibling can spare an element, so the deficient node must be merge with a sibling, and the parent will loss a separator element.</strong> Then the parent node may become deficient and need rebalancing. So the merging and rebalancing may continue to the root.</p><p><strong>Merge</strong>. Merging happens when Rotation is unsatisfied.  Take off the separator from their parent and merge with left and right subtree together.</p><ol><li>Copy the separator to the end of the left node.[It may be the deficient node or the sibling with the minimum number of elements.]</li><li>Move all elements from the right node to the left node.[the left node now has the maximum number of elements, and the right node is empty]</li><li>Remove the separator from the parent along with its empty right child. At the same time, the parent will loss an element.<ol><li>parent is the root node and has no elements, then free it and make the merged node  the new root. <code>height--</code></li><li><code>node.parent.num &lt; minKey</code>. if the parent has fewer than the required number of elements, rebalance the parent.</li></ol></li></ol><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>A B-tree grows slower with growing data amount, than the linear of a linked list. Compared to a skip-list, both structures have the same performance, but the B-tree scales better for growing n.</p><p><strong>Advantages of B-tree usage for database</strong></p><ul><li>Keeps keys in sorted order for sequential traversing.</li><li>uses a hierarchical index to minimize the number of disk reads.</li><li>uses partially fully blocks to speed up insertion and deletions. </li><li>keeps the index balanced with a recursive algorithm.</li></ul><p>In addition, a B-tree minimizes waste by making sure the interior nodes are at least half full. A B-tree can handle an arbitrary number of insertions and deletions.</p><h2 id="Implementation-in-Java"><a href="#Implementation-in-Java" class="headerlink" title="Implementation in Java:"></a>Implementation in Java:</h2><p><strong>Node structure</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> childNum;<span class="comment">//The chldren number of a Node.</span></span><br><span class="line">        <span class="keyword">private</span> Entry[] children = <span class="keyword">new</span> Entry[M];<span class="comment">//Every node contains M Entries.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set childNum of a Node.</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">            childNum = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Internal nodes: only use key and next</span></span><br><span class="line">    <span class="comment">//External nodes: only use key and value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Comparable key;</span><br><span class="line">        <span class="keyword">private</span> Object val;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(Comparable key, Object val, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Search</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument to get() is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> search(root, key, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Value <span class="title">search</span><span class="params">(Node x, Key key, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        Entry[] children = x.children;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x.childNum; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eq(key, children[j].key)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (Value) children[j].val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x.childNum; ++j) &#123;</span><br><span class="line">                <span class="comment">//fint the index and search into next level.</span></span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> == x.childNum || less(key, children[j + <span class="number">1</span>].key))</span><br><span class="line">                    <span class="keyword">return</span> search(children[j].next, key, height - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Insert</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;argument key to put() is null&quot;</span>);</span><br><span class="line">        <span class="comment">//if newNode is not null means the tree need to grow a new level.[root node is full]</span></span><br><span class="line">        Node newNode = insert(root, key, val, height);</span><br><span class="line">        number++;</span><br><span class="line">        <span class="keyword">if</span> (newNode == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Node t = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        t.children[<span class="number">0</span>] = <span class="keyword">new</span> Entry(root.children[<span class="number">0</span>].key, <span class="keyword">null</span>, root);</span><br><span class="line">        t.children[<span class="number">1</span>] = <span class="keyword">new</span> Entry(newNode.children[<span class="number">0</span>].key, <span class="keyword">null</span>, newNode);</span><br><span class="line">        root = t;</span><br><span class="line">        height++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(Node h, Key key, Value val, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        Entry t = <span class="keyword">new</span> Entry(key, val, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (height == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; h.childNum; j++) &#123;</span><br><span class="line">                <span class="comment">//find the right index of the tree.</span></span><br><span class="line">                <span class="keyword">if</span> (less(key, h.children[j].key))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; h.childNum; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((j + <span class="number">1</span> == h.childNum) || less(key, h.children[j + <span class="number">1</span>].key)) &#123;</span><br><span class="line">                    <span class="comment">//Node u is null means insert successfully at the lower level. Otherwise, Node u is the half split of the node h.</span></span><br><span class="line">                    <span class="comment">//In insert function j = j, after that j++</span></span><br><span class="line">                    Node u = insert(h.children[j++].next, key, val, height - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//insert successfully and without any other movements.</span></span><br><span class="line">                    <span class="keyword">if</span> (u == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//execute when Node u is not null, connect the Entry to the Node u.</span></span><br><span class="line">                    t.key = u.children[<span class="number">0</span>].key;</span><br><span class="line">                    t.val = <span class="keyword">null</span>;</span><br><span class="line">                    t.next = u;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Put the enrty into right position.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h.childNum; i &gt; j; i--)</span><br><span class="line">            h.children[i] = h.children[i - <span class="number">1</span>];</span><br><span class="line">        h.children[j] = t;</span><br><span class="line">        h.childNum++;</span><br><span class="line">        <span class="comment">//Node is full or not.</span></span><br><span class="line">        <span class="keyword">if</span> (h.childNum &lt; M)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> split(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">split</span><span class="params">(Node h)</span> </span>&#123;</span><br><span class="line">        Node t = <span class="keyword">new</span> Node(M / <span class="number">2</span>);</span><br><span class="line">        h.childNum = M / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M / <span class="number">2</span>; ++j)</span><br><span class="line">            t.children[j] = h.children[M / <span class="number">2</span> + j];</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Github: <a href="https://github.com/AlenZhang-Dev/Algorithm-Exploration/blob/master/Project/src/com/search/Algorithms/BTree.java">B-Tree</a></p><p>Problems and Future implemention:</p><ol><li>The internal node will split when childnum arrived to M - 1. But the first element of childnum is “invisible” which only store the next element,  so the real keynum is M - 2 when splited. [unFixed]</li><li>Deletion operation. [unFixed]</li></ol><hr><h2 id="Referneces"><a href="#Referneces" class="headerlink" title="Referneces:"></a>Referneces:</h2><p><a href="https://en.wikipedia.org/wiki/B-tree">B-tree - Wikipedia</a></p><p><a href="https://www.youtube.com/watch?v=aZjYr87r1b8">Abdul Bari: B Trees and B+ Trees. How they are useful in Databases</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;B-tree&quot;&gt;&lt;a href=&quot;#B-tree&quot; class=&quot;headerlink&quot; title=&quot;B-tree&quot;&gt;&lt;/a&gt;B-tree&lt;/h1&gt;&lt;h2 id=&quot;Disk-Structure&quot;&gt;&lt;a href=&quot;#Disk-Structure&quot; class=&quot;headerlink&quot; title=&quot;Disk Structure&quot;&gt;&lt;/a&gt;Disk Structure&lt;/h2&gt;&lt;p&gt;B tree and B+ tree are widly used in filesystem for indexing. &lt;/p&gt;
&lt;p&gt;Understanding the disk structure will be helpful when learning B / B+ tree.&lt;/p&gt;
&lt;p&gt;The pic below explian how data is stored and manage on the disk specifically.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Report 2</title>
    <link href="https://superming.life/2021/03/14/Weekly-Report-2/"/>
    <id>https://superming.life/2021/03/14/Weekly-Report-2/</id>
    <published>2021-03-14T14:30:00.000Z</published>
    <updated>2021-03-23T05:33:11.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Weekly-Report-Mar"><a href="#Weekly-Report-Mar" class="headerlink" title="Weekly Report [Mar]"></a>Weekly Report [Mar]</h1><p><img src="/2021/03/14/Weekly-Report-2/1.jpeg" alt="1"></p><h2 id="周记录-3-8-3-14"><a href="#周记录-3-8-3-14" class="headerlink" title="周记录 (3.8 - 3.14)"></a>周记录 (3.8 - 3.14)</h2><a id="more"></a><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><p><a href="https://book.douban.com/subject/27074042/">唐浩明《曾国藩I》</a></p><p>客观中立，看不出刻意偏袒的味道。历史并非只是了争个对错，太平天国也好，曾国藩的湘军也好，各有千秋，尊重史实的情况下文笔非常活泼，阅读体验佳。第一册《血祭》，介绍曾国藩赴考途中，得母讣闻便回籍奔丧。后在左宗棠等引荐下开始创立湘军，因其性格强硬，且晚清官场混沌，与各处官员总有冲突，处处碰壁，湘军在其带领下稍有起色，却总出征失利，处处受阻，甚至在京城遭到弹劾，得知后便主动辞官回乡隐退。时间线并不复杂，把握人物起伏的主线，借鉴学习其在各方处事的智慧。官场之事可能离我太过遥远，其对友人，家人之间的处事哲学深受启发，深思熟虑，敬小慎微，富有远见卓识，待三册阅读完毕后整理。曾国藩值得学习的一点在于，他并不像左宗棠等自小才高八斗，和我们一样都是普普通通的人，每日反省自己，<strong>“不做圣贤，便为禽兽”</strong>，正是这般倔强和执着，天资一般的他在不断克制和自省之中成就自己，不断提升、成就自己是人生很重要的一部分啊。其中透过曾国藩去了解晚清的官场政治，对于当今的官场也是一个很好的借鉴，时代的每个阶段，是各方面一起作用下决定了当时的整体环境，去了解他，方能游刃有余，占有一席之地。而关于曾国藩的历史定位及评价，一直都是褒贬不一，建国以来将太平天国的意义进行了拔高，而曾国藩的评价和地位在当下仿佛又受到一定程度的压制，【如何评价历史，心里都有一杆秤，建立自己的评价标准，接受多元】我个人觉得，透过历史看历史，把人物放在其所处的历史环境背景下，尊重历史本身，建立自己的历史观，客观的去衡量评价。</p><p>关于历史和过去，对现实有太多太多可以参照和借鉴了，弄明白了过去，亦可以更深刻了洞察未来，很喜欢周孝正的一番话：“充分的认识过去，我们可以弄清现状，深刻的认识过去的意义，我们可以揭示未来，向后看就是向前进。”，读史并非留恋过去，是为了更好的出发。</p><p><a href="https://book.douban.com/subject/35092383/">项飙 吴琦《把自己做为方法》</a> 访谈体的书籍，阅读过程中的沉浸感非常强，结合<a href="https://v.qq.com/x/cover/mzc00200c5sxk4p/o3026pze76s.html">13邀</a>对其的采访更佳。鉴于本人阅历及思考深度有限，不论在书籍还是访谈之中，项飙老师的观点和论证对我有神奇的吸引力，充满魅力。总反问自己，我为什么没有思考这个问题？对这个问题居然这么独特的角度？这个世界观也太宏大了吧？感觉全程处在震撼和敬佩之中。一些宏大的叙事性问题，在经过老师学术上的消化后，非常接地气、平易近人的输出，丝毫不空洞。被项飙老师内心的细腻与温暖完全捕获了，当下，纯粹太珍贵了。</p><p><strong>“我是一个活人，我对这个活的世界要发出自己的想法。”</strong></p><h2 id="Explore"><a href="#Explore" class="headerlink" title="Explore"></a>Explore</h2><ul><li>整合Machine Learning最新State-of-the-Art的paper和code的平台。</li></ul><p><a href="https://paperswithcode.com/sota">Papers with Code - Browse the State-of-the-Art in Machine Learning</a></p><ul><li><strong>Podcast Explore</strong></li></ul><p>学到学校后走路的时间变多了，基本走路的时候都会听Podcast，每期抽空List几个有意思的Podcast。</p><p><strong>Lex-Fridman</strong>：看MIT Machine Learning 课程时了解到这个老师，Podcast质量非常高，每期都很精彩，访谈形式，邀请的人物质量很高很高，涉及各领域，略微偏向计算机相关领域。</p><p><a href="https://lexfridman.com/">个人Blog主页</a></p><p><a href="https://www.youtube.com/user/lexfridman">Youtube Channel</a></p><p><a href="https://podcasts.apple.com/us/podcast/lex-fridman-podcast/id1434243584">‎Lex Fridman Podcast on Apple Podcasts</a></p><p><strong>不合时宜：</strong></p><p>具体参见Podcast介绍，很有深度和质量的节目。</p><p><a href="https://podcasts.apple.com/us/podcast/%E4%B8%8D%E5%90%88%E6%97%B6%E5%AE%9C/id1487143507">‎不合时宜 on Apple Podcasts</a></p><p><strong>捕蛇者说：</strong></p><p>技术爱好者们制作的一批栏目，着重于编程、程序员、python以及知识管理方向。主播和嘉宾们也都是技术圈的大佬们，挺有趣的。</p><p><a href="https://podcasts.apple.com/us/podcast/%E6%8D%95%E8%9B%87%E8%80%85%E8%AF%B4/id1460475182">‎捕蛇者说 on Apple Podcasts</a></p><p>…</p><h2 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h2><p>主题：<code>Haskell</code></p><ul><li><strong>Why Haskell is our first choice for building production software systems</strong></li></ul><p><a href="https://www.foxhound.systems/blog/why-haskell-for-production/">Why Haskell is our first choice for building production software systems - Foxhound Systems</a></p><p>主题：<code>Equal rights</code></p><ul><li><strong>是什么在阻碍女性成为一名程序员</strong></li></ul><p>价值观层面上的，系统过于庞大复杂，我们要发声，一点点去改变。</p><p>“平凡的池水——临照了夕阳，便成了金海”</p><p><a href="https://www.solidot.org/story?sid=67181">奇客Solidot | 是什么在阻碍女性成为一名程序员？</a></p><p>主题：<code>Thanks Stranger</code></p><p>感谢这些陌生人，19岁的Peter Yang，高三的小凡梦，技术大佬无辄，他们为自己的理想坚定行走，虽素不相识，无不鼓励着我成为更好的自己，是啊，因为人生是没有边界的，谢谢你们。</p><p>@ <a href="https://yangxiamao.github.io/">Peter Yang</a></p><p><a href="https://yangxiamao.github.io/2021/03/03/%E5%9B%A0%E4%B8%BA%E4%BA%BA%E7%94%9F%E6%98%AF%E6%B2%A1%E6%9C%89%E8%BE%B9%E7%95%8C%E7%9A%84/">因为人生是没有边界的</a></p><p>@ <strong><a href="https://www.xiaofm.cn/">凡梦的blog</a></strong></p><p><a href="https://www.xiaofm.cn/archives/198/">高三-我不想徘徊在人生的十字路口 - 凡梦’s blog</a></p><p>@ <strong><a href="https://www.imwzk.com/">无辄的栈</a></strong></p><p><a href="https://www.imwzk.com/posts/2020-07-19-why-i-choose-to-work-after-graduation/">我为什么放弃保研，选择直接工作</a></p><p>主题：<code>Clubhouse</code></p><p>做产品的@ <strong><a href="https://kevinzhow.medium.com/">Kevin Zhou</a></strong>，对Clubhouse产品角度的理解</p><p><a href="https://kevinzhow.medium.com/clubhouse-%E5%9C%A8%E4%B8%AD%E5%9B%BD%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7-%E5%AE%83%E7%9A%84%E5%8F%AF%E5%A4%8D%E5%88%B6%E6%80%A7%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%A4%8D%E5%88%B6%E6%80%A7-896823781f9b">Clubhouse 在中国会怎么样？它的可复制性与不可复制性</a></p><h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><blockquote><p>麻木不仁的日子，记录，即是抵抗。   — 理想国十周年手账</p></blockquote><p>麻木不仁、虚无缥缈、横冲直撞…当下的混乱，是否能为我找到日后的一丝平静呢。坏掉的罗盘，挣扎转动着，又找不到方向。或许我永远也找不到当下的迷失根源，至少还能摸索。</p><h3 id="泛黄的书"><a href="#泛黄的书" class="headerlink" title="泛黄的书"></a>泛黄的书</h3><p>思维总是很跳跃。前些日子还没回学校，看书的时候，突然就感觉好像大家对书本渐渐失去了兴趣一般【可能只是限于我自己周围的圈子】，像是被埋葬在了各种标榜新时代潮流的APP之下；我的分享欲还挺强的，很多时候看到感觉还挺棒的书，电影呀，会有种强烈的欲望想要和别人去交流分享，无奈可以通过这种方式维系的朋友屈指可数，还有几个是陌生网友，想想还是挺悲伤。</p><p>初中毕业后朋友送我的一本书，从书架里抽了出来，时隔快十年，书本微微泛黄。意味着很多，可能要从那时候说起：我小时候就不太爱说话，妈妈说我出生时都不哇哇叫，小时候也很少哭闹，挺乖的。初中考上了市里中学的实验班，因为是镇上来的，住校，身边很多朋友都是走读，光鲜亮丽，还聪明，感觉什么都比不上人家，自卑而又渺小…阳光投射下来才能看到细小的灰尘在空中漂浮着，虚无缥缈，初中时候的心境。毕业后的班级聚会，也因为这种那种的原因推脱了。好不快乐。</p><p>当下虽早已不是当初那样，每次想起、或是拿出这本书，那种从心头泛上来的感动。一种神奇的、被存在的感觉，像是给那段时间赋予了意义，<strong>你看：你在别人的人生中留下过印记。</strong></p><p>或许在她看来这是很小、很平常的一个举；于我而言，完全是另一种意义。</p><p>也许是因为这样那样的事情，很多时候我总想为别人做点什么，哪怕很小很小，甚至微不足道，或许不禁意间你也影响了别人呢。</p><p><img src="/2021/03/14/Weekly-Report-2/5.jpg" alt="5"></p><h3 id="生日"><a href="#生日" class="headerlink" title="生日"></a>生日</h3><p>小时候家里总会挂着老黄历，红的、绿的，密密麻麻的写满了一页看不懂的字儿，在生日那天折一个小角，过一天，盼一天，对老黄历的感情可能这么就出来了。长大了，家里书桌前也挂着老黄历，小小的，也会折一个小角，会看看那天的吉凶，过一天，愁一天，感情就更深了。</p><p>好像更喜欢躲起来，为什么这么害怕长大呢。所谓仪式感，早已在心里积灰，好像再也提不起什么乱七八糟的热情了。想默默的做点事，看看书，安安静静的，成为别人的焦点就感觉浑身不自然，whatever，这好像就是当下的我。</p><p>朋友送来了蛋糕，好像连谢谢都没讲，肆意挥霍朋友的感情，巨婴。蜡烛是24，天呐，24岁…不太想接受这个现实。</p><p>还是很感谢很感谢我的这些朋友们，是朋友们让我触摸、感受到自己的存在 ，感谢每一份祝福，感谢每一份礼物！</p><p>好好长大。</p><p><img src="/2021/03/14/Weekly-Report-2/2.jpeg" alt="2"></p><p><img src="/2021/03/14/Weekly-Report-2/3.jpeg" alt="3"></p><blockquote><p>做一些事，会在输入端和处理段认真投入，输出端会将其抑制的很寻常，是什么奇怪的性格，可能想尽力而为，为大家默默做点事情吧，挺好。</p></blockquote><h3 id="毕业ing"><a href="#毕业ing" class="headerlink" title="毕业ing"></a>毕业ing</h3><p>又是一个沉重的话题，迷迷糊糊，日子就这么过去了。没有好好告别的老朋友，或许再也没有这个机会了，有些事情确实有个时间限定在那里，在那个节点去做，赋予它最大的意义，if not，就像气球一样飘走了；还没有好好了解认识的新朋友，也要挥挥手说再会，然后默默消失。再会这个词也很奇怪，像是悬空的，一松手，就跑了，手里仿佛又有那么一根线，幻想着可以把它拉回来，幻想。不怎么喜欢这个词，再会（何时），战略性忽略何时；还是拜拜来的欢快活泼，能很好掩盖马上要溢出来的悲伤。</p><p>图书馆借书回去散步的路上，看到这个再会，顿时动容，想要挣扎着，拖延这散场的结局。</p><p><img src="/2021/03/14/Weekly-Report-2/4.jpeg" alt="4"></p><p>每每回想这几年，依旧会为自己没抓住或者抓不住的友谊而悲伤难过，谈到友谊都轻描淡写说只是过客，但这玩意可就真的那么那么悲伤。绕着操场聊了几圈，成了挚友，我在那个地点和阶段最值得依托和信任的朋友，意外住院，时不时大老远跑来探望照顾，毕业后，联络渐少，也不知何时能再会；权衡之下，准备休学回家，一句话让我放心，二话不说帮我跑了好几趟，办完了休学手续，离别前送了他很喜欢的派克笔给我，此后，很难再真切的感受到这份友谊了吧；不会多说一句废话、也从不流露一丝多余的感情的朋友，会和我开玩笑，也会嫌我烦，很欣赏他，也从他身上学习、改变了很多，毕业了，把他心爱的坐垫”传承”给了我；可可爱爱且带着深度，每次聊天又有种欲言又止的味道，彼此好像都不太喜欢表达感情和讲话，要和新朋友再会了，也总有点不知所措，小朋友哈哈…好多好多细节，有趣，喜爱又感谢每一个愿意和我成为朋友的你们。</p><p>写这段话的时候，情绪过于激动，还好很晚了，工位附近没人看到我。记录时脑海中浮现的琐碎片段，远胜于记录本身。记录这个行为作为载体，过程中激荡出情感、思想上的涟漪。本文的文字水平不佳，很难将实感细腻表现出来，当是种下的种子吧。文字是很神奇的，不管怎样，还是会坚持记录下去，关注于记录本身，记录当下最真切的情感，或许回看的时候会觉得可笑幼稚，哈哈，有趣且值得，活的稍微立体一下下。</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p><strong>Any choice makes consequences.</strong></p><p>企图与能力之间的错配。直白点：眼高手低。</p><p>问题根源：想的多，做得少。缺乏自我认知，分析和复盘的能力。</p><p>解决：404。【埋坑】</p><hr><h2 id="周记录-3-15-3-21"><a href="#周记录-3-15-3-21" class="headerlink" title="周记录 (3.15 - 3.21)"></a>周记录 (3.15 - 3.21)</h2><p><img src="/2021/03/14/Weekly-Report-2/6.jpeg" alt="1"></p><h2 id="Books-1"><a href="#Books-1" class="headerlink" title="Books"></a>Books</h2><p><a href="https://www.goodreads.com/book/show/34466963-why-we-sleep"><strong>《我们为什么睡觉》</strong></a></p><p>睡眠相关的前沿著作中文版也是终于上架了。甚至觉得本书内容的重要性应该成为大众通识教育的一部分。</p><p>不知道从什么时候起，睡眠这件事被现代人远远的抛在脑后，不乏有人觉得睡眠不仅浪费时间，还多余。这个占据人类三分之一时间的活动，如果陷入长时间睡眠不足，对于生物各方面的损害是毁灭性的，我们身体没有一部分不是通过睡眠来恢复的。十分建议阅读的本书。作者是一位睡眠科学家，给出的观点基本都是通过严谨实验论证得出，也不是一本苦口婆心劝你睡觉的书籍。通过例举专业性极高的客观事实让你去重视睡眠。想起去年看的薄士宁医学通史中提到<strong>“代偿”</strong>这个概念，很多时候我们会觉得睡眠不足并不足以影响我们生活，身体通过代偿系统支撑着你，我们能够承受的拉力是有限的，总有一天橡皮筋会断掉。我们的夜间睡眠是一些列精致复杂、代谢活跃、精密安排的独特阶段。大脑中许多功能都是依赖睡眠来恢复的，并不是单靠其中一种形式的睡眠就能完成。睡眠对于记忆、学习以及创造力都有非常重要的作用。而睡眠不足或者失常，容易导致情绪反常、总处于疲惫的状态而且健忘，阿尔兹海默症、癌症、心血管疾病和心脏病都与睡眠不足有很大的关联，甚至生殖系统…</p><p>年度Horrorable书籍，对自己负责，好好睡觉。</p><p>书本部分摘录放在豆瓣：<a href="https://book.douban.com/review/13337714/">睡眠这件事</a> 。</p><p>但是书本避开了一个同样尖锐的话题：如果睡眠过长会什么影响（Oversleep）？对于睡眠过长导致的健康问题也早已有所研究，过长的睡眠也会导致一些问题。综上，睡眠很重要，但因人而异，根据个人的经验去调整。</p><p><strong>两个Source：</strong></p><p>Bill Gates特地写了Blog评价此书：<a href="https://www.gatesnotes.com/Books/Why-We-Sleep">Gates Notes: This book put me to sleep</a>。</p><p>The Guardian：<a href="https://www.theguardian.com/lifeandstyle/2017/sep/24/why-lack-of-sleep-health-worst-enemy-matthew-walker-why-we-sleep">‘Sleep should be prescribed’: what those late nights out could be costing you</a>。</p><h2 id="Explore-1"><a href="#Explore-1" class="headerlink" title="Explore"></a>Explore</h2><p><code>monopoly warning monopoly not to monopolize.</code></p><p><strong>关注一场博弈：</strong></p><blockquote><p>A cat-and-mouse game has begun between Apple and Chinese tech companies, as the iPhone maker tries to enforce its new privacy policies in China.</p></blockquote><p><a href="https://www.ft.com/content/520ccdae-202f-45f9-a516-5cbe08361c34">China’s tech giants test way around Apple’s new privacy rules</a> </p><p>针对 iOS 的隐私限制政策，腾讯与字节跳动正测试新的用户追踪方法，以对抗苹果即将发布的防追踪机制。</p><p><a href="https://www.ft.com/content/99a3f7c1-54d9-47fe-9bcb-fd72fcd94076">Apple warns Chinese apps not to dodge its new privacy rules</a></p><p>Chinese apps想要在未得到用户允许的情况下获取用户的位置信息，对此Apple 警告不要试图绕过隐私政策，否则相关产品会遭到下架。</p><blockquote><p>“The real question is whether they will choose to broadly or narrowly enforce these policies within the context of a foreign government’s whims and desires — and how Apple will choose to respond to such challenges from other nations moving forward.”</p></blockquote><p>文中提到了一个名叫CAID的技术，是由中国广告协会主导，通过收集和存储用户的：“设备启动时间、国家、语言、设备名称、系统斑斑、物理内存、硬盘等个人信息“旨在为消费者提供”个性化服务“，这些数据点组成在一起，即形成了一个几乎唯一的“fingerprint”。当iPhone用户安装使用系统的应用时，系统会收集这些数据，将其发送到中央服务器，创建一个CAID来识别用户。如果用户随后点击了另一个应用的广告，并下载了该应用，该应用也会以同样的方式生成一个CAID。如果两个CAID匹配，那么第一个应用就可以向第二个应用证明其广告有效，证明花在广告上的钱是值得的。CAA表示，用户将能够选择退出CAID，以避免被追踪，但苹果的新规则不允许对应用追踪透明度（App TrackingTransparency）有例外，它的框架适用于任何想要收集用户数据的开发者。</p><p><u>PS：Apple确实让我们看到了科技与众不同的发展道路，对隐私保护的执着像是时代一股强大的逆流。当然Apple对此的限制是否想发展自己的Advertising platform看事件后续发展。很有趣的一个spot。</u></p><p><code>blog</code></p><p>Steve Yegge：吐槽王Yegge的blog。</p><p>非常有分量的两篇blog：</p><p><a href="http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Stevey’s Blog Rants</a></p><p><a href="https://steve-yegge.medium.com/why-i-left-google-to-join-grab-86dfffc0be84">Why i left google to join grab</a></p><p><a href="https://www.youtube.com/watch?v=KTJs-0EInW8">Stanford Seminar - Google‘s Steve Yegge on GROK</a></p><h2 id="Article-1"><a href="#Article-1" class="headerlink" title="Article"></a>Article</h2><p>Nature 3月21日发布的一项研究：<a href="https://www.nature.com/articles/s41586-021-03344-2">Shifting attention to accuracy can reduce misinformation online</a>。很有趣，是什么导致社交媒体上那些充满误导甚至假消息的传播，背后的动机是因为分心和注意力不集中。研究人员通过多项实验发现，党派立场能解释 16% 的假消息分享——即很多人明知道是假消息但仍然会分享，因为这能表明其立场获得同道者的点赞；无法识别消息是否真假占不到三分之一；其余的主要因素是分心。  —- Source from <a href="https://www.solidot.org/">solidot</a></p><p>iPhone丢失后如何正确追回：<a href="https://m.weibo.cn/status/4616458224800312">iPhone丢失追回实例</a> ，实用性非常高，以防万一。</p><hr><p>&lt;完&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Weekly-Report-Mar&quot;&gt;&lt;a href=&quot;#Weekly-Report-Mar&quot; class=&quot;headerlink&quot; title=&quot;Weekly Report [Mar]&quot;&gt;&lt;/a&gt;Weekly Report [Mar]&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2021/03/14/Weekly-Report-2/1.jpeg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;周记录-3-8-3-14&quot;&gt;&lt;a href=&quot;#周记录-3-8-3-14&quot; class=&quot;headerlink&quot; title=&quot;周记录 (3.8 - 3.14)&quot;&gt;&lt;/a&gt;周记录 (3.8 - 3.14)&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://superming.life/categories/Life/"/>
    
    
      <category term="Weekly-Report" scheme="https://superming.life/tags/Weekly-Report/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Report 1</title>
    <link href="https://superming.life/2021/01/31/Weekly-Report-1/"/>
    <id>https://superming.life/2021/01/31/Weekly-Report-1/</id>
    <published>2021-01-31T14:00:00.000Z</published>
    <updated>2021-03-15T06:15:31.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Weekly-Report-Jan"><a href="#Weekly-Report-Jan" class="headerlink" title="Weekly Report [Jan]"></a>Weekly Report [Jan]</h1><h1 id="周记录-（1-11-1-17）"><a href="#周记录-（1-11-1-17）" class="headerlink" title="周记录 （1.11 - 1.17）"></a>周记录 （1.11 - 1.17）</h1><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><p>《<a href="https://book.douban.com/subject/27056409/">深度工作 如何有效使用每一点脑力</a>》by <a href="https://www.calnewport.com/">Cal NewPort</a>。Goodreads：4.2 / 5。作者是MIT的计算机科学博士及乔治城大学计算机科学副教授。</p><p>书本的重点论证了深度工作（deep work）在当前知识社会背景下的重要性，深度工作的能力甚至是当前信息社会中一个人的核心竞争力。<u>书本分为理论和准则两部分，前半部分论证深度工作的价值和意义，后部分向读者介绍深度工作的准则和方法。</u>作者论证比较严谨，深度上有所欠缺，或许少了点说服力，像是一本深度工作的入门说明书。换个角度来看，深度工作的能力是需要长年累月，并通过不断训练调整才能达到的高度，而真正的深度工作者并不需要这样一本书，受众更多是想要进行深度工作并对生活进行改变的人群，有以上想法的朋友可参阅。书中一些建议有借鉴意义，比如远离社交媒体这一准则，我也用相对更适合自己的方式调整了自己社交媒体使用限制等，得到了很好的正反馈。</p><a id="more"></a><p><strong>阅读过程中的部分笔记</strong>：</p><p>关于深度工作和浮浅工作的概念：</p><p><strong>深度工作</strong>：在无干扰的状态下专注进行职业活动，使个人的认知能力达到极限。这种努力能够创造价值，提升技能，而且难以复制。</p><p><strong>浮浅工作</strong>：对认知要求不高的事务性任务，往往在受到干扰的情况下开展。此类工作通常不会为世界创造太多新价值，且容易复制。</p><p>当代知识工作者的主要问题在于：他们并非游手好闲，甚至异常忙碌。根据麦肯锡的调查发现：知识工作者60%时间使用电子沟通和网络搜索。</p><p>Notes：所以假设一天工作时间为8小时，除去这些支离破碎的状态，只剩下3.2小时给你完成自己的工作或进入深度工作的状态。<strong>不得不让人思考网络工具的出现是否真正提升了知识工作者的工作效率？</strong>  而学习本身是一项需要高度专注并高效产出的一项活动，而当前多数工作也是需要不断学习精进的。所以如何高效学习、深度工作其实在每个人、甚至社会经济价值上扮演者很重要的角色。</p><p>刻意练习的核心要素通常如下：</p><ol><li>你的注意力全情投入到某个你希望提升的技能或想要掌握的理念上。</li><li>你能得到反馈意见，这样你就可以调整自己的方法，保持注意力的投入有最佳产出。</li></ol><p>高质量的工作 = 专注度 X 时间</p><p>Notes：很多人会忽视一个重要的事实：每个人的注意力、意志力是有限的，并且会在使用过程中不断被消耗，像肌肉一般会疲劳。设想一个环境：你在一个某天的下午胡乱浏览各种社交APP、流连各种短视频，此时你意识到自己荒废了大量时间，才想要开始学习，而学习是一项需要高认知高专注的任务，需要抽取你大量的注意力和意志力才能将工作继续下去，所以往往在这种状态下进行学习会有很大的失败率，不出意外你会安慰自己：明天在学吧… 往往当大脑习惯了随时分心，在你想要专注的时候，很难摆脱这种习惯。</p><p>最小阻力原则（The Priniciple of Least Resistance）：在工作环境下，若各种行为对于底线的影响没有得到明确的反馈意见，我们倾向于采用当下最简单易行的行为。</p><p>任何益处法：一旦发现使用一款网络工具有任何益处，或者不使用就可能错过某些事，你就觉得有足够理由使用这款网络工具。</p><p>Notes：以上是作者用来解释大家为什么会对社交媒体青睐的原因。互联网工具的出现和高速发展导致了技术垄断（Technoploy）的出现。社交媒体带来的那一点益处，会让人忽略其背后强大的致隐性。不作展开，引用尼尔波兹曼在20世纪90年代的文章：“我们不再权衡新科技的利弊，不再平衡新增效率和新引入问题之间的关系，我们开始自认为的认定，只要是高科技就是好的，不用再做探讨。”</p><p>…</p><p><strong>相关阅读：</strong></p><p>万维钢 《高手》</p><p>James Clear《原子习惯》</p><h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>关于如何保持高效这个问题也曾长时间困扰自己，甚至可以说整个大学期间一直在寻找适合自己的学习方法，也渐渐的从长时间低效甚至无效学习转移到现在相对高效并更令自己满意的状态，也希望自己能够不断调整优化。借这个机会简单梳理几点对自己的效率有很大提升的改进或习惯。</p><ul><li><strong>与互联网保持一点点的距离</strong></li></ul><p>与互联网保持一定的距离。这个习惯耗费了大量的精力和意志力去克服，but收益巨大。</p><p>试着问自己为什么要使用它，如果不去使用它会产生什么影响…当然不要忽略消遣的需求。</p><p>为什么需要这个那个社交媒体？带来了什么？</p><p>习惯于用工具思维来理解东西。将某一新科技或新事物定义为你完成特定任务的工具，在需要的时候去使用它。如果没有明确目的去使用它，它就是一个无限汲取你时间精力的黑洞。</p><p>举例：</p><p>为什么要使用微博【Twitter】？</p><ul><li>能够关注到一些朋友的动向。保持浅层联系。【微信朋友圈同】</li><li>我喜欢的作家、优秀工程师一般会通过在微博上发表一些比较深度的想法，部分想法促进我个人思考，对个人成长价值。【但总体上有价值的信息密度不高】</li></ul><p>以上是我使用微博的原因。是我用来与朋友保持浅层关系【浅层关系，也绝非社交重心】和关注行业（兴趣）动向的一个工具，但也不是我获取信息的主要途径，所以我对微博的使用率一直很低。</p><p>为什么使用微信？</p><p>微信底层基础是即时通讯。将人与人连接了起来，依靠社交和超强用户粘性发展到至今的all-in-one平台。即时通信让人们的沟通变得更快速。人与人之间的沟通快了，但也降低了人们闲聊的成本，多数沟通也并未因此变得高效……而作为学生，并没有那么重要的消息需要我停止当前的工作状态去立即回复，即时通讯对我并没有那么重要，仅仅作为一个能够保持联系的渠道而已。</p><ul><li>通讯渠道。</li><li>部分信息渠道。【公众号关注的一些高质量的信息】</li></ul><p>可能大家会认为人难免避免社交啊balabala的，社交与每个人的意义都不一样。于我 社交对象就那么几个，在上面花费的时间也不多，并不喜欢微信的产品设计与更全能的定位。权衡后将通讯平台迁移到Apple自带的iMessage上，纯粹的聊天工具，用完即走能够避免很大的干扰，而且很多信息没有你想象中的那么重要。因此我退出了大量无用微信群，信息价值太低，剩下的群免打扰，专注的时候被打断真的很烦人，在晚上进行公众号信息筛选，将感觉有兴趣和有价值的信息保存到Pocket软件【稍后读】，然后抽一块时间阅读筛选收集出来的文章。</p><p>用工具思维去定义了我的手机以及我手机上的各种应用。一般只有在想到要做什么事情的时候，才会用手机上对应的功能去完成这件事。所以手机使用每周一般会维持在一个相对较低的时长，省下了大把漫无目的冲浪的时间去专注于更重要的事情。</p><p>总的来说，互联网带来的益处是不可否认的，或许一些网络工具可以不错过某些热点、大事，除此之外，一些工具所带有的致瘾性却往往会被大家所忽略。权衡利弊之后在去使用这些工具，生活会好很多吧。</p><p><strong>“和这个普遍联系的世界有一点点失联。”</strong></p><ul><li><strong>Habits Tracker</strong></li></ul><p>以前在电子笔记本上进行习惯记录，时不时就忘了。上周制作了Habit Tracker的习惯记录表格，夹线圈笔记本中发现意外的好用，满意度大大的上升。每个月都</p><p>以下为模版：</p><p><img src="/2021/01/31/Weekly-Report-1/Screen_Shot_2021-01-19_at_11.32.10_AM.png" alt="Weekly-Report-01/Screen_Shot_2021-01-19_at_11.32.10_AM.png"></p><p>下载链接：</p><p>Google Drive:</p><p><a href="https://drive.google.com/drive/folders/1zxSFZv1Dt1g9_-fO37JxI1vPoM5OANVE?usp=sharing">Habits Tracker - Google Drive</a></p><p>Baidu :</p><p>链接: <a href="https://pan.baidu.com/s/1thTcU1wZgacEAs4E38qRCg">https://pan.baidu.com/s/1thTcU1wZgacEAs4E38qRCg</a> 密码: e4vr</p><h2 id="Explore"><a href="#Explore" class="headerlink" title="Explore"></a>Explore</h2><p><a href="https://teachyourselfcs.com/">Teach Yourself Computer Science</a></p><p>如果想学习Computer Science，而网上有太多的信息与资源，如何取其精华，去其糟粕，这便是文章的重点：</p><ul><li>该学习哪些科目？为什么？</li><li><p>对于这些科目，目前为止最好的资源是什么？</p><p>  <img src="/2021/01/31/Weekly-Report-1/Screen_Shot_2021-01-18_at_3.57.37_PM.png" alt="Weekly-Report-01/Screen_Shot_2021-01-18_at_3.57.37_PM.png"></p></li></ul><p><strong>一篇关于如何充分利用你所阅读内容的文章：<a href="https://fs.blog/reading/">Reading Better</a>【有时间翻译一下】</strong></p><ul><li>“Just as life is too short for bad wine, life is too short for bad books.”</li><li><p>Levels of Reading</p><p>  <img src="/2021/01/31/Weekly-Report-1/Screen_Shot_2021-01-18_at_3.40.57_PM.png" alt="Weekly-Report-01/Screen_Shot_2021-01-18_at_3.40.57_PM.png"></p></li><li><p>It’s not how fast you read but what you absorb that matters.</p></li></ul><p><strong>高德纳的Homepage</strong>： <a href="https://www-cs-faculty.stanford.edu/~knuth/">Don Knuth’s Home Page</a></p><p>近期关注的点：</p><ul><li>消费主义<ul><li>特别关注的两个品牌：AllBirds和Patagonia。【消费也可以是一种选择】</li></ul></li><li>信息获取渠道的选择</li><li>克拉克硬科幻系列</li></ul><h1 id="周记录（1-18-1-31）"><a href="#周记录（1-18-1-31）" class="headerlink" title="周记录（1.18 - 1.31）"></a>周记录（1.18 - 1.31）</h1><h2 id="Books-1"><a href="#Books-1" class="headerlink" title="Books"></a>Books</h2><p><strong><a href="https://book.douban.com/subject/27169700/">万维钢《高手》</a></strong></p><p>相信老师本身还是有实力的，广度足够，缺少预期的深度，论证较浅，部分观点很有启发性。Part 7 物理学相关内容看的津津有味。 “擅长让高端的道理落地，激起读者的思考” 万老师自诩。 按照以上定位，书本内容是合格的。每一个话题背后的工作远比书中记录下来的复杂很多，大量的相关内容引用，或许是受限于专栏篇幅所做的妥协。后续会参照其他作品。</p><p><strong><a href="https://book.douban.com/subject/26287433/">曹德旺《心若菩提》</a></strong></p><p>曹德旺，福耀集团创始人兼董事长。目前世界第一大汽车玻璃制造商。</p><p>今年看了两本企业相关书籍，一本是记录小米的《一往无前》，一本就曹德旺的《心若菩提》。前者从互联网行业的红海中杀出一条血路，一步步影响国内制造业并将中国产品带向全球；后者则兢兢业业，在玻璃行业 耕耘至今，成长为全球玻璃产业的巨无霸。两本书都非常值得阅读。雷军和曹德旺，两位让人肃然起敬的企业家，他们所做之事完全超越了个人，为了社会、国家、甚至全人类。</p><p>书本封皮异常朴实，内容分为六篇，记载了曹总的成长环境，处世哲学，人生足够精彩。</p><blockquote><p>“信是一种信念，也是一种信任，不仅对自己要有自信，对他人也要有信任，这叫互信。如果一个人什么都不信，那肯定会一事无成。”</p><p>“模具的事，让我认识到，人，不一定要多伟大，才值得学习。也许，从我们身边走过的随便一个人，他们的身上就有值得我们学习的地方，只是我们不知道罢了。”</p><p>“思前想后，最后决定：往前走，但永远不改变行走策略 — 听党的话，严格按政府政策规定办事；按章纳税；尊重所有官员，但保持一定距离；一起吃饭可以，但仅限于吃饭，绝不涉及财务往来；如有盈利分红，除用于家庭和自身生活费用之外，皆用于社会捐赠。”</p><p>“古人说穷炫耀，就是说没有钱的人才爱炫耀，为什么？缺乏素质，虚荣心使然。不珍惜粮食，乱扔馒头蒂包子皮行为十分不雅，这不能证明你家富有。恰恰相反，从这里可能暴露出你家的贫穷与你内心的自卑。”</p><p>“人的时间、精力、经验都是有限的；如何把有限的时间、资金、精力和经验发挥出最大的效率，就得像小朋友手中的镜子，将发散的太阳聚集威力无比的光束一样，集中精力、集中资金、集中时间，如拳头一般，专打一点。这就是专业化。”</p><p>“每个人的一生可能多半时间都在打杂，有机会了你才会做一些重要的事。但前面这十几二十年的杂事，你是一定要做的，不打杂人家怎么会了解你呢？”</p></blockquote><p>像曹总、雷总等人物，作为普通人群是很难真正去接触、去了解的。这些书本给我们提供了一个很好的平台去认识和了解他们和他们的事业，学习那些值得个人借鉴的内容和经验。总会看到一些“刁钻“的读者抓住一些无足轻重的漏洞去批评，书本是人撰写的，难免会有美化权衡之处，若总是拿这些东西去指指点点，不是舍本逐末吗？</p><p>与智者同行，与高人为伍。书籍提供了一个很好的途经。</p><h2 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h2><p><strong>主题：<code>城市于人</code></strong></p><p>@PaulGraham：<a href="http://www.paulgraham.com/cities.html">City and Ambitions</a></p><p>关于城市和野心的一篇文章，很有意思。<strong>很多年轻人困惑于大学毕业后去哪座城市发展这个问题，这篇文章是一个很好的参考。</strong>每座城市都有自己的特色，并塑造着城市里的人。</p><p>想尝试自己翻译，但过程中发现一篇翻译的很棒的文章：<strong><a href="https://zhuanlan.zhihu.com/p/20082290">市井雄心</a></strong>。</p><p>ps：Paul Graham的Blog是一块大宝藏，有种想系统的去学习和整理的冲动。</p><p><strong>主题：<code>内卷</code></strong></p><p>内卷的英文为<strong>involution</strong>，和其他一些概念接近，比如我们所说的：高水平陷阱，瓦房店化等。<u>简言之，内卷化就是在土地资源不变、技术条件不变的情况下，通过简单粗暴的扩大劳动力投入，来提高农业单产和总产量的过程。这是一个边际效应递减的过程——同一块土地，投入2倍的劳动力，很可能只会产出1.5倍的粮食甚至倒退。同时这又是一个遏制创新的过程——人们专注于压榨家庭内部的劳动力和劳动时间，不再积极寻求技术革新和生产关系革新，永远在低层次自我重复。文中老师解释的大概也是这个意思。</u></p><p><strong>@项飙</strong> ： <a href="https://www.thepaper.cn/newsDetail_forward_9648585">专访｜人类学家项飙谈内卷：一种不允许失败和退出的竞争</a></p><p>是一篇值得去深度阅读思考的一篇文章。项飙从人类学的角度去探讨内卷化。</p><p>在人类学里面，内卷是解释为什么这个社会运行没有出现一个大的突破，没有从一个量的积累变成一个质的突破，特别没有从一个农耕社会转化为一个资本主义经济。这跟我们今天讲的内卷是相反的。<strong>现在大家讲的内卷是指竞争的白热化。</strong> 【含义发生了很大变化】</p><p>如果说原来内卷指的是一个重复的，没有竞争的，不能摆脱农耕社会这么一个结构性格局，<strong>今天的内卷是一个陀螺式的死循环</strong>，我们要不断抽打自己，让自己就这么空转，每天不断地自己动员自己。所以它是一个高度动态的陷阱，所以非常耗能。在小农社会里面，它体力上很累，但是不会有这种在精神上的这种折磨的。</p><p>内卷背后，可能指的是高度一体化的市场竞争成为生活导向，成为社会的基本组织方式和生活和资源分配方式。</p><p>概括：<strong>我们当下高度一体化的竞争，成为了所有人的生活导向，也就是不分化，目标高度单一，价值评价体系高度单一，竞争方式也是高度单一。而且我们的竞争不允许失败和退出。</strong></p><blockquote><p>全国人民朝着一个目标去，要多赚钱，买一百多平的房子，要买车，一定要成家等等。这个线规划的非常好的，大家高度一体化，都要在这样一个市场里面争夺一样东西。</p></blockquote><p>项飙的文章结合<strong>@刘瑜</strong>近期的演讲：<a href="https://www.bilibili.com/video/BV1xA411j7z2?spm_id_from=333.788.b_636f6d6d656e74.7">不确定的时代，教育的价值</a> ，其中的观点对当下内卷焦虑的现象可以提供另一种思考的角度。刘瑜指出当下的教育不再是鼓励年轻人发现自我，更多的是逃避自我，在一种充满竞争的环境中长大，不断寻找所谓随波逐流的安全感，虽习得十八般武艺，但最后没有自己的价值观，找不到自己的热情所在。这个社会充满鸡汤成功学，却没有一套失败观。接受自己是一个普通人，不应该教一株小草如何成为大树，而是成为一颗快乐、幸福的小草。非常赞同老师的一句话：<strong>人生的目的并不是越高、越快、越多就是最好的，而是找到适合自己的位置。</strong></p><blockquote><p>当一个社会的教育系统鼓励每个人寻找自己的独特性、亮点的时候，这个社会是充满创造力的。当一个社会孩子们忙的根本没有时间探索自我，并且在同一个标准面前，踩踏式竞争的时候，社会的创造力是萎缩的。</p></blockquote><p>个人而言，是从时代的传送带上走来，家长、老师给你设置各种的路标，再想下车很难很难，何况这更是从意识层面的烙印。</p><p>但我们还是可以让更多人意识到这种单一的评价标准不应该是一个社会的良性循环，我们是有选择的，像小学作文标题一样：走自己的路，让别人说去。而不是走别人的路，让自己抑郁。如果看到有人跳出赛道，也不要评头十足去论断别人的生活，给各自一点空间，选择在自己手上，人生各自精彩。</p><h2 id="Thoughts-1"><a href="#Thoughts-1" class="headerlink" title="Thoughts"></a>Thoughts</h2><blockquote><p><strong>Social media used to be an escape from the real world now the real world is an escape from social media.</strong></p></blockquote><p><strong>推荐算法</strong>背后的问题？</p><p>推荐算法背后是机器学习。从大量用于的浏览习惯中寻找规律，用这个规律给用户提供感兴趣的内容。时代的进步，但背后有一个很大的问题，浏览习惯很大程度上是用户的私密行为，私密行为往往会暴露人性中那些阴暗面，比如在浏览过程中会对充满噱头、暴力、血腥等内容感兴趣。而推荐算法也会从这些行为中学习并优化相关推荐模型，所以推荐算法推荐的往往也是那样的内容。在这样的推荐算法规则下，争议的内容越是会被大量推荐，又会引发大量的争议，相关内容的巨大流量又变相刺激争议性内容创作者，进而导致整体平台环境的恶化。甚至相关平台为了争夺流量会偏爱一些争议性内容，很多朋友应该也深有体会。【随便一个热榜进去动不动就是两群人在干架】“If you aren’t paying for a service then you are the product “ 爱德华斯诺登在永久记录中讲过，个人非常赞同这句话，<strong>如果你没有为一项服务付费，那么你就是产品</strong>。应用在当前混乱的网络环境下，有价值的信息越来越难获取到，各种充满对立、娱乐至上的话题长期占据热榜，时不时弹出的广告页面…如果把环境比喻成一个生态，微博、Twitter这些掌握算法技术的公司是一个巨大的多巴胺工厂，长时间吸引你的注意力，从而精确掌握你的喜好，更好的为其赚取商业利益。整个过程又潜移默化的Reprograming你的行为、思考和喜好，该过程又回导致很多问题，世风日下。真是一个细思恐极又无法逃避的问题。</p><p>在想这个问题的过程中，权衡了很多，最后还是决定降低使用这些平台的频率甚至delete，定位工具，但保持距离。</p><p>Youtube团队很早就发布的一篇推荐算法论文：<a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45530.pdf">Deep Neural Networks for YouTube Recommendations</a></p><p>可参考影片：<a href="https://movie.douban.com/subject/34960008/">The Social Dilemma</a></p><h2 id="Explore-1"><a href="#Explore-1" class="headerlink" title="Explore"></a>Explore</h2><p>【CS】 <a href="https://missing.csail.mit.edu/">The Missing Semester of Your CS Education</a></p><blockquote><p>Classes teach you all about advanced topics within CS, from operating systems to machine learning, but there’s one critical subject that’s rarely covered, and is instead left to students to figure out on their own: proficiency with their tools. We’ll teach you how to master the command-line, use a powerful text editor, use fancy features of version control systems, and much more!</p></blockquote><p>【CS】Youtube Video：<a href="https://www.youtube.com/watch?v=B31LgI4Y4DQ">Data Structures - Full Course Using C and C++</a>  咖喱味的英语，十个小时深入Data Structures。</p><hr><p><strong>完</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Weekly-Report-Jan&quot;&gt;&lt;a href=&quot;#Weekly-Report-Jan&quot; class=&quot;headerlink&quot; title=&quot;Weekly Report [Jan]&quot;&gt;&lt;/a&gt;Weekly Report [Jan]&lt;/h1&gt;&lt;h1 id=&quot;周记录-（1-11-1-17）&quot;&gt;&lt;a href=&quot;#周记录-（1-11-1-17）&quot; class=&quot;headerlink&quot; title=&quot;周记录 （1.11 - 1.17）&quot;&gt;&lt;/a&gt;周记录 （1.11 - 1.17）&lt;/h1&gt;&lt;h2 id=&quot;Books&quot;&gt;&lt;a href=&quot;#Books&quot; class=&quot;headerlink&quot; title=&quot;Books&quot;&gt;&lt;/a&gt;Books&lt;/h2&gt;&lt;p&gt;《&lt;a href=&quot;https://book.douban.com/subject/27056409/&quot;&gt;深度工作 如何有效使用每一点脑力&lt;/a&gt;》by &lt;a href=&quot;https://www.calnewport.com/&quot;&gt;Cal NewPort&lt;/a&gt;。Goodreads：4.2 / 5。作者是MIT的计算机科学博士及乔治城大学计算机科学副教授。&lt;/p&gt;
&lt;p&gt;书本的重点论证了深度工作（deep work）在当前知识社会背景下的重要性，深度工作的能力甚至是当前信息社会中一个人的核心竞争力。&lt;u&gt;书本分为理论和准则两部分，前半部分论证深度工作的价值和意义，后部分向读者介绍深度工作的准则和方法。&lt;/u&gt;作者论证比较严谨，深度上有所欠缺，或许少了点说服力，像是一本深度工作的入门说明书。换个角度来看，深度工作的能力是需要长年累月，并通过不断训练调整才能达到的高度，而真正的深度工作者并不需要这样一本书，受众更多是想要进行深度工作并对生活进行改变的人群，有以上想法的朋友可参阅。书中一些建议有借鉴意义，比如远离社交媒体这一准则，我也用相对更适合自己的方式调整了自己社交媒体使用限制等，得到了很好的正反馈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://superming.life/categories/Life/"/>
    
    
      <category term="Weekly-Report" scheme="https://superming.life/tags/Weekly-Report/"/>
    
  </entry>
  
  <entry>
    <title>Dive into SSD</title>
    <link href="https://superming.life/2021/01/28/SSD-Notes/"/>
    <id>https://superming.life/2021/01/28/SSD-Notes/</id>
    <published>2021-01-28T12:30:00.000Z</published>
    <updated>2021-05-22T08:06:48.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSD-论文学习笔记"><a href="#SSD-论文学习笔记" class="headerlink" title="SSD 论文学习笔记"></a>SSD 论文学习笔记</h1><blockquote><p>知乎：<a href="https://zhuanlan.zhihu.com/p/347860986">https://zhuanlan.zhihu.com/p/347860986</a></p></blockquote><h2 id="Single-Shot-MultiBox-Detector"><a href="#Single-Shot-MultiBox-Detector" class="headerlink" title="Single Shot MultiBox Detector"></a>Single Shot MultiBox Detector</h2><p><strong>Single Shot</strong>：表示物体的分类和定位在网络的一次前向传递的完成。【The tasks of object localization and classification are done in a <em>single forward pass</em> of the network.】</p><p><strong>MultiBox</strong>：可扩展、高质量的目标检测，<a href="https://arxiv.org/abs/1412.1441">论文地址</a>。可以理解为在多个feature map上进行多尺度（multi-scale）预测。</p><p><strong>Detector</strong>：网络是一个Object Detector。</p><p><img src="/2021/01/28/SSD-Notes/Untitled.png" alt="Fig.1 详细SSD模型1"></p><p>Fig.1 详细SSD模型1</p><a id="more"></a><h2 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h2><blockquote><p>The SSD approach is based on a feed-forward convolutional network that produces a fixed-size collection of bounding boxes and scores for the presence of object class<br>instances in those boxes, followed by a non-maximum suppression step to produce the final detections. The early network layers are based on a standard architecture used for high quality image classification (truncated before any classification layers), which we will call the base network2. </p></blockquote><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_8.19.22_AM.png" alt="Fig.2 SSD详细模型2"></p><p>Fig.2 SSD详细模型2</p><h3 id="Base-Network"><a href="#Base-Network" class="headerlink" title="Base Network"></a><strong>Base Network</strong></h3><p>VGG-16，舍弃了fc6和fc7两个全连接层，主要用于高质量的图片分类任务【High quality image classification  tasks】</p><p>原始的VGG、ResNet等主要用于处理分类任务，会采用fc层将最终的feature map映射到向量【对应分类物体】中，而目标检测不需要该分类任务，所以将fc层去掉。</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_9.00.06_AM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_9.00.06_AM.png"></p><p>Fig.3 VGG网络结构(input 244 x 244 x 3)</p><p>SSD在VGG16后添加6个辅助卷积层，这六层一共进行8732次预测。</p><p>参考论文给出的下图，可见使用Multi-scale feature maps对精度提升显著。</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_3.17.11_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_3.17.11_PM.png"></p><p>Fig.4 Multiple output layer at different resolutions is better.</p><p>对照实验，尽量控制Boxes的数量均衡。删除某一层后，会把该层的default box挂载到余下层并进行调整。</p><h3 id="Multi-scale-feature-map-for-detection"><a href="#Multi-scale-feature-map-for-detection" class="headerlink" title="Multi-scale feature map for detection."></a><strong>Multi-scale feature map for detection.</strong></h3><p>VGG中的Conv5_3以及后续添加的辅助层，用于用多种尺度进行特征提取【检测 + 分类】。最终进行预测的是这些层中选出的特定层。每个层对应不同的scale和不同的aspect ratios的bounding box进行预测。【后文会详细介绍】</p><h3 id="Convolutional-predictors-for-detection"><a href="#Convolutional-predictors-for-detection" class="headerlink" title="Convolutional predictors for detection."></a><strong>Convolutional predictors for detection.</strong></h3><p>每一个添加的feature layer通过使用一系列卷积层【convolutional filters】生成一系列预测结果。假设一个feature layer层的尺寸为m x n x p 【p为channel】，那么卷积核为3 x 3 x p，即一个detector/classifier 的参数量，它输出对应类别的得分或相对default box的坐标偏移量。对于m x n中卷积核的每一个bouding box，都会生成一个预测值。</p><h3 id="Default-boxes-and-aspect-ratios"><a href="#Default-boxes-and-aspect-ratios" class="headerlink" title="Default boxes and aspect ratios."></a><strong>Default boxes and aspect ratios.</strong></h3><p>对于每个feature map cell，都会关联k个boxes【也作prior box】，对于每个box都要输出C个类别和4个坐标偏移量【相对于default box】。因此对于每个cell，会产生(C + 4)k个输出，feature map共有m x n个cell，共产生(C + 4)kmn个输出，因此feature map共产生8732个输出。</p><p><strong>Non-Maximum Suppression (NMS)</strong></p><p>通过非极大抑制来控制噪声，确保网络保留最有效的几个预测，丢弃噪声较大的预测。</p><h3 id="MultiBox-Priors-and-IoU"><a href="#MultiBox-Priors-and-IoU" class="headerlink" title="MultiBox Priors and IoU."></a><strong>MultiBox Priors and IoU.</strong></h3><p>In MultiBox, the researchers created what we call priors (or anchors in Faster-R-CNN terminology), which are pre-computed, fixed size bounding boxes that closely match the distribution of the original ground truth boxes.In fact those priors are selected in such a way that their Intersection over Union ratio (aka IoU, and sometimes referred to as Jaccard index) is greater than 0.5.</p><p><img src="/2021/01/28/SSD-Notes/Untitled%201.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Untitled%201.png"></p><p>Fig.5 IoU Explainatio</p><h2 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h2><p><img src="/2021/01/28/SSD-Notes/Untitled%202.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Untitled%202.png"></p><p>Fig.6 SSD训练流程</p><h3 id="Matching-strategy"><a href="#Matching-strategy" class="headerlink" title="Matching strategy."></a><strong>Matching strategy.</strong></h3><p>在训练过程中，需要确定默认框【default box】与真值框【Ground truth box】以及和训练网络的相关性。这些default box随着cell、aspect ratio和scale的不同而变化，我们通过将真值框与默认框之间的重合度定义一个值【IOU &gt; 0.5】，重合度高于IOU的样本便是正样本，参与后续的训练。这就是SSD的匹配策略，在YOLO，Faster R-CNN中都有使用。</p><h3 id="Training-objective"><a href="#Training-objective" class="headerlink" title="Training objective."></a><strong>Training objective.</strong></h3><p>SSD的Training objective 源于MultiBox objective ，但可以拓展到多个对象级别。</p><p>总的损失函数包含了localization loss（loc）和 confidence loss（conf），包含了定位和分类。</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_11.44.35_AM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_11.44.35_AM.png"></p><ul><li>N是匹配成功的正样本数量。N = 0， Loss = 0。</li><li>$\alpha$ 是定位损失和分类损失之间的比重，通过交叉验证设为1。</li><li>l表示bounding box 与 default box之间的变换关系，g代表ground truth box和default box之间的变换关系。</li><li>$x^p_{ij}=\left{0,1\right}$ 即x 参数，表示第i个default box与种类p的第j个ground truth box是否匹配，匹配则为1，否则为0。</li></ul><p><strong>和Faster R-CNN类似，定位损失使用Smooth L1 loss</strong></p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_11.56.16_AM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_11.56.16_AM.png"></p><p><strong>分类损失：Softmax loss</strong></p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_11.57.06_AM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_11.57.06_AM.png"></p><p><em>由公式可见，分类损失包含正负样本，而定位损失只包含正样本。因为对定位来说，需要回归出准确的变换关系，在预测的时候是不需要区分正负样本的。而分类是需要区分出正负样本的。</em></p><p>深入理解：</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_2.51.50_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_2.51.50_PM.png"></p><p>对于每一个Prior box，尽可能希望它能够回归到Ground Truth中，该过程需要损失层帮助我们计算真实值和预测值之间的走向，从而引导后续学习。</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_2.55.59_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_2.55.59_PM.png"></p><p>如上图，只要$l<em>{*}$与$g</em>{<em>}$接近，那么prediction box和ground truth就接近。$g_{</em>}$在训练时产生，$l_{*}$在interface时产生。</p><p><strong>Detector/Classifier对一个bounding box的回归的举例：</strong></p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_4.11.34_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_4.11.34_PM.png"></p><p><em>红色虚线框为未回归前的bounding box，实线框为回归后的bounding box。</em></p><p>而所有回归后的bounding box是一个很杂乱的场景，需要通过NMS筛选出部分高可用的数据，如下图：</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_4.13.45_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_4.13.45_PM.png"></p><p>每一个detector/class 输出部分可靠数据，所有feature map的detector/classes 的输出再次进行NMS后即最终的输出结果。【对应Fig.1】</p><h2 id="Choosing-scales-and-aspect-ratios-for-default-boxes"><a href="#Choosing-scales-and-aspect-ratios-for-default-boxes" class="headerlink" title="Choosing scales and aspect ratios for default boxes"></a>Choosing scales and aspect ratios for default boxes</h2><blockquote><p>We design the tiling of default boxes so that specific feature maps learn to be responsive to particular scales of the objects.</p></blockquote><p>此处的重点是default boxes生成规则。</p><p>与Region proposals类似，default box是bounding box的初始参考。而生成的bounding数量尺寸受到超参scale 和 aspect ratios 控制。所以为了保证生成不同尺寸的bounding box，scale 和 aspect ratios都是不同的。</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_1.57.24_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_1.57.24_PM.png"></p><p>如上图所示，b和c分别代表不同尺度的feature map（8 x 8 和 4 x 4）同时aspect ration 和 scale也是不一样的。同一个feature layer中cell的scale固定，根据不同的aspect ration生成不同尺寸的bounding box。</p><p>目标检测的第一层conv4_3为38 x 38，相较于input Image有来很大的下滑。导致SSD在检测小物体上相对于其他目标检测算法效果不是很理想。</p><p>If it is a problem, we can mitigate it by using images with higher resolution. </p><p>使用高分辨率的图像可以缓解。</p><blockquote><p>Q：高分辨率的input Image，相对第一层feature map的尺寸将会有更大的下滑，对小物体愈加不友好？<br>A：高分辨率是相对像素密度的提升，假设图像尺寸不变，像素密度提升，给出的图片信息越多。那么对小物体检测有什么提升呢？更detector/classifier容易回归？或是提升feature map像素密度的意思？</p></blockquote><p><img src="/2021/01/28/SSD-Notes/Untitled%203.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Untitled%203.png"></p><h3 id="Default-box-generator"><a href="#Default-box-generator" class="headerlink" title="Default box generator"></a>Default box generator</h3><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_10.24.46_AM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_10.24.46_AM.png"></p><p>Default boxes生成</p><p>上图参数：原图300 x 300；Feature map 5 x 5， #default boxes = 3， min_size = 168, aspect_ration = 2。</p><p>左图中红点即cell。根据168 x 168的default box和aspect_ratio生成不同尺度的prior box。</p><p><strong>Cell的确定：</strong></p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_2.23.04_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_2.23.04_PM.png"></p><p>其中$f_{k}$ 为第k张feature map的大小。+0.5是为了将cell放到格子中间。</p><blockquote><p>By combining predictions for all default boxes with different scales and aspect ratios from all locations of many feature maps, we have a diverse set of predictions, covering various input object sizes and shapes.</p></blockquote><p>一系列的default box作为bounding box的初始参考，根据不同的scale和aspect ratio生成各种尺寸，各种形状的bounding box，能够覆盖大部分尺寸和大小的目标物体。如Fig.1 所示，4 x 4的feature map中红框圈出了狗狗，猫作为负样本被舍弃，而8 x 8的feature map仅圈出了猫，狗作为负样本被舍弃，可见不同feature map负责预测的物体尺寸不同。</p><p>论文指出，关于default box的设置是一个开放性研究内容，可以作为优化的一个考虑点。</p><blockquote><p>In practice, one can also design a distribution of default boxes to best fit a specific dataset. How to design the optimal tiling is an open question as well.</p></blockquote><p><strong>Scale的选择：</strong></p><p>论文中给出如下计算公式：</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_2.12.22_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_2.12.22_PM.png"></p><ul><li>$S<em>{min} = 0.2，S</em>{max}= 0.9$ ，最底层的scale为0.2，最高层的scale为0.9。</li><li><p>中间层的scale按照公式递增。</p></li><li><p>每个feature layer负债总额对不同面积大小的目标进行预测。</p></li></ul><p><strong>Aspect ratio的选择：</strong></p><p>由上图可见，bounding box的长宽比（aspect ratio）也是在不断变化的，SSD如何确定aspect ratio？</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_2.16.34_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_2.16.34_PM.png"></p><h2 id="Hard-negative-mining"><a href="#Hard-negative-mining" class="headerlink" title="Hard negative mining"></a>Hard negative mining</h2><p>难例挖掘：通过matching strategy后，存在大量default boxes为负样本，导致严重的正负样本不平衡，导致训练过程中很难收敛。作者通过对每个default box的confidence loss进行排序，选取高loc的几个负样本，使正负样本比例保持在3:1左右，大大加快了优化速率和训练的稳定性。</p><h2 id="Data-augmentation"><a href="#Data-augmentation" class="headerlink" title="Data augmentation"></a>Data augmentation</h2><p>为了增加模型的鲁棒性，使用如下策略进行数据增强：</p><ul><li>使用原图</li><li>在原图上随机采样多个patch，与物体之间的IOU进行样本的判定，定义为0.1，0.3，0.5，0.7，0.9。</li><li>采样的patch比例为[0.3, 1.0], aspect ration在0.5或2。</li><li>以0.5的概率随机水平翻转。</li><li>GT box中心在采样patch中面积大于0.</li></ul><p>数据增强后的表现：</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_3.23.21_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_3.23.21_PM.png"></p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_3.24.12_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_3.24.12_PM.png"></p><p>数据增强使用了random crop &amp; color distortion 和 random expansion。对预测精度提升显著，达8.8%。作者认为SSD的数据增强方式对Fast &amp; Faster R-CNN提升不大，因为后者使用的ROI池化本身对目标平移很敏感。</p><p>而显然使用更多的default box会产生更好的精度。</p><p>Atrous Convolution：指<a href="https://zhuanlan.zhihu.com/p/50369448">空洞卷积</a>。</p><h2 id="Inference-time"><a href="#Inference-time" class="headerlink" title="Inference time"></a>Inference time</h2><p>SSD会生成大量的Boxes，所以使用NMS是必要的，并且能够大大减小工作时间。</p><p>SSD与其他目标检测算法进行比较，在mAP和FPS上都达到了比较优秀的效果。因此SSD可以使用相对较低分辨率从而达到类似的准确率。</p><p><img src="/2021/01/28/SSD-Notes/Screen_Shot_2021-01-28_at_7.32.03_PM.png" alt="SSD%EF%BC%9ASingle%20Shot%20MultiBox%20Detector%20Notes%209c6d1d0f6b01440b8da4dac4d5ca7769/Screen_Shot_2021-01-28_at_7.32.03_PM.png"></p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul><li>更多default boxes可以增加预测的准确性，但是对检测速度有较大影响。</li><li>SSD训练过程中80%的时间花费在VGG-16上：这意味着如果使用更高效的网络，能够提高SSD的性能。</li><li>SSD会混淆相似类别的对象。可能是多个类别共享位置导致的。因为我们使用相同的bounding box去做类别分类的预测。</li><li>SSD-500（input 512 x 512）在voc07上获得高达76.8的mAP，但fps掉为22fps。</li><li>SSD在较小图像上的性能不佳，增加输入的分辨率可能缓解问题，但不能彻底解决。</li><li>COCO数据集有很多小物体，要提升准确率，使用小一点的default boxes（start with a smaller scale at 0.15）</li><li>设计更好的boundary boxes会提升准确率。</li></ul><hr><p>To improve accuracy, SSD introduces:</p><ul><li>small convolutional filters to predict object classes and offsets to default boundary boxes.</li><li>separate filters for default boxes to handle the difference in aspect ratios.</li><li>multi-scale feature maps for object detection.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://arxiv.org/pdf/1512.02325.pdf">SSD论文地址</a></p><p><a href="https://github.com/weiliu89/caffe/tree/ssd">SSD源码</a></p><p><a href="https://arxiv.org/abs/1409.1556">VGG16</a></p><p><a href="https://arleyzhang.github.io/articles/786f1ca3/">研究SSD博客</a></p><p><a href="https://jonathan-hui.medium.com/ssd-object-detection-single-shot-multibox-detector-for-real-time-processing-9bd8deac0e06#:~:text=SSD%20is%20a%20single%2Dshot,offsets%20to%20default%20boundary%20boxes.">Jonathan Hui: SSD object detection: Single Shot MultiBox Detector for real-time processing</a></p><p><a href>Understanding SSD MultiBox</a></p><p><a href="https://docs.google.com/presentation/d/1rtfeV_VmdGdZD5ObVVpPDPIODSDxKnFSU0bsN_rgZXc/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.g179f601b72_0_51">很不错的俄文PPT</a>  &amp;&amp; <strong><a href="https://www.youtube.com/watch?v=P8e-G-Mhx4k">视频</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSD-论文学习笔记&quot;&gt;&lt;a href=&quot;#SSD-论文学习笔记&quot; class=&quot;headerlink&quot; title=&quot;SSD 论文学习笔记&quot;&gt;&lt;/a&gt;SSD 论文学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;知乎：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/347860986&quot;&gt;https://zhuanlan.zhihu.com/p/347860986&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Single-Shot-MultiBox-Detector&quot;&gt;&lt;a href=&quot;#Single-Shot-MultiBox-Detector&quot; class=&quot;headerlink&quot; title=&quot;Single Shot MultiBox Detector&quot;&gt;&lt;/a&gt;Single Shot MultiBox Detector&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Single Shot&lt;/strong&gt;：表示物体的分类和定位在网络的一次前向传递的完成。【The tasks of object localization and classification are done in a &lt;em&gt;single forward pass&lt;/em&gt; of the network.】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MultiBox&lt;/strong&gt;：可扩展、高质量的目标检测，&lt;a href=&quot;https://arxiv.org/abs/1412.1441&quot;&gt;论文地址&lt;/a&gt;。可以理解为在多个feature map上进行多尺度（multi-scale）预测。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Detector&lt;/strong&gt;：网络是一个Object Detector。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/01/28/SSD-Notes/Untitled.png&quot; alt=&quot;Fig.1 详细SSD模型1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Fig.1 详细SSD模型1&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Machine-Learning" scheme="https://superming.life/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04 Tensorflow 1.x</title>
    <link href="https://superming.life/2021/01/03/Ubuntu18.04+Tensorflow-1.x/"/>
    <id>https://superming.life/2021/01/03/Ubuntu18.04+Tensorflow-1.x/</id>
    <published>2021-01-03T12:22:19.000Z</published>
    <updated>2021-02-01T16:00:09.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu18-04-Tensorflow-1-x-安装（一）：Nvidia软件安装"><a href="#Ubuntu18-04-Tensorflow-1-x-安装（一）：Nvidia软件安装" class="headerlink" title="Ubuntu18.04 Tensorflow 1.x 安装（一）：Nvidia软件安装"></a>Ubuntu18.04 Tensorflow 1.x 安装（一）：Nvidia软件安装</h1><p>文章包含以下几个内容：</p><ul><li>Nvidia驱动安装</li><li>CUDA版本选择及安装</li><li>cuDNN选择及安装</li></ul><p>我的配置[参考]：</p><ul><li>GTX965M</li><li>Ubuntu18.04 LTS</li></ul><h2 id="Nvidia驱动安装"><a href="#Nvidia驱动安装" class="headerlink" title="Nvidia驱动安装"></a>Nvidia驱动安装</h2><p>需考虑：GPU硬件型号，GPU驱动，CUDA，TensorFlow，PyTorch以及CuDNN等适配信息。</p><ol><li><strong>检查GPU是否支持CUDA。这决定了你能否安装TensorFlow的GPU版本。</strong></li></ol><p>通过下面链接检查GPU是否支持CUDA，如果GPU能在列表中找到，即支持CUDA。</p><p><a href="https://developer.nvidia.com/cuda-gpus">CUDA GPUs</a></p><a id="more"></a><p>例如：我使用的GPU为GTX965M，相关信息能在Nvidia官网找到：</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_4.09.17_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_4.09.17_PM.png"></p><p>计算能力5.2</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_3.58.30_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_3.58.30_PM.png"></p><ol><li><strong>确定安装驱动的版本</strong></li></ol><p>下面链接可以查到GPU所对应操作系统可安装最新的驱动版本：</p><p><a href="https://www.nvidia.com/Download/index.aspx">Download Drivers</a></p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_11.05.58_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_11.05.58_PM.png"></p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_8.27.17_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_8.27.17_PM.png"></p><p>接下来执行如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers <span class="comment">#添加NVIDIA显卡的驱动库</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">ubuntu-drivers devices <span class="comment">#显示可安装的驱动版本</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen Shot 2020-12-27 at 10.41.05 PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen Shot 2020-12-27 at 10.41.05 PM.png"></p><p>显示有390-455的版本，其中推荐安装455版本。</p><p>需要注意的是，在下一步安装CUDA时，<u>不同版本的CUDA对驱动版本有要求</u>，详细要求在<a href>Nvidia CUDA Compatibility</a>页面中进行查看。</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_10.01.29_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_10.01.29_PM.png"></p><p><strong>如何确定安装的CUDA版本？</strong></p><p>CUDA的版本根据Tensorflow版本确定。如下图所示，假设要安装tensorflow_gpu-1.14.0版本，那么我需要安装的CUDA版本为10.0[10.1或9都不行，版本间一一对应]。<a href>检查Tensorflow对应版本</a>。</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_10.12.59_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-24_at_10.12.59_PM.png"></p><p>综上，根据我要安装的tensorflow版本，需要安装CUDA10.0以及cuDNN7.4。</p><p>回到CUDA对驱动要求查看对应GPU驱动版本的要求：<code>&gt; = 410.48</code> 。</p><p>执行如下命令安装驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt list nvidia-drivers* <span class="comment">#列出可安装的驱动版本</span></span><br><span class="line">sudo apt install nvidia-driver-450 <span class="comment">#安装450的驱动</span></span><br></pre></td></tr></table></figure><p>检验驱动是否安装完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_11.41.06_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_11.41.06_PM.png"></p><p>执行nvidia-smi显示如图表示驱动安装完成</p><p>训练时检测GPU使用情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 0.5 nvidia-smi  #即每隔0.5秒执行一次nvidia-smi；</span><br></pre></td></tr></table></figure><h2 id="CUDA安装："><a href="#CUDA安装：" class="headerlink" title="CUDA安装："></a>CUDA安装：</h2><p>在<a href="https://developer.nvidia.com/Cuda-Toolkit-Archive">官方页面</a>中找到对应的CUDA版本</p><p><a href="https://developer.nvidia.com/cuda-10.0-download-archive">CUDA Toolkit 10.0 Archive</a></p><p>可以采用多种教程进行安装，根据给出的参考进行安装：</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-27_at_12.26.44_AM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-27_at_12.26.44_AM.png"></p><p>选择deb(local)进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb</span><br><span class="line">sudo apt-key add /var/cuda-repo-&lt;version&gt;/7fa2af80.pub</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure><p>安装完成：</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_10.25.53_AM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_10.25.53_AM.png"></p><p><strong>CUDA配置</strong>：</p><p>执行<code>vim ~/.bashrc</code>在bash配置文件下添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># added by cuda 10.0 installer</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/cuda-10.0/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/usr/local/cuda-10.0/lib64:<span class="variable">$LD_LIBRARY_PATH</span>&quot;</span></span><br></pre></td></tr></table></figure><p><code>source ~/.bashrc</code><br><code>nvcc -V</code> 检查CUDA版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2018 NVIDIA Corporation</span><br><span class="line">Built on Sat_Aug_25_21:08:01_CDT_2018</span><br><span class="line">Cuda compilation tools, release 10.0, V10.0.130</span><br></pre></td></tr></table></figure><p><strong>检查CUDA是否正常工作：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cuda-install-samples-10.x.sh ~  <span class="comment">#安装cuda 10.x的样本到~目录下，替换x为你的版本号</span></span><br><span class="line"><span class="built_in">cd</span> ~/NVIDIA_CUDA-10.x_Samples  <span class="comment">#进入Sample目录</span></span><br><span class="line">make  <span class="comment">#有点耗时，如果系统版本不匹配，gcc版本可能会导致报错。</span></span><br><span class="line">./1_Utilities/deviceQuery/deviceQuery  <span class="comment">#执行检查程序</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_12.12.08_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_12.12.08_PM.png"></p><p>结果出现Result==Pass表示通过，CUDA安装完成。</p><h2 id="安装cuDNN："><a href="#安装cuDNN：" class="headerlink" title="安装cuDNN："></a>安装cuDNN：</h2><p>CUDA10.0 对应cuDNN 7.4</p><p>在官方页面下载cuDNN【需注册Nvidia账号】，</p><p>下载<a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN v7.4.2 for CUDA 10.0</a></p><p>找到Ubuntu18.04 对应的deb包，并下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads  <span class="comment">#进入下载目录</span></span><br><span class="line">sudo dpkg -i libcudnn*  <span class="comment">#同时安装三个文件</span></span><br><span class="line"><span class="comment">#逐个安装执行如下三个命令</span></span><br><span class="line"><span class="comment">#sudo dpkg -i libcudnn7_7.6.5.32-1+cuda10.2_amd64.deb </span></span><br><span class="line"><span class="comment">#sudo dpkg -i libcudnn7-dev_7.6.5.32-1+cuda10.2_amd64.deb</span></span><br><span class="line"><span class="comment">#sudo dpkg -i libcudnn7-doc_7.6.5.32-1+cuda10.2_amd64.deb</span></span><br><span class="line"></span><br><span class="line">cp -r /usr/src/cudnn_samples_v7/ <span class="variable">$HOME</span>  <span class="comment">#复制样本文件到$HOME文件夹下</span></span><br><span class="line"><span class="built_in">cd</span>  <span class="variable">$HOME</span>/cudnn_samples_v7/mnistCUDNN  <span class="comment">#进入样本目录</span></span><br><span class="line">make clean &amp;&amp; make  <span class="comment">#编译</span></span><br><span class="line">./mnistCUDNN  <span class="comment">#执行cuDNN测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出 Test Passed表示cuDNN安装成功。</span></span><br></pre></td></tr></table></figure><h1 id="Ubuntu18-04-Tensorflow-1-x-安装（二）：TensorFlow及相关软件包安装"><a href="#Ubuntu18-04-Tensorflow-1-x-安装（二）：TensorFlow及相关软件包安装" class="headerlink" title="Ubuntu18.04 Tensorflow 1.x 安装（二）：TensorFlow及相关软件包安装"></a>Ubuntu18.04 Tensorflow 1.x 安装（二）：TensorFlow及相关软件包安装</h1><h2 id="使用原生pip安装"><a href="#使用原生pip安装" class="headerlink" title="使用原生pip安装"></a>使用原生pip安装</h2><p><strong>libcupti包下载：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libcupti-dev</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>相关软件包下载</strong>：</p><p>注：我的Ubuntu系统使用python3.6版本，通过<code>python -V</code>查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python3-pip python3-dev python3-numpy python3-wheel ****<span class="comment"># for Python 3.n</span></span><br></pre></td></tr></table></figure><p><strong>下载指定版本的TensorFlow：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 3.x</span></span><br><span class="line">$ pip3 install tensorflow==1.14.0 <span class="comment"># cpu version </span></span><br><span class="line">$ pip3 install tensorflow-gpu==1.14.0 <span class="comment">#gpu version</span></span><br><span class="line"><span class="comment"># Python 2.x</span></span><br><span class="line">$ pip install tensorflow==1.14.0 <span class="comment"># cpu version </span></span><br><span class="line">$ pip install tensorflow-gpu==1.14.0 <span class="comment">#gpu version</span></span><br></pre></td></tr></table></figure><p>备用方法：如果以上安装失败或者有报错，可以选择指定<code>tfBinaryURL</code>的形式进行安装。</p><ul><li><a href="https://pypi.org/project/tensorflow/">CPU Version</a></li><li><a href="https://pypi.org/project/tensorflow-gpu/">GPU Version</a></li></ul><p>根据TensorFlow版本、操作系统以及Python版本确定.whl文件。使用如下命令进行安装：</p><ul><li>可以直接安装，也可以在Virtualenv环境中安装。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.x</span></span><br><span class="line">$ sudo pip  install --upgrade tfBinaryURL   </span><br><span class="line"><span class="comment"># Python 3.x</span></span><br><span class="line">$ sudo pip3 install --upgrade tfBinaryURL  </span><br></pre></td></tr></table></figure><p><strong>卸载：</strong></p><p>使用pip安装的TensorFlow可以使用如下命令卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.x</span></span><br><span class="line">$ sudo pip uninstall tensorflow </span><br><span class="line"><span class="comment"># Python 3.x</span></span><br><span class="line">$ sudo pip3 uninstall tensorflow</span><br></pre></td></tr></table></figure><h2 id="使用Anaconda安装TensorFlow"><a href="#使用Anaconda安装TensorFlow" class="headerlink" title="使用Anaconda安装TensorFlow"></a>使用Anaconda安装TensorFlow</h2><h3 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h3><p>在<a href="https://www.anaconda.com/products/individual#Downloads">官网</a>下载64位Linux版本的<strong>Anaconda</strong>。</p><p>执行如下命令进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash Anaconda3-2020.11-Linux-x86_64.sh</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>验证：运行python时，显示的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br><span class="line">Python 3.6.0 |Anaconda 4.3.0 (64-bit)| (default, Dec 23 2016, 12:22:00) </span><br><span class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>查看下面图表，确定TensorFlow版本对Python版本的要求。【我使用Python 3.6】</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_7.27.01_PM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-26_at_7.27.01_PM.png"></p><h3 id="TensorFlow安装"><a href="#TensorFlow安装" class="headerlink" title="TensorFlow安装"></a>TensorFlow安装</h3><p><strong>Anaconda安装</strong></p><p>在Anaconda中，我们使用conda创建一个虚拟环境，并在该环境中安装TensorFlow。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立一个名为tensorflow的conda虚拟环境，同时指定运行的Python版本为3.6</span></span><br><span class="line">$ conda create -n tensorflow pip python=3.6</span><br><span class="line"><span class="comment"># 安装完成后使用命令激活conda环境</span></span><br><span class="line">$ conda acticate tensorflow</span><br><span class="line">(tensorflow)$ <span class="comment"># 表示进入了名为tensorflow的虚拟环境中</span></span><br></pre></td></tr></table></figure><p>接下来可以选择在线安装或者本地安装：</p><ol><li>在线安装[简单]</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow==1.14.0  <span class="comment"># CPU 版本</span></span><br><span class="line">pip install tensorflow-gpu==1.14.0 <span class="comment"># GPU版本</span></span><br></pre></td></tr></table></figure><ol><li>本地安装</li></ol><p>在<a href="https://pypi.org/project/tensorflow-gpu/#files">pypi-tensorflow</a>网站找到对应的whl文件，下载后使用<code>pip install</code>执行即可。</p><p>附：conda的简单使用：[参考<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/cheatsheet.html">conda-cheatsheet</a>]</p><p><img src="/2021/01/03/Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-27_at_1.22.23_AM.png" alt="Ubuntu18.04+Tensorflow-1.x/Screen_Shot_2020-12-27_at_1.22.23_AM.png"></p><h2 id="使用Virtualenv安装"><a href="#使用Virtualenv安装" class="headerlink" title="使用Virtualenv安装"></a>使用Virtualenv安装</h2><p>Virtualenv顾名思义是Python的虚拟环境，独立于其他环境【类似于conda】，不与其他Python程序相互影响。在Virtualenv虚拟出的环境中安装TensorFlow及相关依赖，只要激活该环境便可在该环境中运行TensorFlow。</p><p><strong>安装pip和Virtualenv：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.x</span></span><br><span class="line">$ sudo apt-get install python-pip python-dev python-virtualenv </span><br><span class="line"><span class="comment"># Python 3.x</span></span><br><span class="line">$ sudo apt-get install python3-pip python3-dev python-virtualenv </span><br></pre></td></tr></table></figure><p>选择其中一条命令创建<a href="https://virtualenv.pypa.io/en/latest/index.html">Virtualenv</a>的虚拟环境</p><ul><li><code>tragetDirectory</code>  : 自定义VIrtualenv根目录，我设置为<code>~/tensorflow</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 2.x</span></span><br><span class="line">$ virtualenv --system-site-packages targetDirectory </span><br><span class="line"><span class="comment"># Python 3.x</span></span><br><span class="line">$ virtualenv --system-site-packages -p python3 targetDirectory </span><br></pre></td></tr></table></figure><p><strong>激活环境并安装TensorFlow</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/tensorflow/bin/activate</span><br><span class="line"><span class="comment"># Make sure pip 8.1+ installed.</span></span><br><span class="line">(tensorflow)$ easy_install -U pip</span><br><span class="line"><span class="comment"># Download TensorFlow</span></span><br><span class="line">  <span class="comment"># CPU with pip or pip3</span></span><br><span class="line">(tensorflow)$ pip install --upgrade tensorflow     </span><br><span class="line">(tensorflow)$ pip3 install --upgrade tensorflow    </span><br><span class="line">  <span class="comment"># GPU with pip or pip3</span></span><br><span class="line">(tensorflow)$ pip install --upgrade tensorflow-gpu  </span><br><span class="line">(tensorflow)$ pip3 install --upgrade tensorflow-gpu</span><br></pre></td></tr></table></figure><p><strong>Others</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活环境</span></span><br><span class="line">$ <span class="built_in">source</span> ~/tensorflow/bin/activate</span><br><span class="line"><span class="comment"># 休眠环境</span></span><br><span class="line">(tensorflow)$ deactivate</span><br><span class="line"><span class="comment"># 卸载TensorFlow, 移除目录树即可</span></span><br><span class="line">rm -r targetDirectory</span><br></pre></td></tr></table></figure><h2 id="源代码构建"><a href="#源代码构建" class="headerlink" title="源代码构建"></a>源代码构建</h2><p>待补充…</p><h2 id="验证TensorFlow是否可用："><a href="#验证TensorFlow是否可用：" class="headerlink" title="验证TensorFlow是否可用："></a>验证TensorFlow是否可用：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip show tensorflow-gpu</span><br><span class="line">pip show tensorflow</span><br></pre></td></tr></table></figure><p>执行简单的Python程序：</p><p>在shell中输入<code>python</code>开启python</p><p>输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line">import tensorflow as tf</span><br><span class="line">hello = tf.constant(<span class="string">&#x27;Hello, TensorFlow!&#x27;</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="built_in">print</span>(sess.run(hello))</span><br></pre></td></tr></table></figure><p>系统输出：<code>Hello, Tensorflow</code> ，表示TensorFlow可正常使用。</p><hr><h2 id="参考-amp-帮助"><a href="#参考-amp-帮助" class="headerlink" title="参考&amp;帮助"></a>参考&amp;帮助</h2><p><a href="http://ejklike.github.io/2017/03/06/install-tensorflow1.0-on-ubuntu16.04-1.html">우분투 16.04에 텐서플로 1.0 설치하기 (1) Nvidia 소프트웨어 설치 (ft. GTX 970)</a></p><p><a href="https://www.tensorflow.org/install/gpu">GPU support | TensorFlow</a></p><p><a href="https://medium.com/better-programming/install-tensorflow-1-13-on-ubuntu-18-04-with-gpu-support-239b36d29070">Install Tensorflow 1.13 on Ubuntu 18.04 with GPU support</a></p><p><a href="https://zhuanlan.zhihu.com/p/143429249">简易记录：安装GPU驱动，CUDA和cuDNN</a></p><p><a href="https://tensorflow.juejin.im/install/install_linux.html#toc-16">在 Ubuntu 上安装 TensorFlow</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">anaconda | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>How to change the default Anaconda python environment?</p><p>如何指定python的pip下载【电脑中有多个版本的python和pip】<a href="https://stackoverflow.com/questions/2812520/dealing-with-multiple-python-versions-and-pip">Dealing with multiple Python versions and PIP?</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The system default python:</span></span><br><span class="line">$ python -m pip install fish</span><br><span class="line"></span><br><span class="line"><span class="comment"># A virtualenv&#x27;s python:</span></span><br><span class="line">$ .env/bin/python -m pip install fish</span><br><span class="line"></span><br><span class="line"><span class="comment"># A specific version of python:</span></span><br><span class="line">$ python-3.6 -m pip install fish</span><br></pre></td></tr></table></figure><p><a href="https://github.com/AlenZhang-Dev/Learning-Records/blob/master/Machine%20Learning/Notes/Ubuntu18.04%20%2B%20Tensorflow%201.x%20.md">GitHub记录</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ubuntu18-04-Tensorflow-1-x-安装（一）：Nvidia软件安装&quot;&gt;&lt;a href=&quot;#Ubuntu18-04-Tensorflow-1-x-安装（一）：Nvidia软件安装&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu18.04 Tensorflow 1.x 安装（一）：Nvidia软件安装&quot;&gt;&lt;/a&gt;Ubuntu18.04 Tensorflow 1.x 安装（一）：Nvidia软件安装&lt;/h1&gt;&lt;p&gt;文章包含以下几个内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nvidia驱动安装&lt;/li&gt;
&lt;li&gt;CUDA版本选择及安装&lt;/li&gt;
&lt;li&gt;cuDNN选择及安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的配置[参考]：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GTX965M&lt;/li&gt;
&lt;li&gt;Ubuntu18.04 LTS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Nvidia驱动安装&quot;&gt;&lt;a href=&quot;#Nvidia驱动安装&quot; class=&quot;headerlink&quot; title=&quot;Nvidia驱动安装&quot;&gt;&lt;/a&gt;Nvidia驱动安装&lt;/h2&gt;&lt;p&gt;需考虑：GPU硬件型号，GPU驱动，CUDA，TensorFlow，PyTorch以及CuDNN等适配信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检查GPU是否支持CUDA。这决定了你能否安装TensorFlow的GPU版本。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过下面链接检查GPU是否支持CUDA，如果GPU能在列表中找到，即支持CUDA。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.nvidia.com/cuda-gpus&quot;&gt;CUDA GPUs&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Machine-Learning" scheme="https://superming.life/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>深度学习基础1</title>
    <link href="https://superming.life/2020/11/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <id>https://superming.life/2020/11/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</id>
    <published>2020-11-24T06:00:00.000Z</published>
    <updated>2021-02-01T16:00:17.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-深度学习基础"><a href="#1-深度学习基础" class="headerlink" title="1. 深度学习基础"></a>1. 深度学习基础</h1><h1 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a>简单概述</h1><p>深度学习应用于计算机视觉的两个关键思想：卷积神经网络和反向传播。</p><p>总的来说，以下三种力量在推动机器学习。</p><ol><li><p>硬件</p><p> CPU以及GPU上的大量投入。</p></li><li><p>数据集和基准</p></li><li><p>算法上的改进</p><p> 在2009-2010年出现了几个简单但很重要的算法改进，可以实现更好的梯度传播。以及更先进的有助于梯度传播的方法：批标准化，残差连接和深度可分离卷积。</p><p> 更好的神经层激活函数</p><p> 更好的权重初始化方案</p><p> 更好的优化方案</p></li></ol><a id="more"></a><h1 id="神经网络的数学基础"><a href="#神经网络的数学基础" class="headerlink" title="神经网络的数学基础"></a>神经网络的数学基础</h1><p>理解神经网络需要有很扎实的数学基础：张量，张量运算，微分，梯度下降等。因此对于神经网络的应用和理解需要分开进行，两种学习层级不在一个Level。</p><ul><li>侧重与应用，并尽量避免数学论证。</li></ul><h2 id="神经网络数据表示"><a href="#神经网络数据表示" class="headerlink" title="神经网络数据表示"></a>神经网络数据表示</h2><p><strong>张量</strong></p><p><strong>张量（Tensor）</strong>，张量是机器学习的基本数据结构。它是一个数据容器，包含的数据几乎总是数值数据，因此它是数字的容器。张量是矩阵向任意纬度的推【纬度dimension 也叫轴axis】</p><p><strong>标量（0D张量）</strong></p><p>仅包含一个数字的张量叫做标量（scalar）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p><strong>向量（1D张量）</strong></p><p>数字组成的数据叫做向量（vector）。矩阵有一个轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">12</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><p><strong>矩阵（2D张量）</strong></p><p>向量组成的数组叫做矩阵或者二维张量。矩阵有两个轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([[<span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">              [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">              [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br></pre></td></tr></table></figure><p><strong>3D张量与更高维张量</strong></p><p>将多个矩阵组合成一个新数组，得到一个3D张量，也就是立方体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([[[<span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">               [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">               [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]],</span><br><span class="line">              [[<span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">               [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">               [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]])</span><br></pre></td></tr></table></figure><p>深度学习一般处理0-4D的张量，处理视频的时候可能会遇到5D张量。</p><p><strong>关键属性</strong></p><p>张量是由以下三个属性定义的：</p><p><strong>轴的个数（阶）</strong>：例如，3D张量中有3个轴，矩阵有两个轴。在Numpy等Python库中叫张量的ndim。</p><p><strong>形状</strong>：表示张量沿着每个轴的纬度大小（元素个数）。例如，矩阵示例形状为（3，5），3D张量示例形状为（3，3，5）…</p><p><strong>数据类型：</strong>（在Python库中叫做dtype）。这是张量中所包含的数据类型【float 32 、uint 8、float 64等】，极少数情况下会遇到字符（char）张量。</p><p><strong>在Numpy中操作张量</strong></p><p>选择张量的特定元素叫做张量切片（tensor slicing）。</p><p>下面例子选择第10-100个数字（不包含100个），并将其放在形状为（90，28，28）的数组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_slice = train_images[<span class="number">10</span>:<span class="number">100</span>]</span><br><span class="line">print(my_slice.shape)</span><br><span class="line"><span class="comment"># 以下等同于前面的操作</span></span><br><span class="line">my_slice = train_image[<span class="number">10</span>:<span class="number">100</span>, :, :]</span><br><span class="line">my_slice = train_image[<span class="number">10</span>:<span class="number">100</span>, <span class="number">0</span>:<span class="number">28</span>, <span class="number">0</span>:<span class="number">28</span>]</span><br></pre></td></tr></table></figure><p><strong>数据批量概念</strong></p><p>In normal，深度学习中所有数据张量的第一个轴（0轴）都是样本轴（sample axis）。在MINIST中，样本就是数字图像。</p><p>深度学习模型不会同时处理整个数据集。而是将数据拆分成小批量，批量大小为128。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">batch = train_image[:<span class="number">128</span>]</span><br><span class="line">batch = train_image[<span class="number">128</span>:<span class="number">256</span>]</span><br><span class="line"><span class="comment"># 第n个批量</span></span><br><span class="line">batch = train_image[<span class="number">128</span> * n : <span class="number">128</span> * (n + <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><p>对于以上的批量张量，第一个轴（0轴）叫做批量轴（batch axis）或批量维度（batch dimension）。</p><h2 id="神经网络张量运算"><a href="#神经网络张量运算" class="headerlink" title="神经网络张量运算"></a>神经网络张量运算</h2><p>深度神经网络的所有变化都可以简化为数值数据上的张量运算（tensor operation）</p><p><strong>逐元素运算</strong><br>relu元素和加法都是逐元素（element-wise）的运算，即该运算独立应用于张量中的每个元素。也就是该运算非常适合大规模并行实现。（向量化实现）</p><p><strong>广播</strong></p><p>如果两个不同形状的2D张量相加，会发生什么？</p><p>如果没有歧义，较小的张量会会被广播（broadcast），以匹配较大张量的形状。广播包含以下两步：</p><ol><li>向较小的张量添加轴（叫做广播轴），使其ndim与较大张量相同。</li></ol><p>2.将较小的张量沿着新轴重复，使其形状与较大的张量相同。</p><p>举例：如果一个张量的形状是(a, b, … n, n  + 1, … m)，另一个张量的形状是(n, n + 1, …  m)，那么你通常可以利用广播对它们做两个张量之间的逐元素运算。广播操作会自动应用于a到n-1的轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.random.random((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">10</span>))</span><br><span class="line">y = np.random.random(<span class="number">32</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">z = np.maximum(x, y)</span><br><span class="line"><span class="comment"># 输出z的形状是（64， 3， 32， 10），与x相同。</span></span><br></pre></td></tr></table></figure><p><strong>张量点积</strong></p><p>点积运算，也叫张量积（tensor product），是最常见也是最有用的张量运算。与逐元素张量不同，它将输入张量元素合并在一起。</p><p>Numpy，Keras，Theano和TensorFlow中，都是使用 * 实现逐元素点积。</p><p>就是两个向量对应位置一一相乘后求和的操作，最后结果是一个标量，是一个实数值。</p><p>两个向量a = [a1, a2,…, an]和b = [b1, b2,…, bn]的点积定义为：</p><p>a·b=a1b1+a2b2+……+anbn。</p><p>张量变形</p><p>改变张量的行和列，得到想要的形状，变形后的张量元素总个数与初始张量相同。</p><p>前面用到的reshape函数就是张量变形的应用。</p><h2 id="梯度下降-suspended"><a href="#梯度下降-suspended" class="headerlink" title="梯度下降  [suspended]"></a>梯度下降  [suspended]</h2><p>关于梯度下降在这里不展开，以下为梯度下降的主要概念</p><ul><li>随机梯度下降。</li><li>小批量随机梯度下降 SGD</li><li>局部最小点（local minimum）</li><li>反向传播算法（Backpropagation）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>学习</strong>是找到一组模型参数，在给定训练数据样本和对应目标值上的损失函数最小化。</p><p>学习过程中：随机选取包含数据小样本及其目标值的批量，并计算批量损失相对于网络参数的梯度，随后将网络参数沿着梯度反方向移动。</p><p>整个学习过程中之所以能实现，是因为神经网络是一系列可微分的张量运算，因此可以利用求导的链式法则来得到梯度函数，这个函数将当前的参数和当前数据批量映射为一个梯度值。</p><p>损失是在训练过程中需要最小化的量，因此应该能够衡量当前任务是否已成功解决。</p><p>优化器是使用损失梯度更新参数的具体方式，比如RMSProp优化器、带动量的随机梯度下降等。</p><h1 id="神经网络入门"><a href="#神经网络入门" class="headerlink" title="神经网络入门"></a>神经网络入门</h1><blockquote><p>本章通过三个典型的介绍性示例深入理解如何使用神经网络解决实际问题。分别为1. 将电影评论划分为正面或负面（二分类问题）2. 将新闻按主题分类（多分类问题） 3. 根据房地产数据估算房屋价格。</p></blockquote><h2 id="神经网络剖析"><a href="#神经网络剖析" class="headerlink" title="神经网络剖析"></a>神经网络剖析</h2><p><strong>主要介绍神经网络的核心组件：层、网络、目标函数和优化器。</strong></p><p><strong>神经网络主要围绕以下四个方面：</strong></p><p>层：多个层组合成网络（或模型）。</p><p>输入数据和相应的目标。</p><p>损失函数：即用于学习的反馈信号。</p><p>优化器：决定学习过程如何进行。</p><p><img src="/2020/11/24/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/Untitled.png" alt="深度学习基础/Untitled.png"></p><p><strong>多个层链接在一起组成了网络，将输入映射为预测值。然后损失函数将这些预测值与目标进行比较，得到损失值，用户衡量网络预测值与预期结果的匹配程度。优化器使用这个损失值来更新网络权重。</strong></p><p>神经网络的基本数据结构是层。层是一个数据处理模块，将一个或多个输入张量转换为一个或多个输出张量。</p><p><strong>层：深度学习的基本组件</strong></p><p>神经网络的基本数据结构是层。层是一个数据处理模块，将一个或多个输入张量转换为一个或多个输出张量。有权重的层称为有状态的层。权重是利用随机梯度下降学到的一个或多个张量。其中包含网络的知识。</p><p>不同张量个数与不同数据处理类型需要用到不同的层。例如，简单的向量数据保存在形状为（samples， features）的2D张量中，通常用密集连接层【Densely connected layer 】进行处理。序列数据保存在形状为（samples，timesteps，features）的3D张量中，通常用循环层（Recurrent Layer表示，比如Keras的LSTM层）</p><p>层兼容性（Layer compatibiltiy）具体指每一层只接受特定形状的输入张量，并返回特定形状的输入张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line">layer = layers.Dense(<span class="number">32</span>, input_shape(<span class="number">784</span>, ))</span><br><span class="line"><span class="comment"># 创建一个层，有32个输出单元的密集层，同时只接受一个维度大小为784的2D张量作为输入。</span></span><br></pre></td></tr></table></figure><p>接上，上一层后面只能连接一个32维向量作为输入层，Keras会自动匹配输入层的形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>, input_shape=(<span class="number">784</span>)))</span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>))</span><br><span class="line"><span class="comment"># 第二层没有输入形状(input_shape)，可以自动推导出上一层的形状。</span></span><br></pre></td></tr></table></figure><p><strong>模型：由层构成的网络</strong></p><p>层构成的网络。</p><p>深度学习模型是层构成的有向无环图。</p><p>随着深入学习，会接触到更多类型的网络拓扑结构。</p><ol><li>双分支网络（two-branch）</li><li>多头网络（multihead）</li><li>Inception模块</li></ol><p><strong>损失函数与优化器</strong></p><p>一旦确定了网络架构，需要选择以下两个参数。</p><ol><li>损失函数（目标函数） — 在训练过程中需要将其最小化。他能够衡量当前任务是否成功完成。</li><li>优化器 — 决定如何基于损失函数对网络进行更新。它执行的是随机梯度下降（SGD）的某个变体。</li></ol><p><strong>具有多个输出的神经网络可能有多个损失函数。（每个输出对应一个损失函数）【但是梯度下降过程中必须基于单个标量损失值，因此对于具有多个损失函数的网络，需要将所有损失函数取平均，变为一个标量值】</strong></p><p>选取正确的目标函数对解决问题非常重要，网络的目的是使损失尽可能最小化。因此如果目标函数与成功完成当前任务不完全相关，那么网络最终得到的结果可能会不符合你的预期。因此对于常见的分类、回归、序列预测等常见问题，可以遵循一些简单的指导原则来选择正确的损失函数。</p><p>对于二分类问题：可以使用二元交叉熵（binary crossentropy）损失函数，对于多分类函数，可以使用分类交叉熵（categorical crossentropy），对于回归问题，可以使用均方误差（mean-squared error）对于序列学习问题，可以使用联结主义时序分类（CTC，connecttionist temporal classification）损失函数，等</p><h2 id="二分类问题"><a href="#二分类问题" class="headerlink" title="二分类问题"></a>二分类问题</h2><p>典型的二分类问题代码及解析：<a href="https://github.com/AlenZhang-Dev/Learning-Records/blob/master/Machine%20Learning/Deep%20Learning%20with%20Python/3.4%20%E7%94%B5%E5%BD%B1%E8%AF%84%E8%AE%BA%E5%88%86%E7%B1%BB%E3%80%90%E4%BA%8C%E5%88%86%E7%B1%BB%E3%80%91.ipynb">使用IMDB进行电影评论分类</a></p><p>关于隐藏单元。一个隐藏单元是该层表示空间的一个维度。16个隐藏单元对应权重矩阵W的形状为（input_dimension）,与W做点击相当于输入数据投影到16维表示空间中。可以表示空间维度直观理解为“网络学习内部表示时所拥有的自由度。”隐藏单元越多，网络能够学到更复杂的表示，但网络的计算代价也越大，而且能够导致学到不好的模式。（能够提高训练数据上的性能，但不能提高测试集上的性能）</p><p><strong>构建网络</strong></p><p>对于Dense层的堆叠，需要有以下两个关键架构</p><ol><li>网络有多少层</li><li>每层有多少隐藏单</li></ol><p><strong>对于二分类问题的总结：</strong></p><ol><li><p>需要对原始数据进行大量的预处理，方便将其转换为张量输入到神经网络中。单词序列使用二进制向量编码，但也有别的编码方式。</p></li><li><p>带有relu激活的Dense层堆叠，可以解决很多种问题。</p></li><li><p>对于二分类问题，网络最后一层应该是只有一个单元并使用sigmoid激活的Dense层，网络输出应该是0～1范围内的标量，表示概率值。</p></li><li><p>对于二分类问题的sigmoid标量输出，应该使用binary_crossentropy损失函数。</p></li><li><p>无论问题是什么，rmsprop优化器通常都是足够好的选择。</p></li><li><p>随着神经网络在训练数据上的表现越来越好，模型最终会过拟合，所以需要监控模型在训练集之外的性能。</p></li></ol><p>什么是激活函数？为什么要使用激活函数？</p><p>如果没有relu等激活函数，Dense层将只包括两个线性运算—点积和加法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output = dot(W, <span class="built_in">input</span>) + b</span><br></pre></td></tr></table></figure><p>这样Dense层就只能学习输入数据的线性变化：该层的假设空间是从输入数据到16位空间所有可能的线性变换集合。这种假设空间非常有限，无法利用多个表示层的优势，因为多个线性层堆叠实现的仍是线性运算，添加层数并不会扩展假设空间。</p><p>为了得到更丰富的假设空间，从而充分利用多层表示的优势，你需要添加非线性或激活函数。relu是深度学习中最常用的激活函数，但还有许多其他函数可选。</p><p>Q：Dense层堆叠的影响？</p><h2 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h2><p>相关重点参见：<a href="https://github.com/AlenZhang-Dev/Learning-Records/blob/master/Machine%20Learning/Deep%20Learning%20with%20Python/3.5%20%E5%A4%9A%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98%E3%80%90%E6%96%B0%E9%97%BB%E5%88%86%E7%B1%BB%E3%80%91.ipynb">新闻分类：多分类问题</a></p><h2 id="标量回归问题"><a href="#标量回归问题" class="headerlink" title="标量回归问题"></a>标量回归问题</h2><p>相关重点参见：<a href="https://github.com/AlenZhang-Dev/Learning-Records/blob/master/Machine%20Learning/Deep%20Learning%20with%20Python/3.6%20%E6%B3%A2%E5%A3%AB%E9%A1%BF%E6%88%BF%E4%BB%B7%E3%80%90%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%E3%80%91.ipynb">波士顿房价预测</a></p><h1 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h1><blockquote><p>改进Plan：鉴于以下几个改进建议，用数据可视化进行表示。</p></blockquote><p>机器学习的四个分支：监督学习、无监督学习、自监督学习、强化学习。 </p><p>评估机器学习模型：<br>机器学习的目的是得到可泛化（generalize）的模型，即在前所未有的数据上表现很好的模型，而过拟合则是核心难点。</p><h2 id="训练集、验证集、测试集"><a href="#训练集、验证集、测试集" class="headerlink" title="训练集、验证集、测试集"></a>训练集、验证集、测试集</h2><p>评估模型的重点是将数据划分如下三个集合：<strong>训练集、验证集和测试集</strong>。在训练数据上训练模型，在测试集上评估模型，一旦找到了最佳参数，在测试数据上最后测试一次。</p><p>因为在开发模型时总是需要调整参数，比如选择层数或者每层大小【这叫做模型的超参数，以便与模型的参数分开】这个调节过程需要使用模型在验证数据集上的性能作为反馈信号，这个调节本质上也是一种学习：在某个参数空间中寻找良好的模型配置。如果基于模型在验证集上的性能来调节模型配置，会很快导致模型在验证集上过拟合，即使你没有在验证集上训练数据。这一现象叫做：信息泄露（information leak）</p><p>以下为主要三种经典评估方法：</p><ol><li>简单的留出验证集(hold-out validation)<br>这是最简单的评估方法，但是有一个缺点：如果可用的数据很少，那么可能验证集和测试集包含的样本太少，从而无法在统计学上代表数据。</li><li><p>K折验证</p><p> K折验证（K-fold validation）将数据划分为大小相同的K个分区。对于每个分区i，在剩余的K-1个分区中训练模型，然后在分区i上评估模型。最终分数等于K个分数的平均值。</p></li><li><p>带有打乱数据的重复K折验证</p><p> 如果可用数据相对较少，而你又需要尽可能精确地评估模型，那么可以选择带有打乱数据的重复K折验证(iterated K-fold validation with shuffling)。但这种方法一共要训练P X K个模型，计算代价很大。</p></li></ol><p>评估模型注意事项：</p><ol><li>数据代表性（data representativeness)</li><li>时间箭头(the arrow of time)</li><li>数据冗余(redundancy in your data)</li></ol><h2 id="数据预处理、特征工程和特征学习"><a href="#数据预处理、特征工程和特征学习" class="headerlink" title="数据预处理、特征工程和特征学习"></a>数据预处理、特征工程和特征学习</h2><p>神经网络的数据预处理</p><ol><li><p>向量化</p><p> 神经网络所有输入和目标都必须是浮点数张量。无论处理什么数据（声音、图像还是文本），都必须首先将其转换为张量，称为数据向量化（data vectorization）。例如前面进行的one-hot编码。</p></li><li><p>值标准化</p><p> 在手写数字分类的例子中，开始时图像被编码为0-255范围内的整数，表示灰度值。将这一数据输入网络之前，你需要将其转换为float32格式并除255，这样就得到0-1范围内的浮点数。</p><p> 一般来说，取值相对较大的数据（比如多位整数，比网络权重初始值大很多）或异质数据（heterogenrous data，比如数据的一个特征在0-1范围内，另一个特征在100-200范围内)，输入到神经网络中是不安全的。可能会导致较大的梯度更新，进而导致较大的梯度更新，从而导致网络无法收敛。因此输入数据应该具有以下特征：</p><ol><li>取值较小：大部分应该在0-1范围内。</li><li>同质性（homogenous）所有特征取值都应在大致相同的范围内。 </li></ol></li><li><p>处理缺失值</p><p> 你的数据中有时可能会有缺失值。例如在房价预测例子中，第一个特征是人均犯罪率。如果不是所有样本都具有这个特征怎么办？</p><p> 一般来说，将缺失值设置为0是安全的，只要0不是一个有意义的值。网络能够从数据总学到0意味缺失数据，并且会忽略这个值。</p><p> 注意：如果测试数据中有缺失值，而网络是在没有缺失值的数据上进行训练的，那么网络不可能学会忽略缺失值。这种情况下应该人为生成一些缺失项的训练样本，多次复制一些训练样本，然后深处测试数据中可能缺失的某些特征。</p></li></ol><h2 id="特征工程（feature-engineering）"><a href="#特征工程（feature-engineering）" class="headerlink" title="特征工程（feature engineering）"></a>特征工程（feature engineering）</h2><p>特征工程指将数据输入模型之前，利用自己关于数据和机器学习算法的知识对数据进行硬编码的变换，以改善模型的效果。多数情况下，一个机器学习无法从完全任意的数据中进行学习。呈现给模型的数据应该便于模型进行学习。</p><h2 id="过拟合与欠拟合"><a href="#过拟合与欠拟合" class="headerlink" title="过拟合与欠拟合"></a>过拟合与欠拟合</h2><p>机器学习的根本问题是优化和泛化之间的对立。优化(optimization)是指调节模型以在训练数据上得到最佳性能，而泛化(generalization)是指训练好的模型在前所未见的数据上的性能好坏。机器学习的目的是去的良好的泛化，但你无法控制泛化，只能基于训练数据调节模型。</p><p>训练开始时，优化和泛化是相关的：训练数据上损失越小，测试数据上的损失也越小，这时的模型是欠拟合（unfit）的。但在训练数据上迭代一定次数之后，泛化不再提高，验证指标先是不变，然后开始变差，模型开始过拟合。</p><p>为了防止模型从训练数据中学到错误且无关紧要的模式：</p><ul><li>最优解决方式是获得更多训练数据。模型训练数据越多，泛化能力自然越好。</li><li>如果无法获得更多数据，次优解决方法是调节模型允许存储的信息量，对模型允许存储的信息进行约束。</li><li>如果一个网络只能记住几个模式，那么优化过程会迫使模型集中学习最重要的模式，这样可以得到更好的泛化。</li></ul><p>这种降低过拟合的方法叫做正则化（regularization）。以下为几种最常见的正则化方法。</p><h2 id="减小网络大小"><a href="#减小网络大小" class="headerlink" title="减小网络大小"></a>减小网络大小</h2><p>防止过拟合最简单的方法就是减小模型大小，即减少模型中可学习的参数个数。在深度学习中，模型中可学习参数个数通常被称为模型容量(capacity)。从直观上看，参数更多的模型拥有更大的记忆容量(memorization capacity)，因此能够在训练样本和目标之间完美映射，但这种映射没有任何泛化能力。深度学习模型通常都擅长数据拟合，但真正的挑战在于泛化而不是拟合。</p><p>相反，如果网络的记忆容量有限，则无法轻松学会这种映射。所以为了让损失最小化，网络必须学会对目标具有很强的预测能力的压缩表示。需要记住的是：你的模型应该具有足够多的参数，以防止欠拟合，即模型应避免记忆资源不足。【在容量过大与容量不足之间找到平衡】</p><p>然而整个过程必须评估一些列不同的网络架构，以便为数据找到最佳的模型大小，一般工作流程是开始时选择较小的层和参数，然后逐渐增加层的大小或新层，直到这种增加对验证损失的影响变得很小。</p><p>对电影评论分类做实验。【分别用原始模型、容量更小模型和容量更大模型进行实验】</p><h2 id="添加权重正则化"><a href="#添加权重正则化" class="headerlink" title="添加权重正则化"></a>添加权重正则化</h2><p>这里的简单模型（simple model）指参数值分布的熵更小的模型（或参数更少的模型）因此常见的降低过拟合方法是强制让模型权重只能取较小的值，从而限制模型的复杂度，这使得权重分布更加规则。称为权重正则化（weight regularization）。其实现方法是向网络损失函数中添加较大权重值相关的成本（cost）</p><ul><li>L1 正则化：添加的成本与权重系数的绝对值【权重的L1范数】成正比</li><li>L2正则化：添加的成本与权重系数的平方【权重L2范数】成正比。神经网络中L2正则化也叫权重衰减。</li></ul><h2 id="添加dropout正则化"><a href="#添加dropout正则化" class="headerlink" title="添加dropout正则化"></a>添加dropout正则化</h2><p>dropout是神经网络最有效也是最常用的正则方法之一。对某一层使用dropout，就是在训练过程中随机将该层的一些输出特征舍弃（设置为0）。假设在训练过程中，某一层对给定输入样本的返回值应该是向量[0.2, 0.5, 1.3, 0.8, 1.1]，使用dropout后，该向量会有几个随机元素变为0。dropout的比率是被设为0的特征所占的比例，通常在0.2-0.5范围内。测试时没有单元被舍弃，而该层的输出值需要按dropout比率缩小，因为这是比训练时有更多单元被激活，需要加以平衡。</p><h1 id="机器学习的通用工作流程-suspend"><a href="#机器学习的通用工作流程-suspend" class="headerlink" title="机器学习的通用工作流程[suspend]"></a>机器学习的通用工作流程[suspend]</h1><p>该章介绍用于解决任何机器学习问题的通用模版。</p><h2 id="问题定义，收集数据集"><a href="#问题定义，收集数据集" class="headerlink" title="问题定义，收集数据集"></a>问题定义，收集数据集</h2><ul><li>你输入的数据是什么？你要预测什么？只有拥有可训练的数据，才能预测某件事情。【数据+标注】</li><li>你面对的是什么问题？是二分类、多分类、标量回归、向量回归还是多标签问题。确定问题类型可以更好的选择模型架构等。</li></ul><p>机器学习只能用来记忆训练数据中存在的模式。你只能识出曾经见过的东西。</p><h2 id="选择衡量指标"><a href="#选择衡量指标" class="headerlink" title="选择衡量指标"></a>选择衡量指标</h2><p>要控制一件事情，就需要观察它。要取得成功，必须给出成功的定义。衡量成功的指标将决定你选择损失函数，即模型需要优化什么。</p><p>例如：对于平衡分类问题（每个类别的可能性相同），精度和接受者操作特征曲线下面积（area under the reveiver operating characteristic curve, ROC AUC)是常用的指标。对于排序问题或多标签问题，可以使用平均准确率均值(mean average precision)。自定义衡量成功的指标很常见。可以参考Kaggle网站上的数据科学竞赛，给出了各种问题的评估指标。</p><h2 id="确定评估方法"><a href="#确定评估方法" class="headerlink" title="确定评估方法"></a>确定评估方法</h2><p>一旦明确了目标，必须确定如何衡量当前进展。</p><ul><li>留出验证集。数据量大的时候可以选择这种方法。</li><li>K折交叉验证。如果留出的验证样本太少，无法保证可靠性，可以选择这种方法。</li><li>重复K折验证。如果留出验证的样本量太少，同时模型评估又需要非常准确，可以使用这个方法。</li></ul><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>首先需要将数据格式化，使其可以输入到机器学习模型中。</p><ul><li>将数据格式化为张量。</li><li>张量取值通常应该缩放为较小的值。</li><li>不同特征具有不同取值范围（异质数据），那么应该将数据标准化。</li><li>可能需要做特征工程，尤其对小数据问题。</li></ul><h2 id="开发比基准更好的模型"><a href="#开发比基准更好的模型" class="headerlink" title="开发比基准更好的模型"></a>开发比基准更好的模型</h2><p>该阶段的目标是统计功效（statistical power)，即开发一个小模型，能够打败纯随机的基准（dumb baseline）。比如，MNIST数字分类的例子中</p><p>如果尝试了多种合理架构后仍无法打败随机基准，那么可能问题的答案不在数据中。记住以下两种假设。</p><ul><li>假设输出是可以根据输出进行预测的。</li><li>假设可用数据包含足够多的信息，足以学习输入和输出之间的关系。</li></ul><p>如果一切顺利，需要选择以下三个关键参数构建第一个工作模型</p><ul><li>最后一层激活。对网络输出进行有效的限制。例如IMDB分类例子在最后一层使用sigmoid，回归则没有使用激活。</li><li>损失函数。匹配你所要解决的问题。例如，IMDB使用binary_crossentropy、回归使用mse等。</li><li>优化配置。使用什么优化器？学习率多少？多数情况下，使用rmsprop机器默认学习率是稳妥的。</li></ul><p>关于损失函数的选择，需要注意：直接优化衡量问题成功的指标不一定是可行的，有时难以转化为损失函数，损失函数需要只有在小批量数据时即可计算，而且必须是可微的。例如广泛使用的分类指标ROC AUC就不能被直接优化。因此在分类任务中，常见的做法是优化ROC AUC的替代指标，比如交叉熵。一般来说你认为交叉熵越小，ROC AUC越大。</p><h2 id="扩大模型规模：开发过拟合的模型"><a href="#扩大模型规模：开发过拟合的模型" class="headerlink" title="扩大模型规模：开发过拟合的模型"></a>扩大模型规模：开发过拟合的模型</h2><p>一旦得到具有统计功效的模型，问题就变成了：模型是否足够强大？是否具有足够多的层和参数来对问题进行建模。例如，只有单个隐藏层且只有两个单元的网络，在MINST问题上具有统计功效，但并不足以很好的解决问题。请记住，机器学习中无处不在的对立是优化和泛化的对立，理想的模型是刚好在欠拟合和过拟合的界线上，在容量不足和容量多大的界线上。</p><p>要搞清楚需要多大的模型，就必须开发一个过拟合模型。</p><ol><li>添加更多的层。</li><li>让每一层变得更大。</li><li>训练更多轮次。</li></ol><p>要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模型在验证数据集上性能开始下降，那么出现了过拟合。</p><h2 id="模型正则化与调节超参数"><a href="#模型正则化与调节超参数" class="headerlink" title="模型正则化与调节超参数"></a>模型正则化与调节超参数</h2><p>这是最耗时间：你将不断调节模型、训练、在验证数据上评估（不是测试数据）。再次调节模型让，然后重复，直到模型打到最佳性能。</p><ul><li>添加dropout。</li><li>尝试不不同的架构：增加或减少层数。</li><li>添加L1 和 / 或 L2正则化。</li><li>尝试不同的超参数，以找到最佳配置。</li><li>反复做特征工程：添加新特征或删除没有信息量的特征。</li></ul><p>每次使用验证过程的反馈来调节模型，都会有相关验证过程信息泄露到模型中。如果只重复几次，那么无关紧要；如果系统性迭代多次，最终会导致模型对验证过程过拟合。即会降低验证过程中的可靠性。</p><p>一旦开发出令人满意的模型配置，就可以在所有可用数据（训练数据+验证数据）上训练最终的生产模型，然后在测试集上最后评估一次。如果测试集上的性能比验证集上差很多，那么可能意味你的验证流程不可靠，或者在调节模型参数时验证机数据上出现来过拟合。这种情况下可能需要更换更可靠的评估方法，比如重复的K折验证。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>定义问题与要训练的数据。收集这些数据，有需要的应该标签进行数据标注。</li><li>选择衡量问题成功的指标。在验证数据上监控哪些指标。</li><li>确定评估方法：留出验证？K折验证？你应该将哪一部分数据用于验证。</li><li>开发第一个比基准更好的模型，即具有统计功效的模型。</li><li>开发过拟合模型。</li><li>基于模型在验证数据上的性能来进行模型正则化与调节超参数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-深度学习基础&quot;&gt;&lt;a href=&quot;#1-深度学习基础&quot; class=&quot;headerlink&quot; title=&quot;1. 深度学习基础&quot;&gt;&lt;/a&gt;1. 深度学习基础&lt;/h1&gt;&lt;h1 id=&quot;简单概述&quot;&gt;&lt;a href=&quot;#简单概述&quot; class=&quot;headerlink&quot; title=&quot;简单概述&quot;&gt;&lt;/a&gt;简单概述&lt;/h1&gt;&lt;p&gt;深度学习应用于计算机视觉的两个关键思想：卷积神经网络和反向传播。&lt;/p&gt;
&lt;p&gt;总的来说，以下三种力量在推动机器学习。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;硬件&lt;/p&gt;
&lt;p&gt; CPU以及GPU上的大量投入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据集和基准&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;算法上的改进&lt;/p&gt;
&lt;p&gt; 在2009-2010年出现了几个简单但很重要的算法改进，可以实现更好的梯度传播。以及更先进的有助于梯度传播的方法：批标准化，残差连接和深度可分离卷积。&lt;/p&gt;
&lt;p&gt; 更好的神经层激活函数&lt;/p&gt;
&lt;p&gt; 更好的权重初始化方案&lt;/p&gt;
&lt;p&gt; 更好的优化方案&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Machine-Learning" scheme="https://superming.life/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Programming Assignment:Deques and Randomized Queues</title>
    <link href="https://superming.life/2020/11/16/Programming%20Assignment%20Deques%20and%20Randomized%20Queues/"/>
    <id>https://superming.life/2020/11/16/Programming%20Assignment%20Deques%20and%20Randomized%20Queues/</id>
    <published>2020-11-16T01:12:52.000Z</published>
    <updated>2021-02-01T16:00:39.894Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Programming-Assignment-Deques-and-Randomized-Queues"><a href="#Programming-Assignment-Deques-and-Randomized-Queues" class="headerlink" title="Programming Assignment: Deques and Randomized Queues"></a>Programming Assignment: Deques and Randomized Queues</h1><p>Assignment Link: <a href="https://coursera.cs.princeton.edu/algs4/assignments/queues/specification.php">https://coursera.cs.princeton.edu/algs4/assignments/queues/specification.php</a></p><hr><p><strong><u>Write a generic data type for a deque and a randomized queue.</u></strong> </p><p><strong>The goal of this assignment is to implement elementary data structures using arrays and linked lists, and to introduce you to generics and iterators.</strong></p><blockquote><p>目标1: Linked lists和arrays的应用</p><p>目标2: 范型和迭代器的应用</p></blockquote><a id="more"></a><h2 id="Dequeue"><a href="#Dequeue" class="headerlink" title="Dequeue"></a>Dequeue</h2><p><strong>Dequeue.</strong> A <em>double-ended queue</em> or <em>deque</em> (pronounced “deck”) is a generalization of a stack and a queue that supports adding and removing items from either the front or the back of the data structure. Create a generic data type <code>Deque</code> that implements the following API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// construct an empty deque</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Deque</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// is the deque empty?</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// return the number of items on the deque</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// add the item to the front</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item item)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// add the item to the back</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item item)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// remove and return the item from the front</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Item <span class="title">removeFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// remove and return the item from the back</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// return an iterator over items in order from front to back</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// unit testing (required)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><em>Corner cases.</em> Throw the specified exception for the following corner cases:</p><ul><li>Throw an <code>IllegalArgumentException</code> if the client calls either <code>addFirst()</code> or <code>addLast()</code> with a <code>null</code> argument.</li><li>Throw a <code>java.util.NoSuchElementException</code> if the client calls either <code>removeFirst()</code> or <code>removeLast</code> when the deque is empty.</li><li>Throw a <code>java.util.NoSuchElementException</code> if the client calls the <code>next()</code> method in the iterator when there are no more items to return.</li><li>Throw an <code>UnsupportedOperationException</code> if the client calls the <code>remove()</code> method in the iterator.</li></ul><p><em>Unit testing.</em> Your <code>main()</code> method must call directly every public constructor and method to help verify that they work as prescribed (e.g., by printing results to standard output).</p><p><em>Performance requirements.</em> <u>Your deque implementation must support each deque operation (including construction) in <em>constant worst-case time</em>.</u> A deque containing <em>n</em> items must use at most 48<em>n</em> + 192 bytes of memory. Additionally, your iterator implementation must support each operation (including construction) in <em>constant worst-case time</em>.</p><p><strong>Implementation</strong></p><blockquote><p>双端队列使用链表更为合适。且题目要求使用常数时间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* *****************************************************************************</span></span><br><span class="line"><span class="comment"> *  Name: Alen Zhang</span></span><br><span class="line"><span class="comment"> *  Date: 2020.11.15</span></span><br><span class="line"><span class="comment"> *  Description: Deque implementation.</span></span><br><span class="line"><span class="comment"> **************************************************************************** */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> Node last;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Item item;</span><br><span class="line">        Node next;</span><br><span class="line">        Node pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// construct an empty deque</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Deque</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is the deque empty?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.size == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return the number of items on the deque</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add the item to the front</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;item is null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node();</span><br><span class="line">        newNode.item = item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            first = newNode;</span><br><span class="line">            last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode.next = first;</span><br><span class="line">            first.pre = newNode;</span><br><span class="line">            first = newNode;</span><br><span class="line">            newNode.pre = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add the item to the back</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;item is null&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node();</span><br><span class="line">        newNode.item = item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            first = newNode;</span><br><span class="line">            last = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">            newNode.pre = last;</span><br><span class="line">            last = newNode;</span><br><span class="line">            newNode.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove and return the item from the front</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Deque is empty&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Item returnItem = first.item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            first.pre = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove and return the item from the back</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Deque is empty&quot;</span>);</span><br><span class="line">        Item returnItem = last.item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            last = last.pre;</span><br><span class="line">            last.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> returnItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return an iterator over items in order from front to back</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node cur = first;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (cur != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;No more Objects in the deque&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Item returnItem = cur.item;</span><br><span class="line">            cur = cur.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Deque&lt;String&gt; deque = <span class="keyword">new</span> Deque&lt;String&gt;();</span><br><span class="line">        System.out.println(deque.size());</span><br><span class="line">        deque.addFirst(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        deque.addFirst(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        deque.addFirst(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        deque.addFirst(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        deque.addLast(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        System.out.println(deque.size());</span><br><span class="line">        Iterator&lt;String&gt; iter = deque.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Randomized-queue"><a href="#Randomized-queue" class="headerlink" title="Randomized queue"></a>Randomized queue</h2><p><strong>Randomized queue.</strong> A <em>randomized queue</em> is similar to a stack or queue, except that the item removed is chosen uniformly at random among items in the data structure. Create a generic data type <code>RandomizedQueue</code> that implements the following API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// construct an empty randomized queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedQueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// is the randomized queue empty?</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// return the number of items on the randomized queue</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// add the item</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// remove and return a random item</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// return a random item (but do not remove it)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Item <span class="title">sample</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// return an independent iterator over items in random order</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="comment">// unit testing (required)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><em>Iterator</em>. Each iterator must return the items in uniformly random order. The order of two or more iterators to the same randomized queue must be <em>mutually independent</em>; each iterator must maintain its own random order.</p><p><em>Corner cases.</em> Throw the specified exception for the following corner cases:</p><ul><li>Throw an <code>IllegalArgumentException</code> if the client calls <code>enqueue()</code> with a <code>null</code> argument.</li><li>Throw a <code>java.util.NoSuchElementException</code> if the client calls either <code>sample()</code> or <code>dequeue()</code> when the randomized queue is empty.</li><li>Throw a <code>java.util.NoSuchElementException</code> if the client calls the <code>next()</code> method in the iterator when there are no more items to return.</li><li>Throw an <code>UnsupportedOperationException</code> if the client calls the <code>remove()</code> method in the iterator.</li></ul><p><em>Unit testing.</em> Your <code>main()</code> method must call directly every public constructor and method to verify that they work as prescribed (e.g., by printing results to standard output).</p><p><em>Performance requirements.</em> <u>Your randomized queue implementation must support each randomized queue operation</u> (besides creating an iterator) in <em>constant amortized time</em>. That is, any intermixed sequence of <em>m</em> randomized queue operations (starting from an empty queue) must take at most <em>cm</em> steps in the worst case, for some constant <em>c</em>. A randomized queue containing <em>n</em> items must use at most 48<em>n</em> + 192 bytes of memory. Additionally, <u>your iterator implementation must support operations <code>next()</code> and <code>hasNext()</code> in <em>constant worst-case time</em>; and construction in <em>linear time</em>;</u> you may (and will need to) use a linear amount of extra memory per iterator.</p><p><strong>Implementation</strong></p><blockquote><p>迭代器使用常数时间，Array满足要求。本题重点是每题元素是随机的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* *****************************************************************************</span></span><br><span class="line"><span class="comment"> *  Name: Alen Zhang</span></span><br><span class="line"><span class="comment"> *  Date: 2020.11.15</span></span><br><span class="line"><span class="comment"> *  Description: RandomizedQueue implementation</span></span><br><span class="line"><span class="comment"> **************************************************************************** */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// construct an empty randomized queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue = (Item[]) <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// is the randomized queue empty?</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (size == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return the number of items on the randomized queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add the item</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;Item is null&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (size == queue.length) &#123;</span><br><span class="line">            Item[] resizedQueue = (Item[]) <span class="keyword">new</span> Object[queue.length * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queue.length; i++)</span><br><span class="line">                resizedQueue[i] = queue[i];</span><br><span class="line">            queue = resizedQueue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue[size++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;The RandomizeQueue is empty&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> seed = StdRandom.uniform(<span class="number">0</span>, size);</span><br><span class="line"></span><br><span class="line">        Item returnItem = queue[seed];</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        queue[seed] = queue[size];</span><br><span class="line">        queue[size] = <span class="keyword">null</span>;<span class="comment">// Avoid loitering</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (queue.length &gt; <span class="number">4</span> &amp;&amp; size &lt; queue.length / <span class="number">4</span>) &#123;</span><br><span class="line">            Item[] resizedQueue = (Item[]) <span class="keyword">new</span> Object[queue.length / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                resizedQueue[i] = queue[i];</span><br><span class="line">            &#125;</span><br><span class="line">            queue = resizedQueue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnItem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a random item (but do not remove it)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">sample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;The RandomizeQueue is empty&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> queue[StdRandom.uniform(<span class="number">0</span>, size)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return an independent iterator over items in random order</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomIterator(queue, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Item[] iteratorQueue;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> iteratorIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RandomIterator</span><span class="params">(Item[] queue, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">            iteratorQueue = (Item[]) <span class="keyword">new</span> Object[size];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iteratorQueue.length; i++) &#123;</span><br><span class="line">                iteratorQueue[i] = queue[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; iteratorQueue.length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> swapIndex = StdRandom.uniform(j + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                Item temp = iteratorQueue[j];</span><br><span class="line">                iteratorQueue[j] = iteratorQueue[swapIndex];</span><br><span class="line">                iteratorQueue[swapIndex] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (iteratorIndex &lt; iteratorQueue.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">&quot;Queue is empty&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Item item = iteratorQueue[iteratorIndex];</span><br><span class="line">            iteratorIndex++;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RandomizedQueue&lt;String&gt; queue = <span class="keyword">new</span> RandomizedQueue&lt;&gt;();</span><br><span class="line">        queue.enqueue(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.enqueue(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        queue.enqueue(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        queue.enqueue(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        queue.enqueue(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        queue.dequeue();</span><br><span class="line">        Iterator&lt;String&gt; iterO = queue.iterator();</span><br><span class="line">        Iterator&lt;String&gt; iter1 = queue.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterO.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterO.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">while</span> (iter1.hasNext()) &#123;</span><br><span class="line">            System.out.println(iter1.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p><strong>Client.</strong> Write a client program <code>Permutation.java</code> that takes an integer <em>k</em> as a command-line argument; reads a sequence of strings from standard input using <code>StdIn.readString()</code>; and prints exactly <em>k</em> of them, uniformly at random. Print each item from the sequence at most once.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">~/Desktop/queues&gt;</span><span class="bash"> cat distinct.txt</span></span><br><span class="line">A B C D E F G H I</span><br><span class="line"></span><br><span class="line"><span class="meta">~/Desktop/queues&gt;</span><span class="bash"> java Permutation 3 &lt; distinct.txt</span></span><br><span class="line">C</span><br><span class="line">G</span><br><span class="line">A</span><br><span class="line"></span><br><span class="line"><span class="meta">~/Desktop/queues&gt;</span><span class="bash"> java Permutation 3 &lt; distinct.txt</span></span><br><span class="line">E</span><br><span class="line">F</span><br><span class="line">G</span><br></pre></td></tr></table></figure><p>Your program must implement the following API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><em>Command-line argument.</em> You may assume that 0 ≤ <em>k</em> ≤ <em>n</em>, where <em>n</em> is the number of string on standard input. Note that you are not given <em>n</em>.</p><p><em>Performance requirements.</em> The running time of <code>Permutation</code> must be linear in the size of the input. You may use only a constant amount of memory plus either one <code>Deque</code> or <code>RandomizedQueue</code> object of maximum size at most <em>n</em>. (For an extra challenge and a small amount of extra credit, use only one <code>Deque</code> or <code>RandomizedQueue</code> object of maximum size at most <em>k</em>.)</p><p><strong>Implementation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* *****************************************************************************</span></span><br><span class="line"><span class="comment"> *  Name: Alen Zhang</span></span><br><span class="line"><span class="comment"> *  Date: 2020.11.15</span></span><br><span class="line"><span class="comment"> *  Description: </span></span><br><span class="line"><span class="comment"> **************************************************************************** */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RandomizedQueue&lt;String&gt; queue = <span class="keyword">new</span> RandomizedQueue&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> size = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            queue.enqueue(StdIn.readString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(queue.dequeue());</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Programming-Assignment-Deques-and-Randomized-Queues&quot;&gt;&lt;a href=&quot;#Programming-Assignment-Deques-and-Randomized-Queues&quot; class=&quot;headerlink&quot; title=&quot;Programming Assignment: Deques and Randomized Queues&quot;&gt;&lt;/a&gt;Programming Assignment: Deques and Randomized Queues&lt;/h1&gt;&lt;p&gt;Assignment Link: &lt;a href=&quot;https://coursera.cs.princeton.edu/algs4/assignments/queues/specification.php&quot;&gt;https://coursera.cs.princeton.edu/algs4/assignments/queues/specification.php&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Write a generic data type for a deque and a randomized queue.&lt;/u&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The goal of this assignment is to implement elementary data structures using arrays and linked lists, and to introduce you to generics and iterators.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目标1: Linked lists和arrays的应用&lt;/p&gt;
&lt;p&gt;目标2: 范型和迭代器的应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms，Part I：Stacks and Queues</title>
    <link href="https://superming.life/2020/11/15/Algorithms-StacksandQueues/"/>
    <id>https://superming.life/2020/11/15/Algorithms-StacksandQueues/</id>
    <published>2020-11-15T13:10:55.000Z</published>
    <updated>2021-02-01T16:00:47.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week-2-Stacks-and-Queues"><a href="#Week-2-Stacks-and-Queues" class="headerlink" title="Week 2-Stacks and Queues"></a>Week 2-Stacks and Queues</h1><p><strong>Generics.</strong> </p><p>An essential characteristic of collection ADTs is that we should be able to use them for any type of data. A specific Java mechanism known as generics enables this capability. The notation <Item> after the class name in each of our APIs defines the name Item as a type parameter, a symbolic placeholder for some concrete type to be used by the client. You can read Stack<Item> as “stack of items.” For example, you can write code such as</Item></Item></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">stack.push(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">...</span><br><span class="line">String next = stack.pop();</span><br></pre></td></tr></table></figure><p>to use a stack for String objects.</p><p>Without generics, we would have to define different APIs for each type of data we might need to collect ; with generics, we can use one API for all types of data, even types that are implemented in the future. Generics also lead to clear client code that is easy to understand and debug.</p><a id="more"></a><h1 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h1><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-13_at_7.03.48_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-13_at_7.03.48_PM.png"></p><p><strong>Subtext: Modular programming</strong></p><p>Completely separate the interface and the implementation.</p><p><strong>Benefits.</strong></p><ul><li>Client can’t know details of implementation ⇒ client has many implementation from which to choose.</li><li>Implementation can’t know details of client needs.</li><li>Design: create modular, reusable libraries.</li><li>Performance: use optimized implementation where it matters.</li></ul><p><strong>Client</strong>: program using operations defined in interface.</p><p><strong>Implementation</strong>: actual code implementation operations.</p><p><strong>Interface</strong>: description of data type, basic operations.</p><p><strong>Stack API</strong></p><p>Warmup API. Stack of strings data type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackOfStrings</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">StackOfStrings</span>()    //<span class="title">create</span> <span class="title">an</span> <span class="title">empty</span> <span class="title">stack</span>.</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">push</span>(<span class="title">String</span> <span class="title">item</span>)     //<span class="title">insert</span> <span class="title">a</span> <span class="title">new</span> <span class="title">string</span> <span class="title">onto</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class"><span class="title">String</span> <span class="title">pop</span>()    //<span class="title">remove</span> <span class="title">and</span> <span class="title">retrun</span> <span class="title">string</span> <span class="title">most</span> <span class="title">recently</span> <span class="title">added</span></span></span><br><span class="line"><span class="class"><span class="title">boolean</span> <span class="title">isEmpty</span>()     //<span class="title">is</span> <span class="title">the</span> <span class="title">stack</span> <span class="title">empty</span>?</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">size</span>()     //<span class="title">number</span> <span class="title">of</span> <span class="title">strings</span> <span class="title">on</span> <span class="title">the</span> <span class="title">stack</span></span></span><br></pre></td></tr></table></figure><p>Warmup client.   Reverse sequence of strings from standard input.</p><p><strong>Stack test client</strong></p><p>Read string from standard input.</p><ul><li>If string equals “-“, pop string from stack and point.</li><li>Otherwise, push string onto stack.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    StackOfString stack = <span class="keyword">new</span> StackOfStrings();</span><br><span class="line">    <span class="keyword">while</span>(!StdIn.isEmpty())&#123;</span><br><span class="line">      String s = StdIn.readString();</span><br><span class="line">      <span class="keyword">if</span>(s.equals(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">          StdOut.print(stack.pop());</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          stack.push(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Stack: Linked-list representation</strong></p><p>Maintain pointer to first node in a linked list; insert / remove from front.</p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-13_at_7.43.15_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-13_at_7.43.15_PM.png"></p><p><strong>Stack pop: Linked-list representation</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.32.40_AM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.32.40_AM.png"></p><p><strong>Stack push: linked-list implementation</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-13_at_7.48.47_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-13_at_7.48.47_PM.png"></p><p><strong>Stack: linked-list implementation in Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStackOfStrings</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        String item;</span><br><span class="line">        Node next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fisrt == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span></span>&#123;</span><br><span class="line">        Node oldfirst = first;</span><br><span class="line">        first = <span class="keyword">new</span> Node();</span><br><span class="line">        first.item = item;</span><br><span class="line">        first.next = oldfirst;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Stack: linked-list implementation performance</strong></p><p>Proposition.   </p><ol><li>Every operation takes constant time in the worst case.</li><li>A stack with N items uses ~ 40N bytes.</li></ol><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-15_at_4.40.38_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-15_at_4.40.38_PM.png"></p><p>Remark. This accounts for the memory for the stack. (but not the memory for strings themselves, which the client owns).</p><p><strong>Stack: Array implementation</strong></p><p>Array implementation of stack.</p><ul><li>Use array s[] to store N item on stack.</li><li>push(): add new item at s[N].</li><li>pop(): remove item from s[N - 1].</li></ul><p><strong>Defect</strong>: Stack overflows when N exceeds capacity. [stay tuned]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedCapacityStackOfStrings</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] s;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedCapacityStackOfStrings</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        s = <span class="keyword">new</span> String[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String item)</span></span>&#123;</span><br><span class="line">        s[N++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s[--N];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_9.27.40_AM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_9.27.40_AM.png"></p><h1 id="Resizing-arrays"><a href="#Resizing-arrays" class="headerlink" title="Resizing arrays"></a>Resizing arrays</h1><p><strong>Stack: resizing-array implementation</strong></p><p><strong>Q: How to grow and shrink array?</strong></p><p>First try.</p><ul><li>push(): increase size of array s[] by 1.</li><li>pop(): decrease size of array s[] by 1.</li></ul><p>Too expensive.</p><ul><li>Need to copy all items to a new array.</li><li>Inserting first N items takes time proportional to 1 + 2 + … + N ~ N ^ 2 / 2.[infeasible for large N]</li></ul><p>Challenge. Ensure that array resizing happens infrequently.</p><p><strong>Improvements.</strong></p><p><strong>Q: How to grow array?</strong></p><p>A: If array if full, create a new array of twice the size, and copy items.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResizingArrayStackOfString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    s = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span> <span class="params">(String item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(N == s.length)</span><br><span class="line">        resize(<span class="number">2</span> * s.length);</span><br><span class="line">    s[N++] = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span> <span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">    String[] copy = <span class="keyword">new</span> String[capacity];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        copy[i] = s[i];</span><br><span class="line">    s = copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Consequence</strong>: Inserting first N items takes time proportional to N(not N^2).</p><p><strong>Q: How to shrink array?</strong></p><p><strong>First try.</strong></p><ul><li>push()r: double size of array s[] when array is full.</li><li>pop(): halve size of array s[] when array is one-half full.</li></ul><p>Too expensive in worst case.</p><ul><li>Consider push-pop-push-pop… sequence when array is full.</li><li>Each operation takes time proportional to N.</li></ul><p><strong>Efficient solution.</strong></p><ul><li>push():  double size of array s[] when array is full.</li><li>pop():  halve size of array s[] when array if one-quarter full.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String item = s[--N];</span><br><span class="line">    s[N] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(N &gt; <span class="number">0</span> &amp;&amp; N == s.length / <span class="number">4</span>)</span><br><span class="line">        resize(s.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Invariant.  Array is between 25% full and 100% full.</p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.12.12_AM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.12.12_AM.png"></p><p><strong>Stack resizing-array implementation: performance</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.19.54_AM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.19.54_AM.png"></p><p><strong>Stack resizing-array implementation: memory usage</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.20.31_AM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_11.20.31_AM.png"></p><p><strong>Stack implementations: resizing array vs linked list</strong></p><p>Tradeoffs. </p><p>Can implement a stack with either resizing array or linked list; client can use interchangeably. Which one is better?</p><p><strong>Linked-List implementation</strong></p><ul><li>Every operation takes <strong>constant</strong> time in the <strong>worst case.</strong></li><li>Uses extra time and space to deal with the links.</li></ul><p><strong>Resizing-array implementation</strong></p><ul><li>Every operation takes constant <strong>amortized</strong> [摊销] time. [resize the array]</li><li>Less wasted space.</li></ul><p>Quiz:</p><p>Suppose that, starting from an empty data structure, we perform n push operations in our resizing-ar</p><p>ray implementation of a stack. How many times is the resize() method called?</p><p><strong>logarithmic [对数]</strong></p><p>Others:</p><p><strong>Loitering</strong>.</p><p>Java’s garbage collection policy is to reclaim the memory associated with any objects that no longer be accessed. Which means an object can’t be garbage as long as it’s reachable.    If you simply change your index with —N but do not nullify a[N], you will keep a reference to that object, preventing its garbage collection even if the client code does not reference that object any longer.</p><h1 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h1><p><strong>Queue API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueOfStrings</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">QueueOfStrings</span>()    //<span class="title">create</span> <span class="title">an</span> <span class="title">empty</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">enqueue</span>(<span class="title">String</span> <span class="title">item</span>)  //<span class="title">insert</span> <span class="title">a</span> <span class="title">new</span> <span class="title">string</span> <span class="title">onto</span> <span class="title">queue</span></span></span><br><span class="line"><span class="class"><span class="title">String</span> <span class="title">dequeue</span>()  //<span class="title">remove</span> <span class="title">and</span> <span class="title">return</span> <span class="title">the</span> <span class="title">String</span> <span class="title">least</span> <span class="title">recently</span> <span class="title">added</span></span></span><br><span class="line"><span class="class"><span class="title">boolean</span> <span class="title">isEmpty</span>()  //<span class="title">is</span> <span class="title">the</span> <span class="title">queue</span> <span class="title">empty</span></span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">size</span>()   //<span class="title">number</span> <span class="title">of</span> <span class="title">strings</span> <span class="title">on</span> <span class="title">the</span> <span class="title">queue</span></span></span><br></pre></td></tr></table></figure><p><strong>Linked-list representation</strong></p><p>Maintain pointer to first and last nodes in a linked list;</p><p>insert / remove from opposite ends.</p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.12.10_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.12.10_PM.png"></p><p><strong>Queue dequeue: linked-list implementation</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.13.02_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.13.02_PM.png"></p><p>Remark. Identical code to linked-list stack pop()</p><p><strong>Queue enqueue: linked-list implementation</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.15.36_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.15.36_PM.png"></p><p>Java implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueueOfStrings</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first, last;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="comment">/* same as in StackOfString */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(String item)</span></span>&#123;</span><br><span class="line">        Node oldlast = last;</span><br><span class="line">        last = <span class="keyword">new</span> Node();</span><br><span class="line">        last.item = item;</span><br><span class="line">        last.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">            first = last;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            oldlast.next = last;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String item = first.item;</span><br><span class="line">        first = first.next;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Queue: resizing array implementation</strong></p><p>Array implementation of a queue.</p><ul><li>Use array q[] to store items in queue.</li><li>enqueue(): add new item at q[tail].</li><li>dequeue(): remove item from q[head].</li><li>Update head and tail modulo the capacity.</li><li>Add resizing array.</li></ul><p><strong>Quiz:</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.42.16_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_12.42.16_PM.png"></p><h1 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a><strong>Generics</strong></h1><p><strong>Parameterized Stack</strong></p><p>Situation:</p><p>We implemented: StackOfStrings.</p><p>We also want: StackOfURLs, StackOfInts. StackOfVans, …</p><p>Attempt 1. Implement a separate stack class for each type.</p><ul><li>Rewrite code is tedious and error-prone.</li><li>Maintaining cut-and-pasted code is tedious and error-prone.</li></ul><p>Attempt 2. Implement a stack with items of type Object.</p><ul><li>Casting is required in client. [ugly code]</li><li>Casting is error-prone: run-time error if types <strong>mismatch</strong>.</li></ul><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.15.37_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.15.37_PM.png"></p><p>Attempt 3. Java generics.</p><ul><li>Avoid casting in client.</li><li>Discover type mismatch errors at compile-time instead of run-time.</li></ul><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.14.56_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.14.56_PM.png"></p><p>Guiding principles. Welcome compile-time errors; avoid run-time errors.</p><p><strong>Generic stack: linked-list implementation</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.17.23_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.17.23_PM.png"></p><p><strong>Generic stack: array implementation</strong></p><p><img src="/2020/11/15/Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.17.51_PM.png" alt="Algorithms-StacksandQueues/Screen_Shot_2020-11-14_at_2.17.51_PM.png"></p><p><strong>Generic data types</strong></p><p>Q: what to do about primitive types?</p><p>Wrapper type.</p><ul><li>Each primitive type has a <strong>wrapper</strong> object type.[ Integer is wrapper type for int ]</li></ul><p>Autoboxing.</p><p>Automatic cast between a primitive type and its wrapper.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">s.push(<span class="number">17</span>);  <span class="comment">//s.push(Integer.valueOf(17);</span></span><br><span class="line"><span class="keyword">int</span> a = s.pop();  <span class="comment">//int a = s.pop().intValue();</span></span><br></pre></td></tr></table></figure><p>Bottom line. Client code can use generic stack for any type of data.</p><h1 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h1><p><strong>Design challenge</strong>. Support iteration over stack items by client, without revealing the internal representation of the stack.</p><p>Java solution. Make stack implement the java.lang.Iterable interface</p><p>Q. What’s an Iterable?</p><p>A. Has a method that returns an Iterator.</p><p>A. Has method hasNext() and next().</p><p>Q. Why make data structures Iterable?</p><p>A. <strong>Java support elegant client code.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iterable interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterator interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">  ****<span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equivalent code(long hand)</span></span><br><span class="line">Iterator&lt;String&gt; i = stack.iterator();</span><br><span class="line"><span class="keyword">while</span>(i.hasNext())&#123;</span><br><span class="line">    String s = i.next();</span><br><span class="line">    StdOut.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;foreach&quot;statement(shorthand)</span></span><br><span class="line"><span class="keyword">for</span>(String s : stack)</span><br><span class="line">    StdOut.println(s);</span><br></pre></td></tr></table></figure><p>关于Java的迭代器：<Java 编程思想 p226></Java></p><p>任何容器类，必须要有某种方式可以插入元素并将他再次返回。毕竟，持有事物是容器最基本的工作。对于List，add() 是插入元素的方法之一，而get()是取出元素方式之一。</p><p>如何才能不重写代码，就可以应用于不同该类型的容器？</p><p>迭代器（设计模式），迭代器是一个对象，它的工作是遍历并选择序列中的对象，而客户端程序员不必知道或关心该序列底层的结构。此外，迭代器通常被成为“轻量级对象”，因为创建他的代价小。</p><p><strong>Stack iterator: Linked-list implementation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>&#123;  <span class="keyword">return</span> current != <span class="keyword">null</span>;&#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// throw UnsupportedozperationException</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;  <span class="comment">/* not supported */</span>&#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// throw NoSuchElementException if no more iterms in iteration</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span></span>&#123;</span><br><span class="line">              Item item = current.item;</span><br><span class="line">              current = current.next;</span><br><span class="line">              <span class="keyword">return</span> item;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Stack iterator: Array implementation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReverseArrayIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> i = N;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;  <span class="keyword">return</span> i &gt; <span class="number">0</span>;  &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>  </span>&#123; <span class="comment">/* not support */</span> &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span>    </span>&#123;  <span class="keyword">return</span> s[--i];  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>It free us to switch to a totally different representation without having to change any client code. More important, taking the client’s point of view, it allows clients to use iteration without having to know any details of the class implementation.</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Week-2-Stacks-and-Queues&quot;&gt;&lt;a href=&quot;#Week-2-Stacks-and-Queues&quot; class=&quot;headerlink&quot; title=&quot;Week 2-Stacks and Queues&quot;&gt;&lt;/a&gt;Week 2-Stacks and Queues&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Generics.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;An essential characteristic of collection ADTs is that we should be able to use them for any type of data. A specific Java mechanism known as generics enables this capability. The notation &lt;Item&gt; after the class name in each of our APIs defines the name Item as a type parameter, a symbolic placeholder for some concrete type to be used by the client. You can read Stack&lt;Item&gt; as “stack of items.” For example, you can write code such as&lt;/Item&gt;&lt;/Item&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Stack&amp;lt;String&amp;gt; stack = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack.push(&lt;span class=&quot;string&quot;&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String next = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;to use a stack for String objects.&lt;/p&gt;
&lt;p&gt;Without generics, we would have to define different APIs for each type of data we might need to collect ; with generics, we can use one API for all types of data, even types that are implemented in the future. Generics also lead to clear client code that is easy to understand and debug.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Machine-Learning Andrew Ng</title>
    <link href="https://superming.life/2020/11/01/MachineLearning-Week1/"/>
    <id>https://superming.life/2020/11/01/MachineLearning-Week1/</id>
    <published>2020-11-01T04:10:55.000Z</published>
    <updated>2021-02-01T16:00:55.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Machine-Learning-Week-1"><a href="#Machine-Learning-Week-1" class="headerlink" title="Machine-Learning - Week 1"></a>Machine-Learning - Week 1</h1><p>Github link: <a href="https://github.com/AlenZhang-Dev/MachineLearning-Stanford">https://github.com/AlenZhang-Dev/MachineLearning-Stanford</a></p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><p>Introduce the core idea of teaching a computer to learn concepts using data - without being explicitly programmed.</p><p><strong>linear regression with one variable.</strong> Discuss the application of linear regression to housing price prediction, present the notion of a cost function, also introduce the gradient descent method for learning.</p><p>The course require the knowledge of l<strong>inear algebra</strong> concepts.</p><a id="more"></a><hr><h2 id="What’s-Machine-Learning"><a href="#What’s-Machine-Learning" class="headerlink" title="What’s Machine Learning?"></a>What’s Machine Learning?</h2><p>Andrew NG: Machine Learning is the science of getting computers to learn, without being explicitly programmed.</p><ul><li>Grew out of work in AI</li><li>New capability for computers</li></ul><p>Examples:</p><ul><li>Database mining<ul><li>Large datasets from growth of automation/web</li><li>E.g., Web click data, medical records, biology, engineering</li></ul></li><li><p>Applications can’t program by hand.</p><ul><li>E.g., Autonomous helicopter, handwriting recognition, most of Natural Language Processing(NLP), Computer Vision.</li></ul></li><li><p>Self-customizing programs</p><p>  E.g., Amazon, Netflix product recommendations.</p></li><li><p>Understanding human learning(brain, real AI).</p></li></ul><p><strong>What’s Machine Learning?[Definition]</strong></p><p>Two definitions of Machine Learning are offered.</p><ul><li>Arthur Samuel described it as: <strong>“the field of study that gives computers the ability to learn without being explicitly programmed.”</strong> This is an older, informal definition.</li><li>Tom Mitchell provides a more modern definition: <strong>“A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.”</strong></li></ul><p>Examples:</p><p>playing checkers.</p><p>E = the experience of playing many games of checkers</p><p>T = the task of playing checkers.</p><p>P = the probability that the program will win the next game.</p><p>Suppose your email program watches which emails you do or do not mark as spam, and based on that learns how to better filter spam. Explain the E T P according to Tom Mitchell’s definiation.</p><p>E = Watching you label emails as spam or not spam.</p><p>T = Classify emails as spam or not spam.</p><p>P = The number(or fraction) of emails correctly classified as spam/not spam.</p><p>In general, any machine learning problem can be assigned to one of two broad classifications:</p><p><strong>Supervised learning and Unsupervised learning.</strong></p><p>Machine Learning algorithms </p><ul><li>Supervised Learning</li><li>Unsupervised Learning</li></ul><p>Others: Reinforcement Learning, recommender systems.</p><h2 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h2><p>In supervised learning, we are given a data set and already know what our correct output should look like, <strong>having the idea that there is a relationship between the input and the output.</strong></p><p>Supervised learning problems are categorized into “<strong>regression</strong>“ and “<strong>classification</strong>“ problems. </p><p>In a regression problem, we are trying to predict results within a <strong>continuous output</strong>, meaning that we are trying to map input variables to some continuous function. </p><p>In a classification problem, we are instead trying to predict results in a <strong>discrete output[离散输出]</strong>. In other words, we are trying to map input variables into discrete categories.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_3.50.40_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_3.50.40_PM.png"></p><p>Regression exp</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_3.51.03_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_3.51.03_PM.png"></p><p>Classification</p><p><strong>Example 1:</strong></p><p>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</p><p>We could turn this example into a classification problem by instead making our output about whether the house “sells for more or less than the asking price.” Here we are classifying the houses based on price into two discrete categories.</p><p><strong>Example 2</strong>:</p><p>(a) Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</p><p>(b) Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</p><p>Practice：</p><p>You’re running a company, and you want to develop learning algorithms to address each of two problems. </p><p>Problem 1: You have a large inventory of identical items. You want to predict how many of these items will sell over the next 3 months.</p><p>Problem 2: You’d like software to examine individual customer accounts, and for each account decide if it has been hacked/compromised. Should you treat these as classification or as regression problems?</p><p>Answer: </p><p>Treat problem 1 as a regression problem, problem 2 as a classification problem.</p><p>Explain:</p><p>First one : we have thousand of items [Continuous]</p><p>Second one: 0 - not hacked, 1 - hacked.[Hacked or not, Discrete]</p><h2 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h2><p>Unsupervised learning is a type of machine learning that looks for previously undetected patterns in a data set with no pre-existing labels and with a minimum of human supervision.    —- Wikipedia</p><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p><p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p><p>With unsupervised learning there is no feedback based on the prediction results.</p><p><strong>Example:</strong></p><p>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p><p>Non-clustering: The “Cocktail Party Algorithm”, allows you to find structure in a chaotic environment. (i.e. identifying individual voices and music from a mesh of sounds at a <a href="https://en.wikipedia.org/wiki/Cocktail_party_effect">cocktail party</a>).</p><p>The Following examples using an unsupervised learning algorithm: </p><p>Given a set of news articles found on web, group them into sets of articles about the same stories.</p><p>Given a database of customer data, automatically discover market segments and group customers into different market segments.</p><h1 id="2-Model-and-Cost-Function"><a href="#2-Model-and-Cost-Function" class="headerlink" title="2. Model and Cost Function"></a>2. Model and Cost Function</h1><h3 id="Model-Representation"><a href="#Model-Representation" class="headerlink" title="Model Representation"></a>Model Representation</h3><p><strong>Notes:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.03.23_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.03.23_PM.png"></p><p>Linear regression model with only one variable[Also called univariate linear regression]</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.10.45_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.10.45_PM.png"></p><p><strong>Material:</strong></p><p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a <strong>hypothesis</strong>. </p><p>When the target variable that we’re trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem.</p><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><p><strong>Notes:</strong></p><p>How to choose the parameters?</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.17.14_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.17.14_PM.png"></p><p><strong>Material</strong>:</p><p>We can measure the accuracy of our hypothesis function by using a <strong>cost function</strong>. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x’s and the actual output y’s.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.06.02_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.06.02_PM.png"></p><p>MSE: the most common one used for regression problems.</p><p><a href="https://en.wikipedia.org/wiki/Mean_squared_error">Mean squared error</a></p><h2 id="Cost-Function-Intuition-I"><a href="#Cost-Function-Intuition-I" class="headerlink" title="Cost Function Intuition I"></a>Cost Function Intuition I</h2><p>1.Set the theta(0) to zero.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.58.03_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_6.58.03_PM.png"></p><p>2.The optimization objective for our learning algorithm is we want to choose the value of theta (1).  The Minimizes J(theat(1)).</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_7.39.12_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_7.39.12_PM.png"></p><p>Material:</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_7.39.36_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_7.39.36_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_7.39.52_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_7.39.52_PM.png"></p><h2 id="Cost-function-Intuition-II"><a href="#Cost-function-Intuition-II" class="headerlink" title="Cost function - Intuition II"></a>Cost function - Intuition II</h2><ol><li>Keep both two parameters of the cost function.</li></ol><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.42.52_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.42.52_PM.png"></p><p>The cost function may be look like below:</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.43.16_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.43.16_PM.png"></p><p>Contour plots / figure</p><p>A contour plot is a graph that contains many contour lines. A contour line of a two variable function has constant value at all points of same line. An example of such a graph is the one to the right below:</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.46.54_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.46.54_PM.png"></p><p>3 green x have the same cost.</p><p>When θ0=360 and θ1 = 0, the value of J(θ0, θ1) in the contour plot gets closer to the center thus reducing the cost function error. Now Giving our hypothesis function a slightly positive slope result in a better fit of the data.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.57.37_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_4.57.37_PM.png"></p><p>The graph above minimizes the cost function as much as possible and consequently, the result of θ1 and θ0 tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most ‘circle’.</p><h1 id="3-Parameter-Learning"><a href="#3-Parameter-Learning" class="headerlink" title="3. Parameter Learning"></a>3. Parameter Learning</h1><h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><p>The algorithm called gradient descent for <strong>minimizing the cost function j().</strong> </p><p>Gradient is a general algorithm.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.07.15_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.07.15_PM.png"></p><p>The outline of Gradient descent algorithm:</p><p>Understand the concept between Assignment and Truth assertion.</p><p>Simultaneous update both parameters.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.29.22_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.29.22_PM.png"></p><p><strong>Material:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.31.07_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.31.07_PM.png"></p><p>We will know that we have succeed when our cost function is at the very bottom of the pits in our graph. when its values is the minimum. The red arrows show the minimum points in the graph.</p><p>The way we do is by taking the derivative of our cost function. The slope of the tangent is the derivative at the point and it will give us a direction move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.31.16_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_8.31.16_PM.png"></p><h2 id="Gradient-Descent-Intuition"><a href="#Gradient-Descent-Intuition" class="headerlink" title="Gradient Descent Intuition"></a>Gradient Descent Intuition</h2><p>Apply gradient descent to minimize our squared cost function.</p><p>Gradient descent can converge to local minimum, even with the learning rate a fixed.</p><p>don’t need to change the a.</p><p>Explain the Gradient descent with one variable:</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.02.06_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.02.06_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.01.29_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.01.29_PM.png"></p><p>Features of Gradient descent:</p><p>When reach the bottom of our convex function, the derivative will always be 0, thus we get the settled <em>θ1.</em></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.01.42_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.01.42_PM.png"></p><h2 id="Gradient-Descent-For-Linear-Regression"><a href="#Gradient-Descent-For-Linear-Regression" class="headerlink" title="Gradient Descent For Linear Regression"></a>Gradient Descent For Linear Regression</h2><p>Simplify the function:</p><p>When we apply the Gradient descent algorithm with Linear Regression Model, we will derived a new form of the gradient descent equation.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_6.37.54_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_6.37.54_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.10.52_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.10.52_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.16.44_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.16.44_PM.png"></p><p>Convex function equals to Bowl shaped</p><p>“Batch” Gradient Descent.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.24.15_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-27_at_9.24.15_PM.png"></p><p>Material:</p><p>A new form of the gradient descent equation:</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_6.41.58_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_6.41.58_PM.png"></p><p>A single example of derivative.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_6.42.55_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_6.42.55_PM.png"></p><p>So this is simply gradient descent on the original cost function j. This method looks at every example in the entire training set on every step, which is called <strong>batch gradient descent.</strong> Note that, while gradient descent can be susceptible to <strong>local minima</strong> in general. the optimization problem we have posed here for linear regression has only on global, and no other local, optima; thus gradient descent always converges to the global minimum. </p><p>Indeed, j is a <strong>convex quadratic function</strong>. Here is an example of gradient descent as it run to minimize a quadratic function.</p><p><img src="/2020/11/01/MachineLearning-Week1/Untitled.png" alt="MachineLearning-Week1/Untitled.png"></p><p>The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x’s in the figure (joined by straight lines) mark the successive values of θ that gradient descent went through as it converged to its minimum.</p><p>Rating Test:</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.31.33_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.31.33_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.35.23_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.35.23_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.37.06_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.37.06_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_9.01.07_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_9.01.07_PM.png"></p><p>Choose C and D</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.53.44_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_8.53.44_PM.png"></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-28_at_9.09.25_PM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-28_at_9.09.25_PM.png"></p><p><a href="https://www.notion.so/1cd7ea007e554bc59178ca74776018d5">Answers</a></p><h1 id="4-Linear-Algebra-Review"><a href="#4-Linear-Algebra-Review" class="headerlink" title="4. Linear Algebra Review"></a>4. Linear Algebra Review</h1><h2 id="Matrices-and-Vectors"><a href="#Matrices-and-Vectors" class="headerlink" title="Matrices and Vectors"></a>Matrices and Vectors</h2><p>Matrix: Rectangular array of numbers.</p><p>Matrices are 2-dimensional arrays.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.28.31_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.28.31_AM.png"></p><p>Vector: An n x 1 matrix.</p><p>A vector is a matrix with one column and many rows.</p><p>So vectors are a <strong>subset</strong> of matrices.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.34.06_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.34.06_AM.png"></p><p><strong>Notation and terms[Essential]</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.40.18_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.40.18_AM.png"></p><p><strong>Matlab commands below:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% The ; denotes we are going back to a new row.</span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>; <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a vector </span></span><br><span class="line">v = [<span class="number">1</span>;<span class="number">2</span>;<span class="number">3</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the matrix A where m = rows and n = columns</span></span><br><span class="line">[m,n] = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% You could also store it this way</span></span><br><span class="line">dim_A = <span class="built_in">size</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Get the dimension of the vector v </span></span><br><span class="line">dim_v = <span class="built_in">size</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Now let&#x27;s index into the 2nd row 3rd column of matrix A</span></span><br><span class="line">A_23 = A(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="Addition-and-Scalar-Multiplication"><a href="#Addition-and-Scalar-Multiplication" class="headerlink" title="Addition and Scalar Multiplication"></a>Addition and Scalar Multiplication</h2><p><strong>Outline:</strong></p><p>Matrix addition and subtraction, and how to multiply a matrix by a number. SO called Scalar Multiplication.</p><p><strong>Matrix Addition:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.49.42_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.49.42_AM.png"></p><p><strong>Scalar Multiplication:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.51.49_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.51.49_AM.png"></p><p><strong>Combination of Operands:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.55.22_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_8.55.22_AM.png"></p><p><strong>Matlab command:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A and B </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>; <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">B = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize constant s </span></span><br><span class="line">s = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise addition works</span></span><br><span class="line">add_AB = A + B </span><br><span class="line"></span><br><span class="line"><span class="comment">% See how element-wise subtraction works</span></span><br><span class="line">sub_AB = A - B</span><br><span class="line"></span><br><span class="line"><span class="comment">% See how scalar multiplication works</span></span><br><span class="line">mult_As = A * s</span><br><span class="line"></span><br><span class="line"><span class="comment">% Divide A by s</span></span><br><span class="line">div_As = A / s</span><br><span class="line"></span><br><span class="line"><span class="comment">% What happens if we have a Matrix + scalar?</span></span><br><span class="line">add_As = A + s</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line">   <span class="number">1</span>   <span class="number">2</span>   <span class="number">4</span></span><br><span class="line">   <span class="number">5</span>   <span class="number">3</span>   <span class="number">2</span></span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line">   <span class="number">1</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">s =  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">add_AB =</span><br><span class="line">   <span class="number">2</span>   <span class="number">5</span>   <span class="number">8</span></span><br><span class="line">   <span class="number">6</span>   <span class="number">4</span>   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">sub_AB =</span><br><span class="line">   <span class="number">0</span>  <span class="number">-1</span>   <span class="number">0</span></span><br><span class="line">   <span class="number">4</span>   <span class="number">2</span>   <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mult_As =</span><br><span class="line">    <span class="number">2</span>    <span class="number">4</span>    <span class="number">8</span></span><br><span class="line">   <span class="number">10</span>    <span class="number">6</span>    <span class="number">4</span></span><br><span class="line"></span><br><span class="line">div_As =</span><br><span class="line">   <span class="number">0.50000</span>   <span class="number">1.00000</span>   <span class="number">2.00000</span></span><br><span class="line">   <span class="number">2.50000</span>   <span class="number">1.50000</span>   <span class="number">1.00000</span></span><br><span class="line"></span><br><span class="line">add_As =</span><br><span class="line">   <span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></span><br><span class="line">   <span class="number">7</span>   <span class="number">5</span>   <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="Matrix-Vector-Multiplication"><a href="#Matrix-Vector-Multiplication" class="headerlink" title="Matrix Vector Multiplication"></a>Matrix Vector Multiplication</h2><p>The number of columns of matrix must match the number of rows of vector.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.11.24_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.11.24_AM.png"></p><p>m x n matrix multiply n x 1 matrix [n-dimensional vector] = m-dimensional vector</p><h2 id="Matrix-Matrix-Multiplication"><a href="#Matrix-Matrix-Multiplication" class="headerlink" title="Matrix Matrix Multiplication"></a>Matrix Matrix Multiplication</h2><p><strong>Details:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.26.48_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.26.48_AM.png"></p><p><strong>Apply:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.37.41_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.37.41_AM.png"></p><p><strong>Matlab command:</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize a 3 by 2 matrix </span></span><br><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>; <span class="number">3</span>, <span class="number">4</span>;<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Initialize a 2 by 1 matrix </span></span><br><span class="line">B = [<span class="number">1</span>; <span class="number">2</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">% We expect a resulting matrix of (3 by 2)*(2 by 1) = (3 by 1) </span></span><br><span class="line">mult_AB = A*B</span><br><span class="line"></span><br><span class="line"><span class="comment">% Make sure you understand why we got that result</span></span><br><span class="line">A =</span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span></span><br><span class="line">     <span class="number">3</span>     <span class="number">4</span></span><br><span class="line">     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line"></span><br><span class="line">mult_AB =</span><br><span class="line">     <span class="number">5</span></span><br><span class="line">    <span class="number">11</span></span><br><span class="line">    <span class="number">17</span></span><br></pre></td></tr></table></figure><h2 id="Matrix-Multiplication-Properties"><a href="#Matrix-Multiplication-Properties" class="headerlink" title="Matrix Multiplication Properties"></a>Matrix Multiplication Properties</h2><p><strong>Not commutative</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.42.59_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.42.59_AM.png"></p><p><strong>Associative</strong></p><p>(A <em> B) </em> C = A <em> (B </em> C)</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.46.25_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.46.25_AM.png"></p><p><strong>Identity Matrix:</strong></p><p>The identity matrix of size n is the n x n square matrix <strong>with ones on the main diagonal and zeros elsewhere.<br>Details of Identity Matrix:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.55.37_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_9.55.37_AM.png"></p><h2 id="Inverse-and-Transpose"><a href="#Inverse-and-Transpose" class="headerlink" title="Inverse and Transpose"></a>Inverse and Transpose</h2><p>Start by how it relates to real numbers.</p><p><strong>Inverse Matrix:</strong></p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_10.07.41_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_10.07.41_AM.png"></p><ul><li>Matrices that don’t have an inverse are <strong>“singular” or “degenerate”</strong></li></ul><p>So how can we get the inverse matrix?</p><p>Sometimes you can compute inverses by hand but almost no one does that those day. It turns out there is very good <strong>numerical software</strong> for taking a matrix and computing.</p><p><strong>Matrix Transpose:</strong></p><p>The transpose of a matrix is an operator which flips a matrix over its diagonal.</p><p><img src="/2020/11/01/MachineLearning-Week1/Screen_Shot_2020-10-29_at_10.14.30_AM.png" alt="MachineLearning-Week1/Screen_Shot_2020-10-29_at_10.14.30_AM.png"></p><p>Matlab Command</p><h2 id><a href="#" class="headerlink" title></a><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Initialize matrix A </span></span><br><span class="line">A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>;<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>;<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">% Transpose A </span></span><br><span class="line">A_trans = A&#x27; </span><br><span class="line"></span><br><span class="line"><span class="comment">% Take the inverse of A </span></span><br><span class="line">A_inv = inv(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">% What is A^(-1)*A? </span></span><br><span class="line">A_invA = inv(A)*A</span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line">     <span class="number">1</span>     <span class="number">2</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">5</span>     <span class="number">6</span></span><br><span class="line">     <span class="number">7</span>     <span class="number">0</span>     <span class="number">9</span></span><br><span class="line">A_trans =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span>     <span class="number">0</span>     <span class="number">7</span></span><br><span class="line">     <span class="number">2</span>     <span class="number">5</span>     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span>     <span class="number">6</span>     <span class="number">9</span></span><br><span class="line">A_inv =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.3488</span>   <span class="number">-0.1395</span>    <span class="number">0.0930</span></span><br><span class="line">    <span class="number">0.3256</span>    <span class="number">0.0698</span>   <span class="number">-0.0465</span></span><br><span class="line">   <span class="number">-0.2713</span>    <span class="number">0.1085</span>    <span class="number">0.0388</span></span><br><span class="line">A_invA =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-0.0000</span>    <span class="number">0.0000</span></span><br><span class="line">    <span class="number">0.0000</span>    <span class="number">1.0000</span>   <span class="number">-0.0000</span></span><br><span class="line">   <span class="number">-0.0000</span>         <span class="number">0</span>    <span class="number">1.0000</span></span><br></pre></td></tr></table></figure></h2><h1 id="FAQ-for-Week1"><a href="#FAQ-for-Week1" class="headerlink" title="FAQ for Week1:"></a>FAQ for Week1:</h1><p><strong>Q1: In the cost function, why don’t we use absolute value(or mod(), or some other function) instead of the squared error?</strong></p><p>The absolute value has some bad characteristics for  minimization.</p><ul><li>The gradient is not continuous because the absolute value function is not differentiable at its minimum point.</li><li>It does not emphasize the correction of large errors.</li><li>The abs() function is also not very mathematically efficient.</li></ul><p>However, the squared error cost function has some very desirable characteristics:</p><ul><li>The cost can be computed very efficiently.</li><li>Its partial derivative is easily computed.</li><li>Its partial derivative is continuous.</li></ul><p><strong>Q2: How does the Cocktail Party problem work?</strong></p><p>It isn’t clustering.</p><p>Clustering would not preserve the time-sequence of the sound samples, so the results would not sound like speech.</p><p>The method used is Principal Component Analysis. This method is a mathematical trick that takes two sets of correlated data, and returns two new sets of data that are not correlated. The sequence of the data is retained.</p><p>If the data is audio recordings, the result has the effect to the human ear of sounding like two separate audio tracks.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Machine-Learning-Week-1&quot;&gt;&lt;a href=&quot;#Machine-Learning-Week-1&quot; class=&quot;headerlink&quot; title=&quot;Machine-Learning - Week 1&quot;&gt;&lt;/a&gt;Machine-Learning - Week 1&lt;/h1&gt;&lt;p&gt;Github link: &lt;a href=&quot;https://github.com/AlenZhang-Dev/MachineLearning-Stanford&quot;&gt;https://github.com/AlenZhang-Dev/MachineLearning-Stanford&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h1&gt;&lt;p&gt;Introduce the core idea of teaching a computer to learn concepts using data - without being explicitly programmed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linear regression with one variable.&lt;/strong&gt; Discuss the application of linear regression to housing price prediction, present the notion of a cost function, also introduce the gradient descent method for learning.&lt;/p&gt;
&lt;p&gt;The course require the knowledge of l&lt;strong&gt;inear algebra&lt;/strong&gt; concepts.&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Machine-Learning" scheme="https://superming.life/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>《不能承受生命之轻》</title>
    <link href="https://superming.life/2020/10/23/%E4%B8%8D%E8%83%BD%E6%89%BF%E5%8F%97%E7%94%9F%E5%91%BD%E4%B9%8B%E8%BD%BB%20/"/>
    <id>https://superming.life/2020/10/23/%E4%B8%8D%E8%83%BD%E6%89%BF%E5%8F%97%E7%94%9F%E5%91%BD%E4%B9%8B%E8%BD%BB%20/</id>
    <published>2020-10-23T07:15:55.000Z</published>
    <updated>2021-02-01T16:01:00.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《不能承受生命之轻》"><a href="#《不能承受生命之轻》" class="headerlink" title="《不能承受生命之轻》"></a>《不能承受生命之轻》</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://book.douban.com/subject/1017143/">豆瓣</a></p><p>Milan Kundera最富盛名的作品。</p><p>空洞，却又深沉的阅读体验。 - 2020.10.23</p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><h3 id="第一章：轻与重"><a href="#第一章：轻与重" class="headerlink" title="第一章：轻与重"></a>第一章：轻与重</h3><p>1.</p><p>永恒轮回是一种神秘的想法，尼采曾用它不少哲学家陷入窘境：想想吧，有朝一日，一切都将以我们经历过的方式再现，而且这种反复还将无限重复下去！这一谵妄之说到底意味着什么？</p><a id="more"></a><p>永恒轮回之说从反面肯定了生命一旦永远消逝，便不再回复，似影子一般，了无分量，未先灭亡，即使它是残酷，美丽，或是绚烂的，这份残酷、美丽和绚练也都没有意义。</p><p>且说永恒轮回的想法表达了这样一种视角，事物并不想是我们所认知的一样，因为事情在我们看来并不是因为转瞬即逝就具有减罪之情状。</p><p>与希特勒的这种和解，暴露了一个建立在轮回不存在之上的世界所固有的深刻道德沉沦，因为在这个世界上，<strong>一切都预先被谅解了，一切也就被卑鄙的许可了</strong>。</p><p>2.</p><p>如果我们生命中的每一秒钟都得无限重复，我们就会像耶稣一样被钉死在十字架上一样被钉死在永恒上。这一想法是残酷的。在永恒轮回世界里，一举一动都承受着不能承受的责任重负。这就是尼采说永恒轮回的想法是最沉重的负担的缘故吧。</p><p>最沉重的负担压迫者我们，让我们屈服于它，把我们压倒到地上。但在历代的爱情诗中，女人总渴望承受一个男性身体的重量。于是，最沉重的负担同时也成了最强盛的生命力的影像。负担越重，我们的生命就越贴近大地，它就越真实的存在。</p><p>相反，当负担完全缺失，人就会变得比空气还轻，就会飘起来，就会远离大地和地上的生命，人也就只是一个半真的存在，其运动也就变得自由而没有意义。</p><p>那么，到底选择什么？是重还是轻？</p><p>巴门尼德早在公元前六世纪就给自己提过这个问题，在他看来，宇宙是被分割成一个个对立的二元：明与暗，厚与薄，热与冷，与在非在。他把对立的一极视为正极，另一极视为负极，这种正负之极的区分在我们看来可能显得幼稚简单。除了在这个问题上：何为正，是重还是轻？</p><p>巴门尼德答道：轻者为正，重者为负。他到底是对是错？这是一个问题。只有一样是确定的：重与轻的对立是所有对立中最神秘、最模糊的。</p><p>3.</p><p>人永远都无法知道自己该要什么，因为人只能活一次，既不能拿它跟它的前世相比，也不能在来生加以修正。</p><p>和特蕾莎在一起好呢，还是一个人好呢？</p><p>没有任何方法可以检验哪种抉择是好的，因为不存在任何比较。一切都是马上经历，仅此一次，不能准备。好像一个演员没有排练就上了舞台。<strong>如果生命的初次排练就是生命本身，那么生命到底会有什么价值？正因为这样，生命才是一张草图。</strong>但“草图“这个词还不确切，因为一张草图是某件事情的雏形，比如一幅画的草稿，而我们生命的草图却不是任何东西的草稿，它是一张成不了画的草图。</p><p>只能活一次，就和根本没有活过一样。</p><p>4.</p><p>于是他明白自己天生不是能在一个女人身边过日子的人，不管这个女人是谁，他也明白了只有单身，自己才感到真正自在。</p><p>托马斯当时还没有意识到，比喻是一种危险的东西。人是不能和比喻闹着玩的，一个简单比喻，便可从中产生爱情。</p><p>6.</p><p>爱情并不是通过做爱的欲望（这可以是对无数女人的欲求）体现的，而是通过和她共眠的欲望（这只能是对一个女人的欲求）而体现出来的。</p><p>14.</p><p>他和特蕾莎之间的爱情无疑是美好的，但也很累人：总要瞒着什么，又是隐藏，又是假装，还得讲和，让她振作，给她安慰，翻来覆去向她证明他爱她，还要忍受因为嫉妒、痛苦、做噩梦而产生的满腹怨艾，总之，他总能感受到自己有罪，得为自己开脱，请对方原谅。现在，再也不用受累了，剩下的只有美好。</p><p>星期六的夜晚开始了；他第一次肚子在苏黎世漫步，深深地呼吸着自由的芬芳。在每个角落，都潜藏着诱惑。未来成了一个谜。他又回到单身汉的生活，他曾坚信自己命中注定要过这种生活，因为只有在这样的生活中他才真正是他自己。</p><p>16.</p><p>重、必然和价值是三个有内在联系的概念；必然者为重，重者才有价值。</p><p>17.</p><p><strong>我们都觉得，我们生命中的爱情若没有分量、无足轻重，那简直不可思议；我们总是想象我们的爱情是它应该存在的那种，没有了爱情，我们的生命将不再是我们应有的生命。</strong></p><h3 id="第二章：灵与肉"><a href="#第二章：灵与肉" class="headerlink" title="第二章：灵与肉"></a>第二章：灵与肉</h3><p>8.</p><p>母亲要为自己伸张正义，她要罪犯受到惩罚。她坚持要女儿和她都活在一个没有羞耻的世界里。在这个世界里，青春和眉毛了无意义，世界只不过是一个巨大的肉体集中营，一句句肉体彼此相像，而灵魂是根本看不见的。</p><p>9.</p><p>但是，如果一件事取决于一系列的偶然，难道不是正说明了它非同寻常而且意味深长？</p><p>凡事必然发生的事，凡事期盼得到，每日重复的事，都悄无声息。</p><p>11.</p><p>我们每天的生活充满了各种偶然性，确切的说，是人、事之间的偶然相遇，我们称之为巧合。两件预料不到的事情出现在同一时刻，就叫巧合。</p><p>人生就像谱写乐章。人在美感的引导下，把偶然的事件变成一个主题，然后记录在生命的乐章中，犹如作曲家谱写奏鸣曲的主旋律，人生的主题也在反复出现、重演、修正、延展。安娜可以用任何一种方式结束生命，但是车站、死亡这个难忘的主题和爱情的萌生结合在一起，在她绝望的一刹那，以凄凉之美诱惑着她。人就是根据美的法则在谱写生命乐章，直至深深的绝望时刻的到来，然而自己一无所知。</p><p><strong>因此我们不能指责小说，说被这些神秘的偶然巧合所迷惑，但我们有理由责备人类因为对这些偶然巧合视而不见而剥夺了生命的美丽。</strong></p><p>12.</p><p>为了不让自己哭出声来，她不停地大声说话，一边说，一边笑着。而他还是和上次一样，几乎她刚跨进门槛，他就把他用在怀里，然后他们就做爱。她跌落在一片浓雾里，什么也看不见，什么也听不见，除了她的叫声。</p><p>18.</p><p>她时刻感受到一种不可抑制想要摔倒的渴望，她活在一种时刻发晕的状态之中。</p><p>23.</p><p>沙俄帝国过去所犯下的罪行都隐藏在秘密的阴影中。五十万立陶宛人被放逐，成千上万波兰人被杀戮，对克里米亚的鞑靼人进行灭绝种族的屠杀，所有这一切只留在记忆里，却没有留下任何图片作为证据，就像一件无法论证的事情，迟早会被说成骗人的谎言。</p><p>24.</p><p>女摄影师用一种母性的语气接着说到：“赤裸的身体。怎么了！这很正常！<strong>一切正常的都是美的！</strong>”</p><h3 id="第三部：不解之词"><a href="#第三部：不解之词" class="headerlink" title="第三部：不解之词"></a>第三部：不解之词</h3><p>1.</p><p>对他来说，爱情是一种甘心屈从于对方的意愿和控制的热爱。委身于对方就如同投降的士兵一样，必须首先缴械。因此，自己没了防备，他便止不住担心那致命一击何时降临。所以，我可以说，爱情之于弗兰茨，就是对死亡的不断等待。</p><p>2.</p><p>假若人还年轻，他们的生命乐章不过刚刚开始，那他们可以一同创作旋律，交换动机，到那时，当他们在比较成熟的年纪相遇，每个词，每件物所指的意思便各不相同。</p><p>3.</p><p>对萨比娜来说，活着意味着观看。视觉受双重边界所限：让人什么也看不见的强光与完全彻底的黑暗。他对任何极端主义的憎恶，或许产生于此。极端标志生命的终极之界，极端主义的激情，不论是政治上的，还是艺术上的，都是一种改头换面的对死的渴望。</p><p>5.</p><p>弗兰茨说：“在欧洲，美总是带有刻意的特点，总是先有唯美的构想或长久的计划，比如一座哥特式大教堂或一座文艺复兴式的城市，得按计划，花几个漫长的世纪才能建成。纽约的没则完全来自于另一种源头。这是一种非刻意的没。它无需经过人的预先谋划，就像钟乳石溶洞一样自然天成。有些形态，本身很丑，未经任何筹划，可捧碰巧在一个看似不可思议的环境中，突然之间便散发出一种魔力般的诗意来。”</p><p>萨比娜接着说：“非刻意的美。是的。还可以说是错误的美。美从世界上彻底消失之前，还会存在片刻，却是因错而生。错误的美，是美的历史末期。”</p><p>文化就在大批的制造、言语的泛滥、数量的失控中逐渐消亡。</p><p>7.</p><p>美就是被背弃的世界。只有当迫害者误将它遗忘在某个角落时，我们才能与它不期而遇。美就隐藏在五一节游行的场景背后。要发现美，就必须把那场景击破。</p><p>活在真实里<br>这是卡夫卡在他的日记或书信中写过的一句话。确切的出处，弗兰茨已经记不起。他被这种说法吸引住了。活在真实里，是什么意思？否定的方式很简单：不说谎，不欺骗，不隐瞒。</p><p>10.</p><p>人的悲剧总可以用沉重来比喻。人常说重担落在我们肩上。我们背负着这个重担，承受的起或承受不起。</p><h3 id="第四部：灵与肉"><a href="#第四部：灵与肉" class="headerlink" title="第四部：灵与肉"></a>第四部：灵与肉</h3><p>4.</p><p>从那以后，她明白了集中营绝无特别之处，没有什么值得让人惊讶的，而是某种命定，根本性的东西，来到世上，就是来到它的中间，不拼进权利，就不可能从中逃出去。</p><p>8.</p><p>什么是调情？可以说调情是一种暗示有进一步性接触可能的行为，但又不担</p><p>保这种可能性一定能够兑现。换言之，调情是没有保证的性交承诺。</p><p>17.</p><p>因为刺激是灵魂的，正是身体对她意愿的不由自主的叛逆，正是其对这一叛逆的参与。</p><p>25.</p><p>要逃避痛苦，最常见的，就是躲进未来。在时间轨道上，人们想象有一条线，超脱了这条线，当前的痛苦便不复存在。</p><p>28.</p><p>爱情就像是帝国：它们建立在信念之上，信念一旦消失，帝国也随之灭亡。</p><h3 id="第五部：轻与重"><a href="#第五部：轻与重" class="headerlink" title="第五部：轻与重"></a>第五部：轻与重</h3><p>6.</p><p>他已经很清楚人们的心理，他们从别人的精神耻辱中得到无比的快乐，根本不愿有什么解释来糟蹋这种快乐。</p><p>10.</p><p>追逐众多女性的男人很容易被分为两类。一类人在所有女人身上寻找他们自己的梦，他们对于女性的主观意念。另一类人则被欲念所驱使，想占有客观女性世界的无尽的多样性。</p><p>前者的迷恋是浪漫型的迷恋：他们在女人身上寻找的是他们自己，是他们的理想。他们总是不断地失望，因为，正如我们所知，理想从来都不是可能找到的。失望把他们从一个女人推向另一个女人，赋予他们的善变一种感伤的借口，因此，许多多愁善感的女人为他们的顽强的纠缠所感动。</p><p>后者的迷恋是放荡型的迷恋，女人在其中看不到丝毫感人之处：由于男人没有在女性身上寄托一个主观的理想，他们对所有女人都感兴趣，没有谁会令他们失望。的确，就是着从不失望带有某种可耻的成分。在世人眼中，放浪之徒的迷恋是不可宽恕的。</p><p>12.</p><p>不爱，并不意味着托马斯对那个年轻的女人厚颜无耻，像人们说的那样，只是把她看作性工具。相反，他像爱女友一般爱他，欣赏她的个性和智慧，只要她有需要，他随时会帮她。待她不好的不是他，而是他的记忆，他也无能为力，是记忆将她的爱情区域排除出来。</p><p>“我寻求的不是快感，而是幸福。没有幸福的快感，那算不上快感。”</p><p>爱开始于一个女人以某句话印在我们诗化记忆中的那一刻。</p><p>15.</p><p>人只能活一回，我们无法验证决定的对错，因为，在任何情况下，我们只能做一个决定。上天不会赋予我们第二次，第三次，第四次生命以供比较不同的决定。</p><p>16</p><p>只有在这种乌托邦式的前景中，悲观和乐观的概念才具有一定的意义：凡认为人类历史在五号星球上会变得不那么血腥的，为乐观主义者。凡不这么认为的，则为悲观主义者。</p><h3 id="第六章：伟大的进军"><a href="#第六章：伟大的进军" class="headerlink" title="第六章：伟大的进军"></a>第六章：伟大的进军</h3><p>2.</p><p>斯大林之子因粪便而献出了自己的生命，但是为粪便而死并不是一种毫无意义的死。德国人不惜牺牲生命向东方拼命扩张帝国的领土，俄国人则为向西方扩张自己的势力范围而丧生，是的，这些人为愚蠢的事情而死，他们的死才毫无意义，才没有任何价值。相反，斯大林儿子之死是在战争的普遍愚蠢之中唯一的具有形而上学意义的死。</p><p>9.</p><p>没有人比政治家更深谙这一点。只要附近有一架照相机，一见到孩子，他们就会跑过去把他抱在怀中，亲她的脸蛋儿。媚俗，就是所有政治家，所有的政治运动的美学理想。</p><p>在一个多流派并存，多种势力相互抵消，相互制约的社会里，多少还可以摆脱媚俗的专横；个人可以维护自己的个性，艺术家可以创造处不同凡响的作品。但是在某个政治运动独霸整个权利的地方，人们便一下置身于极权的媚俗之王国。</p><p>我说“极权”，那是因为有损于媚俗的一切，必须被清处生活：任何个人主义的表现、任何怀疑、任何嘲讽、甚至是抛弃家庭母亲，爱男人剩余爱女人的那人，都是有损你媚俗的行为。因为这就是威胁那句神圣不可侵犯的口号“多生多育“。</p><p>从这一点来看，所谓古拉格，可以被视为极权的媚俗乱倒垃圾的化粪坑。</p><p>10.</p><p>特蕾莎揭露了媚俗的真正作用：媚俗是掩盖死亡的一道屏风。</p><p>11.</p><p>在极权媚俗之王国，总是现有答案并排除一切新问题。所以极权的媚俗的真正对手就是爱发问的人。问题就像刚裁开装饰画布的刀让人看到隐藏其后的东西。萨比娜就是这样像特蕾莎解释那些油画的意义的：前面是明明白白的谎言，后面则是隐现出让人无法理解的真相。</p><p>人们总像以自己的生活制造媚俗，要摆脱它，得付出多少艰辛，令人绝望。</p><p>29.</p><p>弗兰茨留下了什么？</p><p>一句碑文：迷途漫漫，终有一归。</p><p>等等，如此等等。在被遗忘之前，我们会变得媚俗。媚俗，是存在与遗忘之间的中转站。</p><h3 id="第七部：卡列宁的微笑"><a href="#第七部：卡列宁的微笑" class="headerlink" title="第七部：卡列宁的微笑"></a>第七部：卡列宁的微笑</h3><p>2.</p><p>《创世纪》的开篇写到，上帝造人是为了让人统治鸟、鱼、牲畜。当然，《创世纪》是人写的，而不是一匹马写的。因此，并不能完全断定上帝是真的希望人类统治其他生物。更有可能是人类发明了上帝，以便使其篡夺来的对牛马的支配权合乎神圣法则。对，就是杀死一只鹿或一头母牛的权利，全人类在这一点上达到来共识，即使是在最血腥的战争年代也不例外。</p><p>4.</p><p>她倒是觉得人类夫妻这种创造，本来就是让男女之爱从根本上就不及人与狗之间可能产生的爱。这真是人类历史上的怪现象，造物主当初或许并没有打算这样安排。</p><p>7.</p><p>任何人都没有使命。当你发现自己是自由的，没有任何使命时，便是一种极大的解脱。</p><p>他们来来回回，合着钢琴声和小提琴声迈着舞步，特蕾莎的头靠在托马斯的肩上，两人就像坐着飞机在云雾里穿行。此刻她又感受到了那种奇特的幸福，那种奇特的忧虑。这忧虑意味着：我们已经在最后一站。这幸福意味着：我们在一起。忧虑是形式，幸福是内容。幸福充盈着忧虑的空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《不能承受生命之轻》&quot;&gt;&lt;a href=&quot;#《不能承受生命之轻》&quot; class=&quot;headerlink&quot; title=&quot;《不能承受生命之轻》&quot;&gt;&lt;/a&gt;《不能承受生命之轻》&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1017143/&quot;&gt;豆瓣&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Milan Kundera最富盛名的作品。&lt;/p&gt;
&lt;p&gt;空洞，却又深沉的阅读体验。 - 2020.10.23&lt;/p&gt;
&lt;h2 id=&quot;摘录&quot;&gt;&lt;a href=&quot;#摘录&quot; class=&quot;headerlink&quot; title=&quot;摘录&quot;&gt;&lt;/a&gt;摘录&lt;/h2&gt;&lt;h3 id=&quot;第一章：轻与重&quot;&gt;&lt;a href=&quot;#第一章：轻与重&quot; class=&quot;headerlink&quot; title=&quot;第一章：轻与重&quot;&gt;&lt;/a&gt;第一章：轻与重&lt;/h3&gt;&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;永恒轮回是一种神秘的想法，尼采曾用它不少哲学家陷入窘境：想想吧，有朝一日，一切都将以我们经历过的方式再现，而且这种反复还将无限重复下去！这一谵妄之说到底意味着什么？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Books" scheme="https://superming.life/categories/Books/"/>
    
    
      <category term="Books" scheme="https://superming.life/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Insertion</title>
    <link href="https://superming.life/2020/10/17/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://superming.life/2020/10/17/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2020-10-17T04:16:55.000Z</published>
    <updated>2021-02-01T16:01:06.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="直接插入排序（Straight-Insertion-Sort）"><a href="#直接插入排序（Straight-Insertion-Sort）" class="headerlink" title="直接插入排序（Straight Insertion Sort）"></a>直接插入排序（Straight Insertion Sort）</h2><p>直接插入排序是简单直观的排序方法，将一个记录插入到已排好的有序表中，从而得到一个新的、记录数增1的有序表。</p><a id="more"></a><p>通过构建有序序列，对未排序数据，在已排序数据中从前向后扫描，找到相应位置并插入。采用in-place排序（只需要用到O(1)的额外空间的排序）。在从后向前扫描的过程中，需要反复把已排序的元素向后移动。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Insertion-sort-example-300px.gif/220px-Insertion-sort-example-300px.gif" alt="img"></p><p>默认第一个元素已排序，从第二位开始遍历，外层循环遍历需要插入的元素，遍历至最后一个元素停止，内层循环用于确定插入元素在已排序数组中的位置，同时将大于该元素的数组后移；最后将元素插入。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line"><span class="comment">//        for(int i = 1; i &lt; arr.length; ++i)&#123;</span></span><br><span class="line"><span class="comment">//            int temp = arr[i];</span></span><br><span class="line"><span class="comment">//            int j = i - 1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            while( j &gt;= 0 &amp;&amp; arr[j] &gt; temp) &#123;</span></span><br><span class="line"><span class="comment">//                arr[j + 1] = arr[j];</span></span><br><span class="line"><span class="comment">//                j--;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            arr[j + 1] = temp;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; ++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; --j)</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            arr[++j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h3><p>边界情况：最好的情况是序列已经升序排列（如果算法目标是把n个元素升序），只需比较n-1次即可。最坏情况为元素降序，需要进行<code>1 / 2 * n *  (n - 1)</code>次比较。平均来说，插入排序算法复杂度为 O(n^2)。</p><p>插入排序不适合数据量较大的排序应用，如果需要排序的数据量很小，插入排序还是个很不错的选择。</p><h2 id="折半插入排序（Binary-Insertion-Sort）"><a href="#折半插入排序（Binary-Insertion-Sort）" class="headerlink" title="折半插入排序（Binary Insertion Sort）"></a>折半插入排序（Binary Insertion Sort）</h2><p>对插入排序的改进，需要从比较次数和移动次数两处着手。折半插入从减少比较次数着手，而移动次数不变。折半插入排序花费可以将时间复杂度从 O(n^2)降为O(log n)，依旧是一个稳定的排序算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = i - <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//折半插入核心</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = low + high / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[m] &gt; temp)</span><br><span class="line">                high = m - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//将数据后移然后插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= low; --j) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-路插入排序（Two-way-Insertion-Sort）"><a href="#2-路插入排序（Two-way-Insertion-Sort）" class="headerlink" title="2-路插入排序（Two-way Insertion Sort）"></a>2-路插入排序（Two-way Insertion Sort）</h2><p>因为折半插入排序不改变移动次数，因此2-路插入排序在折半插入排序的基础上进行改进，用于较少排序过程中的移动次数，但是需要额外n个的辅助空间。</p><p>2-路插入排序需要创建一个和存储记录数量大小相同的数组b，将原数组的第一个记录添加到合适的位置，假设为b[0]，从原数组的第二个元素开始进行比较，比较过程一共有三种情况：插入元素比最小的元素小，插入元素比最大元素大，插入元素在两者之间，最后一种情况则需要移动元素。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">twoWayInsertionSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> brr[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> length = arr.length;</span><br><span class="line">      <span class="keyword">int</span> first =<span class="number">0</span>, last = <span class="number">0</span>;<span class="comment">//point to the greater one and tiny one.</span></span><br><span class="line">      brr[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; ++i)&#123;</span><br><span class="line">          <span class="comment">//greater than the biggest one</span></span><br><span class="line">          <span class="keyword">if</span>(arr[i] &gt;= brr[last])&#123;</span><br><span class="line">              brr[++last] = arr[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &lt;= brr[first])&#123;</span><br><span class="line">              first = (first - <span class="number">1</span> + length) % length;</span><br><span class="line">              brr[first] = arr[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//int j = (last - 1 + length) % length;</span></span><br><span class="line">              <span class="keyword">int</span> j = last;</span><br><span class="line">              <span class="keyword">while</span>(brr[j] &gt; arr[i])&#123;</span><br><span class="line">                  brr[(j + <span class="number">1</span>) % length] = brr[j];<span class="comment">//move back element</span></span><br><span class="line">                  j = (j - <span class="number">1</span> + length) % length;<span class="comment">//update point</span></span><br><span class="line">              &#125;</span><br><span class="line">              brr[(j + <span class="number">1</span>) % length] = arr[i];</span><br><span class="line">              last++;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">&quot;First is &quot;</span> + first + <span class="string">&quot;Last is &quot;</span> + last);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//copy back to the array</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)&#123;</span><br><span class="line">          arr[i] = brr[(first + i) % length];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>在2-路插入排序中，移动次数约为n^2/8，仅仅减少了排序的移动次数，但不能绝对避免移动，时间复杂度依旧为O(n ^ 2)。</p><h2 id="表插入排序"><a href="#表插入排序" class="headerlink" title=" 表插入排序 "></a><em> 表插入排序 </em></h2><p>需要从根本上避免移动，则需要对存储结构进行改变，将结构改为<strong>静态链表</strong>作为待排记录序列的存储结构。</p><p>对于一个有序的循环链表，插入新元素，只需修改后继指针的指向，在这个过程中，我们不需要移动或交换元素。</p><p>顺着指针指向对元素进行调整，能够做到物理有序。</p><ol><li>创建新的静态链表结构体，封装值和指针。同时设置一个头节点，值存储不小于原序列最大值的值。</li><li>对链表进行初始化</li><li>将后续节点一次插入循环链表中，调整节点指针指向，使其有序。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableInsertionSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span>&#125;;</span><br><span class="line">        Node head = <span class="keyword">new</span> Node();</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            Node node = <span class="keyword">new</span> Node();</span><br><span class="line">            node.setKey(a[i]);</span><br><span class="line">            p.setNode(node);</span><br><span class="line">            p = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Node list)</span> </span>&#123;</span><br><span class="line">        Node pre, now, p, q, head;</span><br><span class="line">        head = list;</span><br><span class="line">        pre = list.getNode();</span><br><span class="line">        now = pre.getNode();</span><br><span class="line">        <span class="keyword">while</span> (now != <span class="keyword">null</span>) &#123;</span><br><span class="line">            q = head;</span><br><span class="line">            p = q.getNode();</span><br><span class="line">            <span class="keyword">while</span> (p != now &amp;&amp; p.getKey() &lt;= now.getKey()) &#123;</span><br><span class="line">                q = p;</span><br><span class="line">                p = p.getNode();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p == now) &#123;</span><br><span class="line">                pre = pre.getNode();</span><br><span class="line">                now = pre.getNode();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre.setNode(now.getNode());</span><br><span class="line">            q.setNode(now);</span><br><span class="line">            now.setNode(p);</span><br><span class="line">            now = pre.getNode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        Node p = head.getNode();</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.getKey() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            p = p.getNode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String agrs[])</span> </span>&#123;</span><br><span class="line">        Node list = init();</span><br><span class="line">        sort(list);</span><br><span class="line">        printList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set Node class</span></span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">private</span> Node node;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> key, Node node)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.node = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Node <span class="title">getNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNode</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.node = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 效率：</p><p>元素推动次数为0，算法比较次数与直接插入排序算法比较次数同级，平均时间复杂度为O(n ^ 2)。每个元素增加一个指向下一个节点的指针，辅助空间O(n)，且算法<strong>稳定</strong>。</p><h2 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h2><p>希尔排序也称“缩小增量排序”（Diminishing Increment Sort），是简单的插入排序经过改进后一个更高效的版本。</p><p>基本思想：把记录按下标的一定增量分组【将记录序列进行分割】，然后对每组进行插入排序，随着增量的减少，每组包含的关键字越多，当增量变为1时，对全体文件进行一次直接插入排序。</p><p>希尔排序通过分组并进行插入排序的方式对数组进行排序，从宏观上看数组逐渐有序，因为数组基本有序，所以在进行直接插入排序的过程中很少出现排序效率最低的情况，多数情况只需要对数据进行微调，从而降低了时间复杂度。</p><p>基于插入排序的两点性质：</p><ol><li>插入排序对几乎排好的数据操作效率很高，可以达到线性排序效率。</li><li>但插入排序一般来说是低效的，因为每次只能移动一位数据。</li></ol><p>一般我们会选择增量gap为length/2，缩小增量继续以gap/2的形式进行。希尔排序的增量序列选择涉及数学上的难题，不做讨论。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">              <span class="comment">//每次都与相隔gap位的值进行比较</span></span><br><span class="line">              <span class="keyword">int</span> j = i;</span><br><span class="line">              <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                  <span class="comment">//swap the element</span></span><br><span class="line">                  swap(arr, j, j - gap);</span><br><span class="line">                  j -= gap;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//移动</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortMove</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">              <span class="comment">//每次都与相隔gap位的值进行比较</span></span><br><span class="line">              <span class="keyword">int</span> j = i;</span><br><span class="line">              <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">              <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                  arr[j] = arr[j - gap];</span><br><span class="line">                  j -= gap;</span><br><span class="line">              &#125;</span><br><span class="line">              arr[j] =temp;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="效率-1"><a href="#效率-1" class="headerlink" title="效率"></a>效率</h3><p>希尔排序的效率收gap值的影响，选择不同的gap值能够得到不同的时间效率，一般建议gap取n/2，这样可以比多数O(n ^ 2)的算法更好，但仍可以减少平均时间和最差时间的空间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;h2 id=&quot;直接插入排序（Straight-Insertion-Sort）&quot;&gt;&lt;a href=&quot;#直接插入排序（Straight-Insertion-Sort）&quot; class=&quot;headerlink&quot; title=&quot;直接插入排序（Straight Insertion Sort）&quot;&gt;&lt;/a&gt;直接插入排序（Straight Insertion Sort）&lt;/h2&gt;&lt;p&gt;直接插入排序是简单直观的排序方法，将一个记录插入到已排好的有序表中，从而得到一个新的、记录数增1的有序表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>MergeSort</title>
    <link href="https://superming.life/2020/10/07/MergeSort/"/>
    <id>https://superming.life/2020/10/07/MergeSort/</id>
    <published>2020-10-07T13:00:35.000Z</published>
    <updated>2021-02-01T16:01:17.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h1><h2 id="Introductions"><a href="#Introductions" class="headerlink" title="Introductions"></a>Introductions</h2><p>很多算法在结构上是递归的，为了解决给定问题，需要一次或多次调用自身来解决相关子问题，通常使用<strong>分治策略（Divide-and-Conquer）</strong>，即将问题分解为n个规模较小而结构与原问题类似的子问题；递归解决这些问题，然后合并其结果，即得到问题的解。</p><a id="more"></a><p>分治模式在每一层的递归上一般有三个步骤：</p><p>分解（Divide）：将原问题分解为一系列的子问题。</p><p>解决（Conquer）：递归解决各子问题，若子问题足够小，则直接求解。</p><p>合并（combine）：将子问题的结果合并为原问题的解。</p><p>归并排序（MergeSort）算法是分治策略的一个完美实现。</p><p>分解：将n个元素分成各含n/2个元素的子序列。</p><p>解决：用合并排序法对两个子序列递归地排序。</p><p>合并：合并两个已排序的子序列以得到排序结果。</p><p>关键在于合并步骤中两个已经排列的子序列。</p><p><img src="/2020/10/07/MergeSort/Merge-Sort-Tutorial.png" alt></p><p>merge核心代码及流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Your code here</span></span><br><span class="line"><span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"><span class="keyword">int</span> i = l;</span><br><span class="line"><span class="keyword">int</span> j = m + <span class="number">1</span>;<span class="comment">//right point</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//point of temp;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; arr[j])&#123;</span><br><span class="line">        temp[index++] = arr[i++];   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        temp[index++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">while</span>(i &lt;= m)&#123;</span><br><span class="line">    temp[index++] = arr[i++];</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">while</span>(j &lt;= r)&#123;</span><br><span class="line">    temp[index++] = arr[j++];</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">for</span>(index = <span class="number">0</span>; index &lt;= r; index++)&#123;</span><br><span class="line">    arr[index] = arr[index];</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Java program for Merge Sort */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123; </span><br><span class="line">  <span class="comment">// Merges two subarrays of arr[]. </span></span><br><span class="line">  <span class="comment">// First subarray is arr[l..m] </span></span><br><span class="line">  <span class="comment">// Second subarray is arr[m+1..r] </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// Find sizes of two subarrays to be merged </span></span><br><span class="line">    <span class="keyword">int</span> n1 = m - l + <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">int</span> n2 = r - m; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create temp arrays */</span></span><br><span class="line">    <span class="keyword">int</span> L[] = <span class="keyword">new</span> <span class="keyword">int</span>[n1]; </span><br><span class="line">    <span class="keyword">int</span> R[] = <span class="keyword">new</span> <span class="keyword">int</span>[n2]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Copy data to temp arrays*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; ++i) </span><br><span class="line">      L[i] = arr[l + i]; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; ++j) </span><br><span class="line">      R[j] = arr[m + <span class="number">1</span> + j]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Merge the temp arrays */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initial indexes of first and second subarrays </span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initial index of merged subarry array </span></span><br><span class="line">    <span class="keyword">int</span> k = l; </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123; </span><br><span class="line">      <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123; </span><br><span class="line">        arr[k] = L[i]; </span><br><span class="line">        i++; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span> &#123; </span><br><span class="line">        arr[k] = R[j]; </span><br><span class="line">        j++; </span><br><span class="line">      &#125; </span><br><span class="line">      k++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Copy remaining elements of L[] if any */</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123; </span><br><span class="line">      arr[k] = L[i]; </span><br><span class="line">      i++; </span><br><span class="line">      k++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Copy remaining elements of R[] if any */</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123; </span><br><span class="line">      arr[k] = R[j]; </span><br><span class="line">      j++; </span><br><span class="line">      k++; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function that sorts arr[l..r] using </span></span><br><span class="line">  <span class="comment">// merge() </span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123; </span><br><span class="line">      <span class="comment">// Find the middle point </span></span><br><span class="line">      <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">      <span class="comment">// Sort first and second halves </span></span><br><span class="line">      sort(arr, l, m); </span><br><span class="line">      sort(arr, m + <span class="number">1</span>, r); </span><br><span class="line"></span><br><span class="line">      <span class="comment">// Merge the sorted halves </span></span><br><span class="line">      merge(arr, l, m, r); </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* A utility function to print array of size n */</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> n = arr.length; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">      System.out.print(arr[i] + <span class="string">&quot; &quot;</span>); </span><br><span class="line">    System.out.println(); </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// Driver method </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;; </span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Given Array&quot;</span>); </span><br><span class="line">    printArray(arr); </span><br><span class="line"></span><br><span class="line">    MergeSort ob = <span class="keyword">new</span> MergeSort(); </span><br><span class="line">    ob.sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\nSorted array&quot;</span>); </span><br><span class="line">    printArray(arr); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/* This code is contributed by Rajat Mishra */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>归并排序是一种稳定、高效的排序，一般利用了完全二叉树特性的排序一般不会太差。</p><p>每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。</p><p>拓展：Java的Array.sort( )采用的TimSort排序算法，就是归并排序的优化版本。【后续填坑】</p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>【挖坑】</p><hr><p><a href="https://www.geeksforgeeks.org/merge-sort/?ref=lbp">Merge Sort</a></p><p><a href="https://www.cnblogs.com/chengxiao/p/6194356.html">归并排序</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MergeSort&quot;&gt;&lt;a href=&quot;#MergeSort&quot; class=&quot;headerlink&quot; title=&quot;MergeSort&quot;&gt;&lt;/a&gt;MergeSort&lt;/h1&gt;&lt;h2 id=&quot;Introductions&quot;&gt;&lt;a href=&quot;#Introductions&quot; class=&quot;headerlink&quot; title=&quot;Introductions&quot;&gt;&lt;/a&gt;Introductions&lt;/h2&gt;&lt;p&gt;很多算法在结构上是递归的，为了解决给定问题，需要一次或多次调用自身来解决相关子问题，通常使用&lt;strong&gt;分治策略（Divide-and-Conquer）&lt;/strong&gt;，即将问题分解为n个规模较小而结构与原问题类似的子问题；递归解决这些问题，然后合并其结果，即得到问题的解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Algorithms" scheme="https://superming.life/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Tsingtao</title>
    <link href="https://superming.life/2020/09/20/Tsingtao/"/>
    <id>https://superming.life/2020/09/20/Tsingtao/</id>
    <published>2020-09-20T12:15:19.000Z</published>
    <updated>2021-02-01T16:01:31.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tsingtao"><a href="#Tsingtao" class="headerlink" title="Tsingtao"></a>Tsingtao</h1><p>九月，在青岛，迷人的海滨城市。</p><p><img src="/2020/09/20/Tsingtao/tsing.jpeg" alt="view form Tsingtao library"></p><h2 id="市井味儿、啤酒"><a href="#市井味儿、啤酒" class="headerlink" title="市井味儿、啤酒"></a>市井味儿、啤酒</h2><p>青岛啤酒无处不在，大铁桶装着的青岛啤酒从未在视线外消失过。粗浅观察了一下，啤酒对于青岛人民来说，像是矿泉水，走道的老大爷走渴了，找个转角的啤酒屋，迫切得要上一大杯，寒暄几句，吨吨喝下，生活继续。【目睹好几次，更多的是装上塑料袋，灌满一大袋回家吨吨】。</p><a id="more"></a><p>尤其喜欢市井烟火味重的地方，旅游当然也不例外。网红打卡超级海景，永远体会不到那种闲散慵懒融入这片土地的味道。找一家青岛本地人日常吃饭的小小啤酒屋，有那么些许的杂乱，点上几碗小菜，温度适宜，短袖刚好，与友谈天说地，甚好。诧异的是，每桌默认5扎青岛扎啤，喝不完退。于是，我们成了整个菜馆最怂的一桌，在阵阵海风中和老板娘的诧异的眼神中，脑袋有那么点沉重，看着别人桌少则半打，多的直接上桶，在这座城市中，突然有那么点小小的卑微。</p><p>话说回来，青岛本地菜家常菜口味着实不错，很家常，和东北菜类似，量挺大的，一定要留好肚子，某次点了三碗喝了半扎啤酒，差点爬回家。</p><p><img src="/2020/09/20/Tsingtao/beer.jpeg" alt="beer" style="zoom:50%;"></p><p><img src="/2020/09/20/Tsingtao/seefood.jpeg" alt="beer" style="zoom:50%;"></p><p>朋友在东北出生长大，告诉我青岛本地人真的很热情，balabala。对于民风这种东西，对我而言像是种玄学，很难从几个固定的角度去考察判断。在旅行途中，与各种人交流打交道，总会有让你特别温暖的陌生人，也会有一心想敲诈你的陌生人。比较崇尚多元的我，很享受和陌生人这种莫名其妙的接触，哪怕你想敲诈我。【怪不得在哪都被敲诈】至少我回忆起来还觉得挺有趣的，比如这次旅行，有满嘴跑火车的出租车的中年大哥，一个劲教唆我去青岛最繁华的CBD下面迪厅蹦迪，跑着山路吹着风耳边听着他的青岛话“年轻人要balabala”，给我乐坏了；也有沉稳温柔的网约车女司机，我们在痛苦地在车里谈论在当地海鲜市场被宰的经历，把她也乐坏了，一个劲笑… 虽然不是什么动人故事，但旅途中这微不足道甚至很傻x的故事，还是蛮有味道的。</p><p>总的来说，碰到的本地青岛人很热情，从网约车司机到餐馆老板…都让人挺温暖的。</p><h2 id="乱扯"><a href="#乱扯" class="headerlink" title="乱扯"></a>乱扯</h2><p>对青岛历史充满热情，而青岛比较有故事有味道的点都在市南和市北区，也是本次旅行的主要活动范围。青岛老城区真的太有味道了，尤其是从青岛站到五四广场这片范围附近。路很小很精致，道边的树遮天蔽日，穿行其中真的很惬意，一位本地司机告诉我们，现在这个时候是青岛最美的时候，天气刚刚好，树叶还没落，又黄又绿的，很美。</p><p><img src="/2020/09/20/Tsingtao/roads.jpeg" alt="roads"></p><p>关于CBD，五四广场和市政府附近，各种商务办公楼、商场及住宅区沿着海岸线扩张，以五四广场为中心，依次排开。青岛CBD的建筑群密集又高耸，而且观赏角度可以很近，更会有别样的感觉，与上海杭州那种隔江相望不同，一街之隔的CBD让手机的超广角力不从心。有被震撼到。</p><p><img src="/2020/09/20/Tsingtao/square1.jpeg" alt="square1"></p><p>五四广场一群人围着听小哥哥唱歌，有牵着小手或相拥取暖的靓丽情侣，有抽着烟的中年帅大哥… 歌声伴着海风吹进每个人的心里，把大家都黏在了一起。「此情此景，几乎听哭，关键他在唱张学友，还很好听」</p><p><img src="/2020/09/20/Tsingtao/square3.jpeg" alt="square3"></p><p><img src="/2020/09/20/Tsingtao/suqare.jpeg" alt="suqare"></p><p>八大关，嗯，就是那万国建筑群，我也不懂这个风格那个风格，在欧洲老式建筑间穿行，这些屋子几乎都被一些高级餐厅啥的占领了，在门口看着文物保护的牌子，肤浅的惊呼：哦～原来这以前是捷克大使馆，哇～原来这是西班牙大使馆，卧槽，那是英国的… 肤浅的在全是上下坡的山路走着，自觉俗不可耐。景色不错，坐拥第一第二第三海水浴场，媲美大连滨海路？</p><p>中山路、栈桥、圣弥厄尔大教堂…散漫又美丽，也是我在青岛最爱逛的地方。</p><p><img src="/2020/09/20/Tsingtao/church.jpeg" alt="church"></p><h2 id="Coffee"><a href="#Coffee" class="headerlink" title="Coffee"></a>Coffee</h2><p>青岛咖啡店很多很杂，只要你有精力，当然还要有钱，总会找到你喜欢的。</p><p><strong>TinyCafe 晓晓咖啡</strong></p><p>关键词：无敌海景、专注意式</p><p>刚搬迁，坐落在小港码头，选址无敌，是一家无敌有趣的夫妻店。少数派的黄色潜水艇的SOE，令人惊艳的蓝莓水果味儿。小夫妻超级有趣，店内装饰都是小夫妻和咖啡之间甜甜的故事，咖啡的价格非常亲民，很难得。</p><p><img src="/2020/09/20/Tsingtao/tiny.jpeg" alt="beer"></p><p><img src="/2020/09/20/Tsingtao/tiny4.jpeg" alt="beer"></p><p><strong>十角馆</strong></p><p>关键字：个性、安静、复古、日式</p><p>老板是个异常有个性的人，说话声音很轻，给人很稳重味道，很像我以前的一个朋友，心里藏着无数个故事，内敛而又深刻，我好喜欢这样的人。</p><p>如果你不和他去交流，他真不会和你多说一句话；你慢慢和他交流到那个恰好的点，就开始慢慢展现他自己了，给我们介绍他淘的各种古董、杯子、机车模型，还会特定翻出杂志和书本来给我们看，好享受这种感觉啊。</p><p>朋友说想喝日式豆子，他掏出几款让我们挑，相中了一块日本直接进口过来的，他最后一点了，有点小小对不起他的感觉。</p><p><img src="/2020/09/20/Tsingtao/10angle.jpeg" alt="beer"></p><p><img src="/2020/09/20/Tsingtao/2.jpeg" alt="beer"></p><p><strong>77咖啡</strong></p><p>关键字：教堂、深烘</p><p>老板喜欢咖啡的那种焦苦味，一杯深烘的埃塞，有种不悦的香料味，不是我喜欢的感觉吧。怎么说呢，咖啡毕竟是很主观的东西，更多的是一种表达和态度，喜不喜欢便是你和店家之间的缘分啦。其实很喜欢这个带着京腔的爷爷，气质上就能把你征服。</p><p>他的狗狗叫拿铁，被可爱到了。我喜欢这个爷爷。</p><p><img src="/2020/09/20/Tsingtao/IMG_0360.jpeg" alt="IMG_0360"></p><p><strong>许国明咖啡</strong></p><p>那自己名字做咖啡店的名字，就能感受到那种气场了。整个旅途中最值得、最有价值的一次交流。对于咖啡行业的深刻洞见，眼神中无法掩盖的那种热爱，对我们问题的耐心讲解..收益匪浅，超近距离感受到了这种真正的热爱、态度和气质。</p><p>蹭了好多杯各种精品产地豆，质量真没得说。</p><p><img src="/2020/09/20/Tsingtao/xu1.jpeg" alt></p><p><img src="/2020/09/20/Tsingtao/xu5.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tsingtao&quot;&gt;&lt;a href=&quot;#Tsingtao&quot; class=&quot;headerlink&quot; title=&quot;Tsingtao&quot;&gt;&lt;/a&gt;Tsingtao&lt;/h1&gt;&lt;p&gt;九月，在青岛，迷人的海滨城市。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/09/20/Tsingtao/tsing.jpeg&quot; alt=&quot;view form Tsingtao library&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;市井味儿、啤酒&quot;&gt;&lt;a href=&quot;#市井味儿、啤酒&quot; class=&quot;headerlink&quot; title=&quot;市井味儿、啤酒&quot;&gt;&lt;/a&gt;市井味儿、啤酒&lt;/h2&gt;&lt;p&gt;青岛啤酒无处不在，大铁桶装着的青岛啤酒从未在视线外消失过。粗浅观察了一下，啤酒对于青岛人民来说，像是矿泉水，走道的老大爷走渴了，找个转角的啤酒屋，迫切得要上一大杯，寒暄几句，吨吨喝下，生活继续。【目睹好几次，更多的是装上塑料袋，灌满一大袋回家吨吨】。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="https://superming.life/categories/Life/"/>
    
    
      <category term="Travel" scheme="https://superming.life/tags/Travel/"/>
    
  </entry>
  
  <entry>
    <title>世界咖啡地图</title>
    <link href="https://superming.life/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/"/>
    <id>https://superming.life/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/</id>
    <published>2020-07-16T10:15:19.000Z</published>
    <updated>2021-02-01T16:01:37.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《世界咖啡地图-第二版》"><a href="#《世界咖啡地图-第二版》" class="headerlink" title="《世界咖啡地图 第二版》"></a>《世界咖啡地图 第二版》</h1><p>前言：<strong>这是属于咖啡的时代，喝咖啡不仅是种享受，而且充满乐趣。</strong></p><p>《世界咖啡地图》是一本适用人群非常广的咖啡指南工具书，从小白到咖啡爱好者或是专业咖啡师，销量和很好的口碑说明了一切。是初学者眼中完美的咖啡入门指南，而对于专业选手，则是一本咖啡行业及领域的实用参考书，各种一手信息，图表对比，原产地资料等。</p><p>作者是著名的咖啡师詹姆斯 霍夫曼，2007年WBC「世界咖啡师比赛」冠军，2008年英国杯测大赛冠军。拥有一个名为<strong>Square Mile Coffee Roasters的咖啡烘焙公司</strong>，拥有17位专业人士，专注于为希望作出最好的咖啡的企业提供批发服务。而更为著名的黑鹰咖啡机VA388「少数星巴克臻选店会选用，也叫黑鹰店」出自他和另一位设计师之手，独特的重量控制系统，极大地提高了咖啡出品的稳定性，被视为划时代产品。</p><p>据说：James Hoffmann在研究咖啡的时候曾看到《世界红酒地图》这本书，想到当今还没有这样关于咖啡的书，于是这本书就诞生了。他用整整两年时间走遍了各个咖啡产区，用他的这些阅历成就了《世界咖啡地图》</p><p>本书由认识咖啡、咖啡制作、咖啡产地探源三个模块构成，并在第二版中首次将中国云南作为产地加入该咖啡地图中。</p><p>仔细阅读并作了相关笔记，打算整理一下分享出来。</p><blockquote><p>书中的内容真的很有启发很有意思，作者介绍基础的咖啡知识的同时也分享了很多自己对整个产业的思考和观察，极大引起读者的思考和兴趣。</p><p>以下记录主要为书中内容，并结合自己知识和其他书本内容辅助，旨在构建一个比较清晰明朗的咖啡知识入门框架。</p></blockquote><a id="more"></a><p><img src="/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/jameshoffmann.png" alt="帅"></p><h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>咖啡产业可以被划分为两个不同的类别：商业咖啡(commodiy coffee)和精品咖啡(speciality coffee)。 本书主要聚焦于对精品咖啡的讨论，口感和品质是定义精品咖啡的标准，咖啡的产地很重要，因为产地在很大程度上决定了咖啡的风味。商业咖啡则是指不以品质来论价格，仅仅被称为咖啡的商品，对商业咖啡来说，咖啡的种植地点、采收方式及处理方式并不重要，“一种来自热带的普通商品，能让我快速获取咖啡因并保持清醒的饮品”，这是世上大多数咖啡饮用者对咖啡的认知，也可以说是商业咖啡的定义。</p><h2 id="认识咖啡"><a href="#认识咖啡" class="headerlink" title="认识咖啡　"></a>认识咖啡　</h2><p><strong>咖啡品种</strong></p><p>阿拉比卡和罗布斯塔（Arabica and Robusta）</p><p>当提及咖啡时，通常指从一个特定树种（Species）—— 咖啡树结出的果实，我们现在称这种书为阿拉比卡（Coffea arabica）。占据全球咖啡市场主要份额，在数十个咖啡生产国中种植。但目前被识别的咖啡树种超过120个，仅有一种达到阿拉比卡的普及程度，即卡内弗拉咖啡树属（Coffea canephora），也就是我们熟知的罗布斯塔（Robusta）。</p><p>罗布斯塔主要用于宣传树种特性，19世纪末最先出现于刚果。相较于阿拉比卡严苛的生产种植条件，罗布斯塔对于环境的适应程度很高，所以成本很低。问题在于，多数罗布斯塔咖啡不是很美味。但罗布斯塔咖啡全球市场率依旧占到了约40%，主要是因为速溶咖啡产业的推动，对于速溶咖啡而言，成本远大于风味，这个市场占比一般会根据市场需求浮动（全球咖啡价格等）。</p><blockquote><p>并非所有罗布斯塔豆都品质低下，制作出高质量的罗布斯塔也是可能的。</p><p>两者从基因上发现，罗布斯塔是阿拉比卡的双亲之一。</p></blockquote><p><strong>咖啡树</strong></p><p><img src="/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/coffeetree.jpg" alt></p><blockquote><p>笔者研究较少，仅做少量摘录补充。</p></blockquote><p>咖啡生产者在选择栽培哪个品类时，风味优劣并非主要考量因素；对将种植咖啡作为日常生机来源的生产者来说，品类是否高产或有较强的抗病性更为重要。并不是说所有咖啡生产者的种植标准都源于此，但重要的一点是，我们必须有心理准备，明白生产者的抉择与他们的获利和收入息息相关。</p><p>咖啡树种植条件苛刻，一般需要年均温度20度，成长期需要充足的降水。咖啡树广泛种植在赤道附近的热带、亚热带地区。</p><p>从<strong>种子到成树</strong>，需要6-12个月，种苗可以从育苗区移植到正式咖啡园区。从种植到收获，至少需要三年时间。所以种植咖啡豆是一件需要严肃对待的事情。</p><p><strong>咖啡果实</strong></p><p>不同品种咖啡果实、大小会有很到不同，总的来说，咖啡果实体积像小号的葡萄。与葡萄不同的是，咖啡果实中心的种子占据了整颗果实的绝大部分，表皮及其底下的一层果肉占比很低。果实的<strong>成熟度</strong>通常与其含糖量的多寡直接相关，这正是种出美味咖啡的决定性因素。</p><p><strong>咖啡的种子也就是咖啡豆</strong>，结构有许多层，大部分都会在生豆精致处理阶段被去除，留下用来研磨以及冲煮的咖啡豆。种子的外壳有保护作用，称为内果皮（parchment），里面还有一层薄膜，称为银皮（silverskin）。</p><p>大部分咖啡浆果内有两对生种子，相连的一面会随着果实的生长呈平面。偶尔浆果中只有一颗种子，称为小圆豆(peaberry)，他不像平豆那样有一面是平的，而是呈椭圆形，这种情况占总体产量的5%左右。小圆豆通常会被特意分出来，因为有些人相信他有特别讨喜的特质，也有人认为小圆豆必须用不同于平豆的烘焙方式处理。</p><blockquote><p>什么是圆豆：一般来说一颗咖啡果中会有两颗平豆，只有极少数咖啡果中有一颗圆形种子。</p></blockquote><h2 id="咖啡品种（Coffee-Varieties）"><a href="#咖啡品种（Coffee-Varieties）" class="headerlink" title="咖啡品种（Coffee Varieties）"></a>咖啡品种（Coffee Varieties）</h2><blockquote><p>人工栽种的咖啡树起源于埃塞俄比亚，这一称为帝比卡(Typica)的品种直到今日仍被广泛种植；现今还有许多其他品种，一些自然突变的品种和其他杂交品种。某些品种具有明确的风味特质，有些则因生长环境细微的风土条件、栽种方式和生豆精致处理方式等因素产生不同的风味特质。</p></blockquote><p>注意：在介绍不同品种时，除非有十分明确、独特风味关联性，一般不会主动描述风味，风味受到多种因素影响，缺乏系统性研究来佐证其中的联系，容易造成误导。</p><p><strong>帝比卡（Typica）</strong></p><p>该品种是所有咖啡变种或基因筛选的原型。</p><p>荷兰是第一个将咖啡传播到世界各地并进行商业化种植的国家，帝比卡就是当时的咖啡品种。</p><p>果实通常红色，杯中风味突出，果实产量相对较少。</p><p><strong>波旁（Bourbon）</strong></p><p>留尼汪岛由帝比卡自然突变得到的品种，果实产量相对帝比卡略多。</p><p>许多专业人士认为波旁有一股独特的甜味，因此常在比赛中获奖，风味愉悦，抗虫害能力弱。</p><p>果实颜色：红果皮、黄果皮甚至橘果皮。</p><p><strong>蒙多诺沃（Mundo Novo）</strong></p><p>帝比卡及波旁的自然杂交品种。风味接近波旁。</p><p>20世纪40年代发现于巴西，以当地地名命名。</p><p>果实产量相对较高，体制较强以及较佳的抗病性被广泛种植，且能够适应巴西1000 - 1200米的海拔高度。</p><p><strong>卡杜拉(Caturra)</strong></p><p>1937年发现于巴西的波旁突变种。</p><p>果实产量较高，果实产量会超过植物的负荷，容易压断枝干导致枯萎。</p><p>高度在各品种中属于较低矮的，因此也称“侏儒品种”或“半侏儒品种”。</p><p>在哥伦比亚和中美洲特别受欢迎，巴西也很常见。</p><p>杯中风味表现优秀，随着海拔上升质量提升，产量随之递减。</p><p>果实由红色和黄色之分，高度较矮。</p><p><strong>卡图艾（Catuai）</strong></p><p>20世纪50～60年代由巴西农艺研究机构栽培的卡杜拉及蒙多诺沃的杂交品种。主要结合了卡杜拉的侏儒基因和蒙多诺沃的高产量和抗病性。</p><p>果实有红黄之分。</p><p><strong>马拉戈日皮（Maragogype）</strong></p><p>马拉戈日皮是帝比卡变种中较容易辨认的品种之一，最先发现于巴西。</p><p>豆体巨大，树叶宽大，但果实产量较少，也被称为“象豆”。</p><p>通常红色果皮。</p><p><strong>SL-28</strong></p><p>20世纪30年代，在肯尼亚的斯科特实验室（Scott Lavoratories）中由坦桑尼亚一种耐旱品种选育出来。果实成熟时呈红色，种子一般品种略大。</p><p>一般认为可以制作出水果风味明显的咖啡。</p><p>容易感染叶锈病，适合在高海拔地区种植。</p><p><strong>SL-34</strong></p><p>由法国传教士波旁（French Mission Bourbon）选育，自波旁岛带入非洲，一开始出现在坦桑尼亚，稍后被引入肯尼亚。</p><p>具有明显的水果风味，但一般认为风味略逊于SL-28。</p><p>对叶锈病抵抗力很弱，红色果皮。</p><p><strong>瑰夏(Geisha/Gesha)</strong></p><p>今天种植于巴拿马境内的瑰夏是从哥斯达黎加引进的，一般认为源头是埃塞俄比亚一个名为Gesha的小镇。</p><p>一般可以制作出有特别芳香的花朵风味咖啡，近年来因市场需求度高而价格暴涨。</p><p><strong>帕卡斯（Pacas）</strong></p><p>帕卡斯为波旁变种，与1949年在萨尔瓦多被帕卡斯家族发现。</p><p>帕卡斯品种的果皮为红色，较低矮的树丛有利于人工采收。</p><p>风味近似波旁，属于较为讨喜的类型。</p><p><strong>维拉 萨尔奇(Villa Sarchi)</strong></p><p>哥斯达黎加一个小镇被发现，因此得名。</p><p>波旁的另一个自然突变种，与帕斯卡一样有着侏儒般的低矮树丛。</p><p>目前被培育成产量极高的咖啡品种。</p><p>风味优异，红色果皮。</p><p><strong>帕卡马拉(Pacamara)</strong></p><p>1958年在萨尔瓦多人工培育出的混血品种，双亲为帕卡斯和马拉戈日皮。与马拉戈日皮一样具有较大的叶片、果实及种子，风味也有许多明显、优质的独特属性。</p><p>有巧克力和水果氛围，但可能带不讨喜的草本、洋葱的风味。</p><p>红色果皮。</p><p><strong>肯特(Kent)</strong></p><p>20世纪20年代在印度的一项选种计划中一位咖啡农的姓氏得名。</p><p>为提高抗叶锈病的能力而培育的品种。</p><p><strong>S795</strong></p><p>印度配虚的品种，肯特和S288杂交，较早被选育、具有抗叶锈病能力的品种，在印度和印尼广泛种植。</p><p><strong>野生阿拉比卡品类(Wild Arabica Varieties)</strong></p><p>以上品种基因相似度较高，因为几乎源于单一品种的帝皮卡。</p><p>而埃塞俄比亚具有很多不是人工培育的原生品类（heirloom varieties），由不同树种品类之间各种杂交，很难更具种类来分类并研究风味上的差异。</p><h2 id="采收咖啡-Harvesting-Coffee"><a href="#采收咖啡-Harvesting-Coffee" class="headerlink" title="采收咖啡(Harvesting Coffee)"></a>采收咖啡(Harvesting Coffee)</h2><p>采收咖啡是一个很基本又非常重要的环节。在咖啡果实达到最佳成熟度时采收，制作出的咖啡通常味道最棒。专家将采收阶段视为影响咖啡品质的关键。采收之后的各阶段只能保持品质而无法改变品质。</p><p>采收高质量咖啡果实面临最大挑战大概就是所在的地形了，高质量的咖啡必须种植在海拔相对较高的地区，许多咖啡庄园就位于多山区域的陡峭斜坡上。</p><p><strong>机械采收</strong></p><p>巴西境内有许多高海拔又地势平坦的区域，适合大量种植咖啡，大型庄园会将大型机械开进整齐划一的咖啡树列中，发出震动，使浆果松脱后掉落。</p><p>使用机械采收最法的问题是会采收到未完全成熟的果实。意味着采收完后必须进行分离成熟果和未熟果的工序，随着果皮掉落的断枝与树叶也必须剔除。</p><p>机械采收可以大大降低成本，但同时也会降低质量。</p><p><strong>速剥采收法</strong></p><p>一次将整个枝条上所有果实以熟练的手法快速剥除，像机械收割般快速，但相对不精确。采收的结果是成熟的果实与未熟的果实混杂，需要进一步筛选。</p><p><strong>手摘采收法</strong></p><p>为了制作高质量的咖啡，该方法依旧是最有效率的采收方式。 采收工采收成熟的浆果，未成熟的果实等成熟后再收，这是一种高强度的劳动。</p><h2 id="生豆处理-Processing"><a href="#生豆处理-Processing" class="headerlink" title="生豆处理(Processing)"></a>生豆处理(Processing)</h2><p>咖啡在采收后进行精制处理的方式对一杯咖啡的风味有很大影响，因此如何描述和推销精致处理法越来越重要。精致处理对咖啡质量影响甚巨，越来越多老练的咖啡生产者开始通过操纵精制处理流程的差异来制作特定质量的产品。</p><p>采收后，所有咖啡浆果会送到湿处理厂，在这里进行从剥除外果皮到晒干咖啡豆等系列程序，才能达到合适的存储状态。「咖啡豆的含水率从60%到11%～12%，防止运送过程中腐坏」</p><p><img src="/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/process.jpg" alt></p><p><strong>日晒处理法(dry process)</strong></p><p>最古老的生豆精制处理法：将采收后的咖啡浆果直接铺成薄薄一层，接受阳光暴晒。有些产区会将浆果放在砖制的露台上，有些则使用特质的架高式日晒专用桌，让浆果享受更多空气对流，干燥效果更均匀。日晒过程中不断翻动浆果，避免发霉，过度发酵或腐败。当浆果达到适当含水率时（11%）用机器将外果皮及硬壳脱除，在出口前以生豆的状态保存。</p><p>日晒处理偶尔会添加宜人的好味道，但多数是令人不舒服的气味。</p><p>在全世界的产区中，日晒处理法通常被视为用来制作质量非常低或未成熟果较多批次的方式。多数选择用日晒处理高质量咖啡豆的人会发现，用日晒处理更昂贵，因为要照顾好这些豆子需要付出更多专注力以及劳动力。</p><p>不论哪个品种或在哪个微气候区域，日晒处理通常为为咖啡增加水果般的风味。所谓水果风味通常为蓝莓、草莓、热带水果等，但有时候也会产生负面风味，比如谷仓边的土地味，野性风味，过度发酵及粪便味等。</p><p>日晒处理法是一种相对难以预测的精致处理法，经过高质量采收批次有可能因为这一处理法而变质，造成难以挽回的失败和生产者的重大经济损失。</p><p><strong>水洗处理法</strong></p><p>水洗处理法的目的是在干燥程序之前去除咖啡豆上黏糊糊的果肉层，如此可大大降低干燥程序中可能出现的变量，因此咖啡豆可能会有较高的经济价值。不过会花费更多成本。</p><p>在采收后浆果会用去皮机将外果皮及大部分果肉从咖啡豆上分离，随后被引导至一个干净的水槽，浸泡水中进行发酵。</p><p>发酵程序所需的时间与许多因素有关，包括海拔高度以及周围环境的温度，温度越高的环境发酵越快。如果咖啡豆在发酵过程中浸泡太久，负面风味就会增加。</p><p>发酵完成后进行干燥，基本与日晒相同。</p><p>相较别的处理法，水洗处理法往往使得咖啡豆呈现出酸味稍高、复杂度较强及更干净的杯中特质。</p><p>干净是个非常重要的词，意指一杯咖啡没有负面风味，，如瑕疵风味或者不寻常的尖锐感（harshness）及涩感（astringency）</p><blockquote><p>水洗处理法发酵过后的污水可能产生危害环境的毒性。</p></blockquote><p><strong>以下为混合式处理法：</strong></p><p><strong>去果皮日晒处理法</strong></p><p>主要在巴西使用的处理法，由设备制造商Pinhalese经过多次实验研发出来的成果，实验方向就是用比水洗法更少的水制作出高质量的咖啡豆。</p><p>在采收之后，咖啡果实用去果皮机剥除外果皮会大部分的果肉层，直接送至露台或高架式日晒专用桌进行干燥。保留的果肉越少，越能降低瑕疵豆的风险，但小部分的果肉仍会给咖啡豆贡献更多的甜味与风味的厚实度。需要留意脱除果皮、果肉后的干燥程序。</p><p><strong>蜜处理法</strong></p><p>接近果皮日晒处理，主要在哥斯达黎加和萨尔瓦多等为数不少的中美洲国家使用。采收后的咖啡果实一样用去果皮机剥除外果皮，但会比果皮日晒处理法使用更少的水。</p><p>去果皮机可以控制让多少果肉层保留在豆表硬壳上，因此该制作可以称为100%蜜处理或20%蜜处理等。</p><p>保留越多果肉层，进行干燥程序时产生过度发酵风味的瑕疵风险就越高。</p><p><strong>半水洗处理 / 湿磨处理法</strong></p><p>印度尼西亚常用的处理法，当地称为giingbasah。采收后的浆果脱除果皮后，会进行短时间的干燥程序。</p><p>与其他处理法不同的是，这一处理法不直接将咖啡豆晒到含水量11%～12%的程度，而是晒到含水率30～35%时先脱去内果皮，让生豆表面直接暴露出来，之后继续晒干，直到达到不易腐坏、方便存储的含水率，这两次干燥方式赋予咖啡豆沼泽般的深绿色外观。</p><p>半水洗处理法使咖啡豆具备较低的酸度，同时具有更醇厚的特性，这一处理法也制作出很多不同的风味。</p><h2 id="咖啡烘培-Coffee-Roasting"><a href="#咖啡烘培-Coffee-Roasting" class="headerlink" title="咖啡烘培(Coffee Roasting)"></a>咖啡烘培(Coffee Roasting)</h2><p>在咖啡产业里，烘焙是很吸引人的一个环节。咖啡生豆几乎没有风味可言，甚至有一种不讨喜的蔬菜味。但烘焙后的就会转变为不可思议的芳香而又风味复杂的咖啡熟豆。</p><p>总的来说，全世界的精品咖啡烘焙商都依靠自我训练，其中许多通过不断试错而学到精品咖啡贸易的精髓。不同的咖啡烘焙商有各自的风格，、美学理念和烘焙哲学，对如何重视他们想要的咖啡质量十分清楚，但不见得了解烘焙全貌，因为要烘焙出不同风格可能存在困境。</p><p>简言之，咖啡烘焙指的是咖啡豆最后的颜色烘到多深，要花多长时间，轻描淡写的说某种咖啡是浅烘的，这样不够，因为这种咖啡可能是快炒也可能是慢炒，不同的烘焙速率会带来截然不同的风味体现，尽管颜色相近。</p><p>咖啡在烘焙时会发生一系列不同的化学反应，很多反应让重量减少，当然也会造成水分流失。慢炒（14～20分钟完成烘焙）会有较高的失重量比（16% ～ 18%），快炒最快可以在90s内完成。对于一杯昂贵的咖啡而言，慢炒的方式会呈现出更好的风味。</p><p>三个决定咖啡最终风味的要素必须控制得当：酸味、甜味、苦味。一般而言，总体烘焙时间越久，最后留下的酸味就越少，相反，苦味则随着烘焙时间增加而增强，也深烘焙的咖啡越苦。甜味的发展呈现钟形曲线状，介于酸味和苦味高峰之间，好的咖啡烘焙商知道如何让咖啡豆达到每个烘焙度中的甜度峰值。但无论使用酸甜程度皆强的烘法还是甜度极高，酸度较弱的烘法，如果你使用的咖啡豆质量差，调整烘焙手法可能也无济于事。</p><p><strong>咖啡烘焙阶段：</strong></p><p>第一阶段：去除水分</p><p>咖啡生豆含有7% - 11%的水分，均匀分布与整颗咖啡哦度紧密的结构中，水分较多时，咖啡豆不会变成褐色。</p><p>第二阶段：转黄</p><p>多余水分被带出咖啡豆后，褐化反应第一阶段就开始了。咖啡豆在这个阶段结构依然紧实，且带有类似印度香米及烤面包的香气。</p><p>以上阶段至关重要，如果咖啡豆水分没有被适当去除，咖啡豆在之后的烘焙阶段无法实现均匀烘焙。即使咖啡豆表面看起来无碍，内部却可能没有熟透，冲煮风味令人不悦。</p><p>第三阶段：第一爆</p><p>褐化反应加速时，咖啡豆内开始产生大量气体及水蒸气。当内部压力变大时，咖啡豆开始爆裂，发出清脆异响。同时膨胀至两倍大小。这是烘豆师就可以自行选择何时结束烘焙。</p><p>第四阶段：风味发展初期</p><p>第一爆结束后，咖啡豆表面看上去会较为平滑，但仍有少许褶皱。这个阶段决定咖啡最终上色的深度和烘焙的实际深度。</p><p>第五阶段：第二爆</p><p>到这个阶段，咖啡豆再次发出爆裂声，不过声音较为细微和密集。这个阶段内部的油脂会容易被带到豆表，大部分酸味会消退，并产生一种新的风味，称为“烘焙味”。这种风味不会因为豆子种类不同而存在差异，因为成因为炭化或焦化作用，而非来自内部固有风味成分。</p><p>将咖啡豆烘焙到第二爆阶段更深的程度是很危险的，有时可能导致火灾。</p><p>其中“法式烘焙”和“意式烘焙”等烘培程度是烘焙到很深的的咖啡豆，有典型的高浓郁度、强烈的苦味，但多数豆子自身的个性会消失。如果你想认识来自不同产地的高品质咖啡的风味及个性，建议不要选择重度烘焙的豆子。</p><p>咖啡内的糖分：</p><p>咖啡生豆含有一定的单糖成分，在烘焙温度的催化下很容易发生反应。一旦咖啡豆内大部分水分蒸发以后，糖类就会与热量开始发生不同的反应，有些会产生焦糖化作用，使某些咖啡豆产生焦糖似得调性。但焦糖化之后，糖类的甜度会降低，最终变为苦味的来源之一；此外，有些糖类会与咖啡豆内的蛋白质相互作用，产生所谓的美拉德反应(Maillard reactions)，这种反应也包括肉类在烤箱内转变为褐色的现象以及烘焙可可豆时变色现象。</p><p>一爆后，单糖基本不存在了，可能都参与了不同的化学反应，最后转变为更多不同类型的咖啡芳香化合物。</p><p><img src="/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/bean.jpg" alt></p><p>咖啡内的酸成分：</p><p>咖啡豆中有许多酸，有些讨喜，有些不美味。对于烘豆师而言，最重要的是绿原酸(CGAs),烘焙咖啡时，重点目标是完全除去不够完美的酸，同时避免制造出更多负面风味因子，而保留更多讨喜的芳香成分。此外，有些酸在烘焙后保持稳定状态，例如：奎宁酸，会增加讨喜，干净的风味质感。</p><p>咖啡内芳香化合物：<br> 大多数咖啡的香气来自烘焙时的三大反应：美拉德反应，焦糖化反应以及斯特雷克降解反应。这些反应在咖啡烘焙时因受热而催化，最后产生超过800种不同的易挥发性芳香化合物，这就是咖啡风味的来源。</p><p>在咖啡烘焙完成后，必须快速将咖啡豆冷却，以免过度烘焙或是让咖啡豆发展出负面风味。</p><h2 id="咖啡的研磨（Grinding-Coffee"><a href="#咖啡的研磨（Grinding-Coffee" class="headerlink" title="咖啡的研磨（Grinding Coffee)"></a>咖啡的研磨（Grinding Coffee)</h2><p>研磨咖啡的目的是让咖啡豆在冲煮之前产生足够的表面积，以便萃取出封存于咖啡内部的成分。咖啡豆磨的越细，理论上就会有更大的表面积，可以用更快的速度煮出咖啡的味道，因为水有更多机会带出咖啡风味因子。</p><p>研磨机器：</p><p>螺旋桨刀片研磨机：电动研磨机十分常见，价格也不贵，机器构造是在电动马达上连接一组金属刀片，借助旋转的力量击碎咖啡豆，会产生极细和极粗的颗粒，冲泡时会导致风味很怪异。</p><p>磨盘式磨豆机：分电动和手动版本。磨盘式磨豆机有两个面对面的切割盘，通过调整切割盘的间距，可以调整研磨粗细。当咖啡豆被切割成符合间距的大小时，咖啡粉才能更均匀，同时可以调整粗细，对煮一杯好咖啡来说相当有帮助。如果你很喜欢咖啡，磨豆机的投资带给你的回报是无法以价格衡量的。冲煮意式浓缩咖啡时，颗粒大小非常重要，即使百分之一毫米的粗细差异也会造成影响。</p><p>不同机器制造商会使用不同材质制造的切割盘，比如钢或者陶瓷。一段时间后，磨盘上的刻痕会变钝，此时磨豆机不会以切割的方式磨豆子，而是以碾压的方式，这样会造成很多极细的粉末，导致咖啡乏味又苦涩。根据制造商的建议，定期更换磨盘是一项很小却很值得的投资。</p><blockquote><p>很多咖啡爱好者想升级设备，第一建议就是磨豆机。是非常值得的一项投资，一台低劣的磨豆机，很容易拉低一款咖啡豆的上限。</p></blockquote><p>研磨度调整：磨豆机并不能将咖啡豆磨成同样的大小，更具自己需求多做实验，调整到合适的研磨度。深烘焙的咖啡豆质较脆，因此必须将刻度调粗一些。同样要研磨海拔产地较高的咖啡豆，比如从巴西豆转换到肯尼亚，需要把刻度调细。</p><p><img src="/2020/07/16/%E4%B8%96%E7%95%8C%E5%92%96%E5%95%A1%E5%9C%B0%E5%9B%BE/grid.jpg" alt></p><p>冲煮用水：</p><p>水的角色：在意式浓缩咖啡中，水占了90%，在滤泡式咖啡中，水占了98.5%；如果冲泡咖啡的水不美味，那么咖啡也绝对不可能好喝。</p><p>在冲煮过程中，水扮演着溶剂的角色，负责萃取出咖啡粉内的风味成分，因为水的硬度以及矿物质含量会影响咖啡的萃取效率，所以水质相当重要。</p><p>硬度：水的硬度指水中含有多少水垢（碳酸钙）数值。硬水会改变咖啡粉内可溶出物质的比例，进而改变咖啡的化学成分比例，理想的水硬度较低，如果含量过高甚至极高，不适合泡咖啡。矿物质含量：不希望水中有太多其他东西：即含量很低的矿物质。</p><hr><p>UPDATING…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《世界咖啡地图-第二版》&quot;&gt;&lt;a href=&quot;#《世界咖啡地图-第二版》&quot; class=&quot;headerlink&quot; title=&quot;《世界咖啡地图 第二版》&quot;&gt;&lt;/a&gt;《世界咖啡地图 第二版》&lt;/h1&gt;&lt;p&gt;前言：&lt;strong&gt;这是属于咖啡的时代，喝咖啡不仅是种享受，而且充满乐趣。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《世界咖啡地图》是一本适用人群非常广的咖啡指南工具书，从小白到咖啡爱好者或是专业咖啡师，销量和很好的口碑说明了一切。是初学者眼中完美的咖啡入门指南，而对于专业选手，则是一本咖啡行业及领域的实用参考书，各种一手信息，图表对比，原产地资料等。&lt;/p&gt;
&lt;p&gt;作者是著名的咖啡师詹姆斯 霍夫曼，2007年WBC「世界咖啡师比赛」冠军，2008年英国杯测大赛冠军。拥有一个名为&lt;strong&gt;Square Mile Coffee Roasters的咖啡烘焙公司&lt;/strong&gt;，拥有17位专业人士，专注于为希望作出最好的咖啡的企业提供批发服务。而更为著名的黑鹰咖啡机VA388「少数星巴克臻选店会选用，也叫黑鹰店」出自他和另一位设计师之手，独特的重量控制系统，极大地提高了咖啡出品的稳定性，被视为划时代产品。&lt;/p&gt;
&lt;p&gt;据说：James Hoffmann在研究咖啡的时候曾看到《世界红酒地图》这本书，想到当今还没有这样关于咖啡的书，于是这本书就诞生了。他用整整两年时间走遍了各个咖啡产区，用他的这些阅历成就了《世界咖啡地图》&lt;/p&gt;
&lt;p&gt;本书由认识咖啡、咖啡制作、咖啡产地探源三个模块构成，并在第二版中首次将中国云南作为产地加入该咖啡地图中。&lt;/p&gt;
&lt;p&gt;仔细阅读并作了相关笔记，打算整理一下分享出来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;书中的内容真的很有启发很有意思，作者介绍基础的咖啡知识的同时也分享了很多自己对整个产业的思考和观察，极大引起读者的思考和兴趣。&lt;/p&gt;
&lt;p&gt;以下记录主要为书中内容，并结合自己知识和其他书本内容辅助，旨在构建一个比较清晰明朗的咖啡知识入门框架。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Books" scheme="https://superming.life/categories/Books/"/>
    
    
      <category term="Books" scheme="https://superming.life/tags/Books/"/>
    
  </entry>
  
  <entry>
    <title>Apple保修政策</title>
    <link href="https://superming.life/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/"/>
    <id>https://superming.life/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/</id>
    <published>2020-06-29T10:15:19.000Z</published>
    <updated>2021-02-01T16:01:42.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apple-保修政策-「更新至Mac、iPhone、AirPods」"><a href="#Apple-保修政策-「更新至Mac、iPhone、AirPods」" class="headerlink" title="Apple 保修政策-「更新至Mac、iPhone、AirPods」"></a>Apple 保修政策-「更新至Mac、iPhone、AirPods」</h1><p>自从用上Apple全家桶之后，日常生活已逐渐离不开Apple生态的产品了，而从产品角度来讲，不可避免会有所损伤或故障，这时候就很有必要了解一下相关产品的保修政策了。借此机会梳理一下Apple主要产品的保修政策。</p><blockquote><p>AppleCare+ 简称AC+。</p></blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>很多Apple用户对于Apple提供的相关保修政策可能不是很了解，先介绍一下。若了解可直接跳过。</p><p>以下讨论为国行机器，虽然Apple产品全球联保，但经过与Apple Store相关店员确认，因为每个国家都有其保修政策，具体实施上会根据硬件产品的相关差别产生很大的影响「配件不通用等问题」，可能无法保证服务质量。</p><p>Apple原话：</p><blockquote><p>当你购买 Apple 硬件产品时，你还将获得 Apple 一年有限保证项下的保修服务。通过购买可选的 AppleCare Protection Plan 全方位服务计划，你还可以获得其他额外益处。 根据三包规定，Mac 和 iPad 的主要部件将获得自购买日起两年的保修服务。 Apple 尊重中国的国家法律和地方法规。根据浙江的地方三包规定，浙江省的 Mac 台式电脑产品享有整机三年保修服务。</p></blockquote><a id="more"></a><p>据描述，若是在中国购买的Apple产品，Apple提供的以下保修服务：</p><ul><li>中国三包政策</li><li>Apple 一年有限保修服务</li><li>（可选）AppleCare Protection Plan 全方位服务计划</li></ul><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/2.png" alt="1"></p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/3.png" alt="3"></p><p><strong>如何区分以上几个政策：</strong></p><p><strong>中国三包政策</strong>：是政府为保障消费者权益而设立的政策，对相关电子产品的保修服务等作出强制的售后规定。苹果要卖电子产品必须遵守的。可以简单理解为是<strong>国内的标准三包</strong>，仅适合国内保修。</p><p><strong>Apple 一年有限保修服务</strong>：这个可以理解为<strong>Apple自己设立标准的三包</strong>，包含90天的电话技术支持，保修期限为一年，适合全球联保。</p><p><strong>AppleCare Protection Plan 全方位服务计划</strong>：即是AppleCare+服务计划，钱购买Apple的保险服务，主要特点在于延长了保修期限，Apple技术支持，<strong>最主要的是包含了因意外使用导致设备损坏，可以大大降低维修费用</strong>，且支持全球联保，可以在全球任何Apple门店享受以上服务。</p><blockquote><p>除了AC+之外的保修服务主要是Apple产品因为质量问题导致的故障。</p></blockquote><h2 id="Mac保修政策"><a href="#Mac保修政策" class="headerlink" title="Mac保修政策"></a>Mac保修政策</h2><p>首先了解一下Appe产品在中国的官方保修政策，也就是只要你购买，就享有以下保修服务：</p><blockquote><p><strong>保修期限</strong></p><ul><li>Mac <strong>电脑整机及所含附件</strong>自原始购买之日起享有 1 年保修期。</li><li><strong>主要部件</strong>享有自购买之日起 2 年保修期。<ul><li>Mac 台式电脑所有主要部件包括：主板 (MLB)、处理器 (CPU)、内存、硬盘 (HDD/SSD)、电源和显卡。</li><li>Mac 笔记本电脑所有主要部件范围包括主板 (MLB)、处理器 (CPU)、内存、硬盘 (HDD/SSD)、电源适配器、键盘和显示屏 (LCD)。</li></ul></li></ul><p><strong>维修方式</strong></p><ul><li>根据具体的故障情况对设备进行维修。</li><li>所有更换的部件和附件都是全新的。</li><li>更换的<strong>非主要部件和附件</strong>享受原有保修期的剩余时长或自更换日起 90 天的保修期，以二者中期限较长者为准。更换后的<strong>主要部件</strong>享有重新计算的 2 年保修期。</li></ul></blockquote><p>需要注意的是主要部件和非主要部件和附件之间的区分。两者的保修策略是不同的。在部件使用保修之后，根据保修部件重置保修时长。</p><p>划重点：</p><p>Apple在保修中特别提到：<strong>如果在浙江购买的台式机电脑可以享受整机3年保修</strong>（也就是所有部件），约等于免费赠送AppleCare的延保计划。而且是整机3年保修，不再分主次部件之分。但是限制条件是：<strong>在浙江购买的Mac台式电脑只有在浙江当地指定的维修点才能享受所有部件三年的保修。</strong></p><p>该政策的问题在于Apple通过何种方式鉴别是否为浙江省购买的用户，若冲这个服务去的，最佳的方案是在Apple浙江的零售店「天一广场店、杭州万象城店、西湖店」进行产品的购买，并保留购买凭证，然后有问题去浙江的门店维修。「有反馈说官网买，浙江地区收货，店员拒绝承认是浙江购买的例子，故最保险的还是去Apple Store购买」具体的维修政策可能有很大差异，视帮你维修的店员为准。</p><h3 id="Mac的AppleCare-服务"><a href="#Mac的AppleCare-服务" class="headerlink" title="Mac的AppleCare+服务"></a>Mac的AppleCare+服务</h3><p>Mac的AppleCare服务相关政策参考链接：<a href="https://www.apple.com.cn/support/products/mac/">AppleCare</a></p><blockquote><p>适用于 Mac 的 AppleCare+ 服务计划可提供长达 <strong>3 年的专家技术支持</strong>，以及来自 <strong>Apple 的额外硬件保修服务</strong>，包括<strong>最多两次意外损坏保修服务</strong>，每次需收取相应的服务费：对于屏幕损坏或机身外壳损坏，收取 RMB 799 的服务费；对于其他损坏，收取 RMB 2299 的服务费。服务期自购买 AppleCare+ 服务计划之日开始。</p><p>中国的消费者权益保护法包括“三包”规定，赋予了消费者自购买 Mac 之日起 2 年的主要部件质量问题保修服务。在浙江省，消费者权益保护法赋予了消费者自购买之日起 3 年的台式电脑质量问题保修服务。在此基础之上，大多数 Apple 产品也附带 90 天的免费电话技术支持，以及来自 Apple 的 1 年有限保修服务。</p></blockquote><p><strong>重点整理：</strong></p><ul><li><p>三年专家技术支持</p></li><li><p>硬件维修范围</p><ul><li><p>你的Mac电脑、所含配件、Apple内存、AirPort、Apple USB全能光驱  「<strong>以上硬件在保修范围内被鉴定损坏，可享受免费保修</strong>」</p></li><li><p>最多两次意外损坏保修服务，屏幕损坏或机身外壳损坏，收取799服务费，其他损坏，收取2299服务费。「<strong>意外损坏非产品质量问题，而是你使用不当造成的损坏，但收费远低于过保的价格</strong>」</p><blockquote><p>这边涉及的其他损坏，一般涉及主板相关的更换，我咨询过杭州湖滨银泰的Apple Store，仅仅是键盘损坏，就需要对整块主板进行更换。</p></blockquote></li></ul></li><li><p>电池维修服务</p><ul><li>当电池容量低于原规格标示的80%左右时，可以获得电池维修服务。「<strong>免费更换</strong>」</li></ul></li><li><p>软件支持</p><ul><li>masOS 和 iCloud的使用</li><li>快速解答各种Apple品牌app的使用方法问题。</li></ul></li></ul><p>对于意外损坏之外的硬件产品，只要是三年内非人为损坏，均可进行免费的维修和更换，不需要材料的维修费用和维修人工费用。而其余的人为损坏，比如倒水导致主板烧掉，屏幕摔坏等等，即可享受意外损坏保修服务。不论电池或者意外损坏，一次便可回本，对于高强度使用者，或者平日比较马大哈的朋友，是很值得考虑的一个选项。</p><blockquote><p>Mac的电池损耗次数设定为1000次。若外出需求较大，三年内即便正常使用很容易达到规定的循环次数，也就是电池容量损耗至80%以下，免费更换一下电池，继续挺几年，还是比较划算的。</p></blockquote><p>保外的电池更换费用如下「血贵」：</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/4.png" alt="xx"></p><h3 id="不在AppleCare保修范围内的情况："><a href="#不在AppleCare保修范围内的情况：" class="headerlink" title="不在AppleCare保修范围内的情况："></a>不在AppleCare保修范围内的情况：</h3><p><strong>下列条款适用于所有AppleCare产品</strong></p><p><a href="https://www.apple.com/legal/sales-support/applecare/appmacchszh.html">链接</a></p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/5.png" alt></p><h3 id="Apple-Care购买"><a href="#Apple-Care购买" class="headerlink" title="Apple Care购买"></a>Apple Care购买</h3><ol><li>AppleCare+ 服务计划可在购买新 Mac 的同时进行购买。</li><li><p>或可在购买 Mac 之日起 60 天内通过以下方式进行购买：</p></li><li><ul><li>前往 Apple Store零售店 (需检查你的 Mac 及其购买凭证)</li><li>致电 400-666-8800 (需运行远程诊断功能并提供购买凭证)</li></ul></li></ol><h3 id="AppleCare取消或转让"><a href="#AppleCare取消或转让" class="headerlink" title="AppleCare取消或转让"></a>AppleCare取消或转让</h3><p>只要没有超过AppleCare的保障期限，AppleCare是可以无理由退订或转让的。但是退款费用上回根据实际情况调整。</p><blockquote><ul><li>如果在购买 AppleCare 计划之日起的 30 天内取消该计划，您则将获得全额退款，但要扣除所有已提供服务的相应费用。</li><li>如果您在购买 AppleCare 计划的 30 天后取消这一计划，则会根据 AppleCare 计划保障的未到期天数按比例退款，并扣除所有已提供服务的相应费用。</li></ul></blockquote><p>费用折损计算：</p><blockquote><p>如果您在购买本计划或接受本计划的条款和条件（以后发生者为准）的三十 (30) 天内取消，您将收到在扣除已根据本计划提供服务的服务费后的全部退款。<strong>如果您在收到本计划的三十 (30) 天后取消，您将获得的退款金额为：本计划原购买价格的按比例退款（具体比例取决于自购买本计划之日算起的剩余保修期所占百分比）减去 (a) 取消手续费，即 160 元（人民币）或按比例退款金额的 10%（以二者中较低者为准）</strong></p></blockquote><p>转让手续：</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/6.png" alt></p><h2 id="iPhone保修政策"><a href="#iPhone保修政策" class="headerlink" title="iPhone保修政策"></a>iPhone保修政策</h2><p>iPhone的AC+政策略微复杂，还包含了Apple推出的年年换新活动。<a href="https://www.apple.com.cn/support/products/iphone/">AppleCare For iPhone</a></p><p>价格：</p><blockquote><p>iPhone11、iPhoneXR、iPhone 8 Plus：1399元</p><p>iPhone11 Pro、iPhone 11 Pro Max、iPhone 11 XS、iPhone 11 XS Max：1799元</p></blockquote><p>介绍：</p><blockquote><p>每部 iPhone 均可在有限保修期内享有 <strong>1 年的硬件保修服务</strong>和<strong>长达 90 天的免费电话技术支持</strong>。适用于 iPhone 的 AppleCare+ 服务计划可为你提供自购买该服务计划之日起为期 2 年的维修服务，还可获得最多两次意外损坏保修服务，每次需收取相应的服务费：对于屏幕损坏，收取 RMB 188 的服务费；对于其他任何损坏，收取 RMB 628 的服务费。</p></blockquote><p>具体内容：</p><blockquote><ol><li>保修从1年升至2年。</li><li>优先获得Apple专家的帮助，主要大城市提供当日服务。</li><li>硬件维修包含：iPhone整机、电池、包含的耳机和配件。</li><li>最多两次意外损坏保修服务，屏幕损坏，每次收取188元；其他损坏，每次收取628元。</li><li>电池容量低于原规格标示的80%时，可获得电池维修服务。</li><li>解决软件支持相关问题。</li></ol></blockquote><p>所有AC+如果全款购买，均可在中途退款取消或者转移。</p><h3 id="那么iPhone的AC-划算吗？"><a href="#那么iPhone的AC-划算吗？" class="headerlink" title="那么iPhone的AC+划算吗？"></a><strong>那么iPhone的AC+划算吗？</strong></h3><h4 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h4><p>根据朋友使用情况及查阅相关资料了解，iPhone电池在2年内用到80%以下，还是有点难度的，应该需要超级重度暴力使用才能做到，想要蹭电池免费换新看运气。</p><p>保外相关维修费用如图，</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/9.png" alt="维修"></p><h4 id="屏幕维修"><a href="#屏幕维修" class="headerlink" title="屏幕维修"></a>屏幕维修</h4><p>部分型号屏幕更换费用如下：</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/11.png" alt></p><p>简单算一下，如果使用的是iPhone 11，在2年内屏幕坏了一次，需要花费1399的AC+购买费用和188的屏幕维修费，总计1587元。而单次维修费用为1549元，购买AC+的成本甚至更高。</p><p>假设用户更厉害一点，一年坏了两次屏幕，则购买AC+后的维修费用为1775元，未购买AC+的费用为3098元。这种情况貌似有点划算，但前提是用户够狠。</p><h4 id="其他维修定价"><a href="#其他维修定价" class="headerlink" title="其他维修定价"></a>其他维修定价</h4><blockquote><p>是否需要针对其他问题（如<strong>主屏幕按钮、浸液损坏或配件</strong>）进行维修？</p><ul><li>如果您的 iPhone 问题在 Apple 保修、AppleCare 计划或消费者权益法的保障范围内，我们不会收取任何费用。<strong>这不包括意外损坏，意外损坏的维修会产生一定的费用。</strong></li><li>如果您的 iPhone 存在意外损坏，而您享有 AppleCare+ 服务计划保障，则<strong>可使用其中的一次意外损坏保障来将维修纳入保障范围</strong>。如下文所示，每次提供意外损坏保障时都会收取一定的 AppleCare+ 服务计划服务费。 </li><li>如果您的 iPhone 已损坏，而您不享有 AppleCare+ 服务计划保障，<strong>则维修费用会因具体的维修内容而异，最高不会超出下文所示的保外维修费用</strong>。这些保外维修价格适用于由 Apple 提供的维修。Apple 授权服务提供商可能会自行设定相应的费用。</li></ul></blockquote><p>这里就当主板维修费用，详细如下：</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/10.png" alt></p><p>再次以iPhone11举例，使用AC+进行一次主板维护需要花费1399元的AC+购买费用以及628元的主板维修费用，总计2027元。而单次维修需要3109元。</p><p>血赚有没有？有个头。但问题是，多少用户会在使用的时候把主板都用烂，而且在两年之内，我想几率应该很小很小。你要是喜欢带着iPhone潜水，推荐购买。</p><h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><p>iPhone的AC+的保修条件相对比较难达到，且一般可以通过改变使用方式等进行避免。</p><p>但如果有摔手机等其他特殊癖好，对Apple屏幕、主板等质量信不过的朋友，非常推荐购买。</p><p>当然，重度使用者对电池消耗也相对较大，可以购置一个AC+以防万一。</p><p>性价比如上描述，最后根据个人情况选择即可。</p><h3 id="年年换新"><a href="#年年换新" class="headerlink" title="年年换新"></a>年年换新</h3><p>最后介绍一下Apple的年年换新活动，具体政策查看链接啊：<a href="https://www.apple.com.cn/shop/iphone/iphone-upgrade-program">iPhone年年换新计划</a></p><p>官方介绍挺明白的：</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/12.png" alt></p><p>年年换新购买条件之一是需要在Apple Store零售店购买手机的同时购入AppleCare+计划。应该是Apple希望回收的时候保证机子的质量。</p><p>主要<a href="https://www.apple.com.cn/legal/sales-support/iphoneupgrade_cn/">年年换新条款</a>如下：</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/13.png" alt="f"></p><p>需要留意的是在换购时需要保证iPhone状态完好，如第六条所示。</p><p>举个例子，如果你使用iPhone11，且满足换新条件，原价6000购入，在条件期间购买新款手机可以抵价3000元。</p><p>但一年使用的手机带AC+，按苹果二手回收价格来看，感觉不是很划算。根据需求判断。</p><h2 id="Airpods保修政策"><a href="#Airpods保修政策" class="headerlink" title="Airpods保修政策"></a>Airpods保修政策</h2><p>介绍：</p><blockquote><p>AppleCare+ 服务计划可为 AirPods、Beats 入耳式耳机或 Beats 头戴式耳机<strong>提供自购买该服务计划之日起长达 2 年的专家技术支持，以及额外硬件保修服务，还可获得最多两次意外损坏保修服务，每次收取 RMB 199 的服务费</strong>。</p><p>中国的消费者权益保护法包括“三包”规定，赋予了消费者自购买之日起 3 个月的有线耳机质量问题保修服务。在此基础之上，大多数 Apple 产品还附带 90 天的免费电话技术支持，以及来自 Apple 的1 年有限保修服务。</p></blockquote><p>Airpods默认一年保修，是针对<strong>产品本身质量问题</strong>导致的问题提供一年的保障，比如电池非正常老化，蓝牙连接不稳定，电流声严重等产品质量上的问题。</p><p>但不包含意外损坏，<strong>比如喝汤的时候耳机掉到碗里淹死了，被朋友用诺基亚砸烂，用户酷爱解剖等意外不可控因素</strong>，若日常生活中可能包含以上条件，那么AppleCare+的重要性不言而喻。</p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/8.png" alt="e"></p><p>AC+具体内容：</p><blockquote><p>1.保修延长至两年，优先获得技术支持。</p><p>2.电池容量低于80%可以<strong>免费</strong>换新。</p><p>3.若在保修的两年期限内，被诺基亚砸烂了，给耳机洗澡了，解剖了等等，我在购买AC+的时候特地问过店员，只要你把耳机尸体拿到店里，仍然能够识别出是你的耳机（序列号检测），耳机坏了就换耳机，壳子坏了换壳子，两个都坏了就都换，<strong>算一次意外保修</strong>，只需要再支付199元的服务费即可。而且他也特地强调了<strong>只换不修</strong>，因为使用了高精密的Sip封装，维修难度及成本不如换新来的方便。「具体售后为准」</p><p>4.USB充电线也包含在内，不包含在意外次数内的。</p></blockquote><p>但是需要明确的是，不能丢！！<strong>AppleCare+不为丢失或被盗的Airpods提供保障</strong>。详见：<a href="https://support.apple.com/zh-cn/airpods/repair/service">Airpods服务和维修</a></p><p><img src="/2020/06/29/Apple%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/7.png" alt="x"></p><h3 id="为什么我认为这是性价比最高的AppleCare"><a href="#为什么我认为这是性价比最高的AppleCare" class="headerlink" title="为什么我认为这是性价比最高的AppleCare+"></a>为什么我认为这是性价比最高的AppleCare+</h3><ol><li>电池。根据以往几代反应的情况来看，如果你是中度或者重度使用，两年内电池是很难挺住的。假设耳机一天一次电池循环，两年内500次循环一般也挺不住。这时候就可以拿去售后检测换一个全新的耳机，还是挺香的。</li><li>因为是真无线耳机，摆脱线控之后，适用各种使用场景，场景一多，意外受损的几率就大很多，购买AC+在使用时便会舒心很多。</li><li>假设你要转卖，转卖前使用意外险换新还能卖个好价钱。</li><li>保外维修费用昂贵。AirPods Pro单只耳机和充电盒均705元 电池379元，AirPods单只耳机和无线充电盒均549元，有线的盒子479元，电池379元。「一次意外保险费用算上AC+为 299 + 199 = 499，相当于499换新」</li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>购买AC+后的凭证需要保存好，流程一般会要求提供耳机购买凭证、AC+购买凭证以及耳机尸体才可以保修。</p><p>最好通过Apple官方渠道购买AC+，看到有第三方直接用AC+的名字让消费者购买却不是Apple官方的AC+。</p><p>尽量避免极限使用获取更长久的电池续航。</p><blockquote><p>AC+并不便宜，受财力限制及各种分析未购买AC+，且打算小心使用耳机的朋友，<strong>好好充电是很重要的</strong>，Apple产品质量上出问题的可能性不是很大，但电池损耗属于物理性损耗，电池产业在技术上没有革新的情况下，即使Apple使用了较好的电池，也很难避免电池的损耗，一般消费级电子产品使用多为锂电池，切忌将电量用到极低后再进行充电（20%以下），此时对于电池寿命的损耗是很大的。</p></blockquote><hr><p>参考：</p><p><a href="https://post.smzdm.com/p/akmr45nr/">AppleCare 扫盲帖，三年苹果狗告诉你 AppleCare 到底值不值得买？</a></p><p><a href="https://support.apple.com/zh-cn/warranties">中国官方保修政策</a></p><p><a href="https://www.apple.com.cn/support/products">AppleCare 产品</a>,</p><p><a href="https://www.apple.com.cn/legal/statutory-warranty/">Apple 产品与中国消费者权益相关法律法规</a></p><p><a href="https://support.apple.com/zh-cn/repair/products">产品服务和维修信息</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Apple-保修政策-「更新至Mac、iPhone、AirPods」&quot;&gt;&lt;a href=&quot;#Apple-保修政策-「更新至Mac、iPhone、AirPods」&quot; class=&quot;headerlink&quot; title=&quot;Apple 保修政策-「更新至Mac、iPhone、AirPods」&quot;&gt;&lt;/a&gt;Apple 保修政策-「更新至Mac、iPhone、AirPods」&lt;/h1&gt;&lt;p&gt;自从用上Apple全家桶之后，日常生活已逐渐离不开Apple生态的产品了，而从产品角度来讲，不可避免会有所损伤或故障，这时候就很有必要了解一下相关产品的保修政策了。借此机会梳理一下Apple主要产品的保修政策。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AppleCare+ 简称AC+。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;很多Apple用户对于Apple提供的相关保修政策可能不是很了解，先介绍一下。若了解可直接跳过。&lt;/p&gt;
&lt;p&gt;以下讨论为国行机器，虽然Apple产品全球联保，但经过与Apple Store相关店员确认，因为每个国家都有其保修政策，具体实施上会根据硬件产品的相关差别产生很大的影响「配件不通用等问题」，可能无法保证服务质量。&lt;/p&gt;
&lt;p&gt;Apple原话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你购买 Apple 硬件产品时，你还将获得 Apple 一年有限保证项下的保修服务。通过购买可选的 AppleCare Protection Plan 全方位服务计划，你还可以获得其他额外益处。 根据三包规定，Mac 和 iPad 的主要部件将获得自购买日起两年的保修服务。 Apple 尊重中国的国家法律和地方法规。根据浙江的地方三包规定，浙江省的 Mac 台式电脑产品享有整机三年保修服务。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="https://superming.life/categories/Tech/"/>
    
    
      <category term="Tech" scheme="https://superming.life/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Mapreduce</title>
    <link href="https://superming.life/2020/05/18/Mapreduce/"/>
    <id>https://superming.life/2020/05/18/Mapreduce/</id>
    <published>2020-05-18T01:58:58.000Z</published>
    <updated>2021-02-01T16:02:00.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapreduce"><a href="#Mapreduce" class="headerlink" title="Mapreduce"></a>Mapreduce</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>分布式并行编程可以大幅提高程序性能，实现高效的批量数据处理。分布式程序运行在大规模计算机集群上，集群中包含大量廉价服务器，能够并行执行大规模数据处理任务，从而获得海量的计算能力。MapReduce就是一种并行编程模型，用于大规模数据集的并行运行，将复杂的，运行于大规模集群上的并行计算高度抽象到两个函数<strong>Map</strong>和<strong>Reduce</strong>，两个函数及其核心思想源自函数式编程语言。</p></blockquote><p>谷歌最先提出了分布式并行编程模型MapRecude，Hadoop MapReduce是其开源实现。前者运行在DFS上，后者运行在HDFS上。</p><p>在MapReduce中，一个存储在分布式文件系统中的大规模数据集会被切分为许多独立的小数据块，这些小数据块可以被多个Map任务并行处理。<u>MapReduce框架会为每个Map任务输入一个<strong>数据子集</strong>，Map任务生成的结果会继续作为Reduce任务的输入，最终由Reduce任务输出最后结果，并写入分布式文件系统。</u>「适合用MapReduce来处理的数据集需要满足一个前提条件：待处理的数据集可以分解成许多小的数据集，而且每个小数据集都可以完全并行进行处理。」</p><p>MapReduce的一个设计理念为<strong>“计算向数据靠拢”</strong>而非“数据向计算靠拢”。主要是因为移动数据需要大量的网络传输开销，尤其在大规模数据环境下，移动计算比移动数据更加经济。所以在集群中，MapReduce框架会将每个Map程序就近在HDFS数据所在的节点运行，即将计算节点和存储节点一起运行，减少移动数据开销。</p><p>综上，MapReduce是一个<strong>基于集群的高性能并行计算平台</strong>，MapReduce是一个<strong>并行计算软件框架</strong>，MapReduce是一个<strong>并行程序设计模型与方法</strong>。</p><a id="more"></a><h2 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h2><p>MapReduce核心是Map函数和Reduce函数，开发者只需要关注Map和Reduce函数的实现即可，不需要处理其他复杂的问题，比如分布式存储、工作调度、负载均衡等。</p><p>MapReduce使用列表和键值对<key, value>作为主要的数据模式。</key,></p><p><img src="/2020/05/18/Mapreduce/structure.png" alt></p><h3 id="Map函数"><a href="#Map函数" class="headerlink" title="Map函数"></a>Map函数</h3><p>Map函数的输入来自分布式文件系统的文件快，这些文件块的格式是任意的，可以是文档，也可以是二进制格式的。文件块是一系列元素的集合，这些元素也是任意类型的。Map函数将输入元素转化为键值对，<strong>键和值的类型也是任意的</strong>，其中键不同于一般的标志属性，键没有唯一性，不能作为输出身份标识。即使是同一输入元素也可以通过Map任务生成具有相同键的多个<key, value>。</key,></p><h3 id="Reduce函数"><a href="#Reduce函数" class="headerlink" title="Reduce函数"></a>Reduce函数</h3><p>Reduce函数的任务就是将输入的一系列具有相同键的键值对以某种方式组合起来，输出处理后的键值对，输出结果会合并成一个文件。用户可指定Reduce任务个数，通知实现系统，然后主控进程通常选择一个Hash函数，Map任务输出的每个键都会经过Hash函数计算，并更具哈希结果将该键值对输入相应的Reduce任务处理。</p><p><img src="/2020/05/18/Mapreduce/process.png" alt></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/2020/05/18/Mapreduce/workflow.png" alt></p><p>MapReduce的核心思想可以用“分而治之”描述，如上流程图可知，即将一个大的数据集拆分成多个小数据块在多台机器上并行处理。Map任务一般在数据节点上运行，以减少多余开销。只有在Map任务结束后，中间结果会被分发到多个Reduce中。</p><p>需要注意的是：不同的Map任务之间不会进行通讯，不同的Reduce任务之间也不会发生任何信息交换；用户不能显式地从一台机器向另一台机器发送消息，所有数据交换都通过MapReduce自身去实现的。</p><p>在执行过程中，Map任务输入文件，Reduce任务的处理结果保存在分布式文件系统中，而Map任务处理得到的中间结果则保存在本地磁盘中，只有Map任务处理结束后，Reduce过程才开始；所以Map任务需要考虑到数据的局部性。</p><h3 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h3><p>MapReduce执行阶段如下：</p><p><img src="/2020/05/18/Mapreduce/phase.png" alt></p><ol><li>MapReduce使用<strong>InputFormat</strong>模块作为Map的预处理；然后将输入文件切分为逻辑上的多个<strong>InputSplit</strong>，<em>InputSplit是MapReduce对文件进行处理和运算的输入单位。</em>「实际上InputSplit并没有对文件进行切割，而是记录了需要处理数据的位置和长度」</li><li>通过<strong>RecordReader</strong>（RR）根据InputSplit里面的信息处理具体数据，加载数据并转换为适合的Map任务读取的键值对，输入给Map任务。</li><li>Map根据用户自定义的映射规则，输出一些列键值对作为中间结果。</li><li>为了让Reduce可以并行处理Map的结果，需要对Map的输出进行一定的分区(Portition)、排序(Sort)、合并(Combine)、归并(Merge)等操作，得到中间结果，然后交给对应的Reduce处理，该过程为<strong>Shuffle</strong>。从无序的键值对到有序的键值对。</li><li>Reduce以一系列中间结果作为输入，执行用户定义的逻辑，输出结果给OutputFormat模块。</li><li><strong>OutputFormat</strong>模块验证输出目录是否已经存在以及输出结果类型是否符合配置文件中的配置类型，如果都满足，就输出Reduce结果到分布式文件系统。</li></ol><h3 id="Shuffle过程"><a href="#Shuffle过程" class="headerlink" title="Shuffle过程"></a>Shuffle过程</h3><p>Shuffle是MapReduce的核心环节。Shuffle过程即对Map输出结果进行分区、排序、合并等处理交给Reduce过程，故分为Map端操作和Reduce端操作，Shuffle过程如下图。</p><p><img src="/2020/05/18/Mapreduce/Shuffle1.png" alt></p><p>Map的输出结果首先被写入缓存，缓存满后进行溢写操作，即把缓存中的数据写入磁盘文件，清空缓存。当启动溢写操作时，首先把缓存中的数据写入分区，然后对每个分区的数据进行排序、合并，之后再写入磁盘文件。每次溢写操作生成一个新的磁盘文件，随着Map任务执行，磁盘中就会有多个溢写文件，任务结束后，这些文件被归并（Merge）为一个大的磁盘文件。然后通知Reduce任务领取属于自己处理的数据。Reduce任务领取数据后，将其归并写入磁盘后交给Reduce处理。</p><h4 id="Map端的Shuffle过程"><a href="#Map端的Shuffle过程" class="headerlink" title="Map端的Shuffle过程"></a>Map端的Shuffle过程</h4><ol><li>输入数据和执行Map任务</li></ol><p>Map任务的输入数据保存在分布式文件系统的文件块中，文件格式任意。Map任务接收<key , value>作为输入后，按一定的映射规则转换成一批<key , value>进行输出。</key></key></p><ol><li>写入缓存</li></ol><p>每个Map任务都会分配一个缓存，Map输出结果先写入缓存中，在缓存满后才写入磁盘。可以大大降低开销。</p><ol><li>溢写（分区、排序和合并）</li></ol><p>提供给MapReduce的缓存容量时有限的，一旦占满缓存就执行溢写（Spill）操作，把缓存中的内容一次性写入磁盘并清空缓存。在溢写到磁盘前，缓存中的数据先被分区（Partition），以键值对形式存储；对于每个分区的键值对，后台线程根据其Key对其进行内存排序（Sort），排序是MapReduce默认操作，排序结束后执行合并（Combine）操作，合并操作根据用户定义的执行。</p><ol><li>文件归并</li></ol><p>在Map任务全部结束之前，系统会对所有溢写文件中的数据进行归并（Merge），生成一个大的溢写文件。这个大的溢写文件中所有键值对也是经过分区和排序的。</p><p>综上，Map端的Shuffle过程全部完成，最终生成一个大文件存放在本地磁盘上。其中JobTracker会一直检测Map任务执行，当检测到一个Map任务完成后，立即通知相关Reduce任务来领取数据。</p><h4 id="Reduce端的Shuffle过程"><a href="#Reduce端的Shuffle过程" class="headerlink" title="Reduce端的Shuffle过程"></a>Reduce端的Shuffle过程</h4><p>Reduce端的Shuffle过程相对简单，从Map端读取Map结果，然后进行归并，最后输送给Reduce进行处理。</p><ol><li>领取数据</li></ol><p>Map端的Shuffle过程结束后，Reduce任务把这些数据领取回来，</p><ol><li>归并数据</li></ol><p>归并过程与Map端类似</p><ol><li>把数据给Reduce任务</li></ol><p>磁盘经过多轮归并后得到若干大文件，不再继续归并，直接输入给Reduce任务，减少磁盘读写开销。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mapreduce&quot;&gt;&lt;a href=&quot;#Mapreduce&quot; class=&quot;headerlink&quot; title=&quot;Mapreduce&quot;&gt;&lt;/a&gt;Mapreduce&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;分布式并行编程可以大幅提高程序性能，实现高效的批量数据处理。分布式程序运行在大规模计算机集群上，集群中包含大量廉价服务器，能够并行执行大规模数据处理任务，从而获得海量的计算能力。MapReduce就是一种并行编程模型，用于大规模数据集的并行运行，将复杂的，运行于大规模集群上的并行计算高度抽象到两个函数&lt;strong&gt;Map&lt;/strong&gt;和&lt;strong&gt;Reduce&lt;/strong&gt;，两个函数及其核心思想源自函数式编程语言。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谷歌最先提出了分布式并行编程模型MapRecude，Hadoop MapReduce是其开源实现。前者运行在DFS上，后者运行在HDFS上。&lt;/p&gt;
&lt;p&gt;在MapReduce中，一个存储在分布式文件系统中的大规模数据集会被切分为许多独立的小数据块，这些小数据块可以被多个Map任务并行处理。&lt;u&gt;MapReduce框架会为每个Map任务输入一个&lt;strong&gt;数据子集&lt;/strong&gt;，Map任务生成的结果会继续作为Reduce任务的输入，最终由Reduce任务输出最后结果，并写入分布式文件系统。&lt;/u&gt;「适合用MapReduce来处理的数据集需要满足一个前提条件：待处理的数据集可以分解成许多小的数据集，而且每个小数据集都可以完全并行进行处理。」&lt;/p&gt;
&lt;p&gt;MapReduce的一个设计理念为&lt;strong&gt;“计算向数据靠拢”&lt;/strong&gt;而非“数据向计算靠拢”。主要是因为移动数据需要大量的网络传输开销，尤其在大规模数据环境下，移动计算比移动数据更加经济。所以在集群中，MapReduce框架会将每个Map程序就近在HDFS数据所在的节点运行，即将计算节点和存储节点一起运行，减少移动数据开销。&lt;/p&gt;
&lt;p&gt;综上，MapReduce是一个&lt;strong&gt;基于集群的高性能并行计算平台&lt;/strong&gt;，MapReduce是一个&lt;strong&gt;并行计算软件框架&lt;/strong&gt;，MapReduce是一个&lt;strong&gt;并行程序设计模型与方法&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CS" scheme="https://superming.life/categories/CS/"/>
    
    
      <category term="Bigdata" scheme="https://superming.life/tags/Bigdata/"/>
    
  </entry>
  
</feed>
