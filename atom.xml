<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Superming&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-29T16:15:40.256Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SuperMing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apple保修政策</title>
    <link href="http://yoursite.com/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/"/>
    <id>http://yoursite.com/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/</id>
    <published>2020-06-29T10:15:19.000Z</published>
    <updated>2020-06-29T16:15:40.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apple-保修政策-「更新至Mac、iPhone、AirPods」"><a href="#Apple-保修政策-「更新至Mac、iPhone、AirPods」" class="headerlink" title="Apple 保修政策-「更新至Mac、iPhone、AirPods」"></a>Apple 保修政策-「更新至Mac、iPhone、AirPods」</h1><p>自从用上Apple全家桶之后，日常生活已经离不开Apple生态的产品了，产品，而从产品角度来讲，不可避免会有所损伤或故障，这时候就很有必要了解一下相关产品的保修政策了。借此机会梳理一下Apple主要产品的保修政策。</p><blockquote><p>更新至Mac、Airpods。</p><p>AppleCare+ 简称AC+。</p></blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>很多Apple用户对于Apple提供的相关保修政策可能不是很了解，先介绍一下。若了解可直接跳过。</p><p>以下讨论为国行机器，虽然Apple产品全球联保，但经过与Apple Store相关店员确认，因为每个国家都有其保修政策，具体实施上会根据硬件产品的相关差别产生很大的影响「配件不通用等问题」，可能无法保证服务质量。</p><p>Apple原话：</p><blockquote><p>当你购买 Apple 硬件产品时，你还将获得 Apple 一年有限保证项下的保修服务。通过购买可选的 AppleCare Protection Plan 全方位服务计划，你还可以获得其他额外益处。 根据三包规定，Mac 和 iPad 的主要部件将获得自购买日起两年的保修服务。 Apple 尊重中国的国家法律和地方法规。根据浙江的地方三包规定，浙江省的 Mac 台式电脑产品享有整机三年保修服务。</p></blockquote><a id="more"></a><p>据描述，若是在中国购买的Apple产品，Apple提供的以下保修服务：</p><ul><li>中国三包政策</li><li>Apple 一年有限保修服务</li><li>（可选）AppleCare Protection Plan 全方位服务计划</li></ul><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/2.png" alt="1"></p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/3.png" alt="3"></p><p><strong>如何区分以上几个政策：</strong></p><p><strong>中国三包政策</strong>：是政府为保障消费者权益而设立的政策，对相关电子产品的保修服务等作出强制的售后规定。苹果要卖电子产品必须遵守的。可以简单理解为是<strong>国内的标准三包</strong>，仅适合国内保修。</p><p><strong>Apple 一年有限保修服务</strong>：这个可以理解为<strong>Apple自己设立标准的三包</strong>，包含90天的电话技术支持，保修期限为一年，适合全球联保。</p><p><strong>AppleCare Protection Plan 全方位服务计划</strong>：即是AppleCare+服务计划，钱购买Apple的保险服务，主要特点在于延长了保修期限，Apple技术支持，<strong>最主要的是包含了因意外使用导致设备损坏，可以大大降低维修费用</strong>，且支持全球联保，可以在全球任何Apple门店享受以上服务。</p><blockquote><p>除了AC+之外的保修服务主要是Apple产品因为质量问题导致的故障。</p></blockquote><h2 id="Mac保修政策"><a href="#Mac保修政策" class="headerlink" title="Mac保修政策"></a>Mac保修政策</h2><p>首先了解一下Appe产品在中国的官方保修政策，也就是只要你购买，就享有以下保修服务：</p><blockquote><p><strong>保修期限</strong></p><ul><li>Mac <strong>电脑整机及所含附件</strong>自原始购买之日起享有 1 年保修期。</li><li><strong>主要部件</strong>享有自购买之日起 2 年保修期。<ul><li>Mac 台式电脑所有主要部件包括：主板 (MLB)、处理器 (CPU)、内存、硬盘 (HDD/SSD)、电源和显卡。</li><li>Mac 笔记本电脑所有主要部件范围包括主板 (MLB)、处理器 (CPU)、内存、硬盘 (HDD/SSD)、电源适配器、键盘和显示屏 (LCD)。</li></ul></li></ul><p><strong>维修方式</strong></p><ul><li>根据具体的故障情况对设备进行维修。</li><li>所有更换的部件和附件都是全新的。</li><li>更换的<strong>非主要部件和附件</strong>享受原有保修期的剩余时长或自更换日起 90 天的保修期，以二者中期限较长者为准。更换后的<strong>主要部件</strong>享有重新计算的 2 年保修期。</li></ul></blockquote><p>需要注意的是主要部件和非主要部件和附件之间的区分。两者的保修策略是不同的。在部件使用保修之后，根据保修部件重置保修时长。</p><p>划重点：</p><p>Apple在保修中特别提到：<strong>如果在浙江购买的台式机电脑可以享受整机3年保修</strong>（也就是所有部件），约等于免费赠送AppleCare的延保计划。而且是整机3年保修，不再分主次部件之分。但是限制条件是：<strong>在浙江购买的Mac台式电脑只有在浙江当地指定的维修点才能享受所有部件三年的保修。</strong></p><p>该政策的问题在于Apple通过何种方式鉴别是否为浙江省购买的用户，若冲这个服务去的，最佳的方案是在Apple浙江的体验店进行产品的购买，并保留购买凭证，然后有问题去浙江的门店维修。「有反馈说官网买，浙江地区收货，店员拒绝承认是浙江购买的例子，故最保险的还是去Apple Store购买」具体的维修政策可能有很大差异，视帮你维修的店员为准。</p><h3 id="Mac的AppleCare-服务"><a href="#Mac的AppleCare-服务" class="headerlink" title="Mac的AppleCare+服务"></a>Mac的AppleCare+服务</h3><p>Mac的AppleCare服务相关政策参考链接：<a href="https://www.apple.com.cn/support/products/mac/" target="_blank" rel="noopener">AppleCare</a></p><blockquote><p>适用于 Mac 的 AppleCare+ 服务计划可提供长达 <strong>3 年的专家技术支持</strong>，以及来自 <strong>Apple 的额外硬件保修服务</strong>，包括<strong>最多两次意外损坏保修服务</strong>，每次需收取相应的服务费：对于屏幕损坏或机身外壳损坏，收取 RMB 799 的服务费；对于其他损坏，收取 RMB 2299 的服务费。服务期自购买 AppleCare+ 服务计划之日开始。</p><p>中国的消费者权益保护法包括“三包”规定，赋予了消费者自购买 Mac 之日起 2 年的主要部件质量问题保修服务。在浙江省，消费者权益保护法赋予了消费者自购买之日起 3 年的台式电脑质量问题保修服务。在此基础之上，大多数 Apple 产品也附带 90 天的免费电话技术支持，以及来自 Apple 的 1 年有限保修服务。</p></blockquote><p><strong>重点整理：</strong></p><ul><li><p>三年专家技术支持</p></li><li><p>硬件维修范围</p><ul><li><p>你的Mac电脑、所含配件、Apple内存、AirPort、Apple USB全能光驱  「<strong>以上硬件在保修范围内被鉴定损坏，可享受免费保修</strong>」</p></li><li><p>最多两次意外损坏保修服务，屏幕损坏或机身外壳损坏，收取799服务费，其他损坏，收取2299服务费。「<strong>意外损坏非产品质量问题，而是你使用不当造成的损坏，但收费远低于过保的价格</strong>」</p><blockquote><p>这边涉及的其他损坏，一般涉及主板相关的更换，我咨询过杭州湖滨银泰的Apple Store，仅仅是键盘损坏，就需要对整块主板进行更换。</p></blockquote></li></ul></li><li><p>电池维修服务</p><ul><li>当电池容量低于原规格标示的80%左右时，可以获得电池维修服务。「<strong>免费更换</strong>」</li></ul></li><li><p>软件支持</p><ul><li>masOS 和 iCloud的使用</li><li>快速解答各种Apple品牌app的使用方法问题。</li></ul></li></ul><p>对于意外损坏之外的硬件产品，只要是三年内非人为损坏，均可进行免费的维修和更换，不需要材料的维修费用和维修人工费用。而其余的人为损坏，比如倒水导致主板烧掉，屏幕摔坏等等，即可享受意外损坏保修服务。不论电池或者意外损坏，一次便可回本，对于高强度使用者，或者平日比较马大哈的朋友，是很值得考虑的一个选项。</p><blockquote><p>Mac的电池损耗次数设定为1000次。若外出需求较大，三年内即便正常使用很容易达到规定的循环次数，也就是电池容量损耗至80%以下，免费更换一下电池，继续挺几年，还是比较划算的。</p></blockquote><p>保外的电池更换费用如下「血贵」：</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/4.png" alt="xx"></p><h3 id="不在AppleCare保修范围内的情况："><a href="#不在AppleCare保修范围内的情况：" class="headerlink" title="不在AppleCare保修范围内的情况："></a>不在AppleCare保修范围内的情况：</h3><p><strong>下列条款适用于所有AppleCare产品</strong></p><p><a href="https://www.apple.com/legal/sales-support/applecare/appmacchszh.html" target="_blank" rel="noopener">链接</a></p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/5.png" alt></p><h3 id="Apple-Care购买"><a href="#Apple-Care购买" class="headerlink" title="Apple Care购买"></a>Apple Care购买</h3><ol><li><p>AppleCare+ 服务计划可在购买新 Mac 的同时进行购买。</p></li><li><p>或可在购买 Mac 之日起 60 天内通过以下方式进行购买：</p></li><li><ul><li>前往 Apple Store零售店 (需检查你的 Mac 及其购买凭证)</li><li>致电 400-666-8800 (需运行远程诊断功能并提供购买凭证)</li></ul></li></ol><h3 id="AppleCare取消或转让"><a href="#AppleCare取消或转让" class="headerlink" title="AppleCare取消或转让"></a>AppleCare取消或转让</h3><p>只要没有超过AppleCare的保障期限，AppleCare是可以无理由退订或转让的。但是退款费用上回根据实际情况调整。</p><blockquote><ul><li>如果在购买 AppleCare 计划之日起的 30 天内取消该计划，您则将获得全额退款，但要扣除所有已提供服务的相应费用。</li><li>如果您在购买 AppleCare 计划的 30 天后取消这一计划，则会根据 AppleCare 计划保障的未到期天数按比例退款，并扣除所有已提供服务的相应费用。</li></ul></blockquote><p>费用折损计算：</p><blockquote><p>如果您在购买本计划或接受本计划的条款和条件（以后发生者为准）的三十 (30) 天内取消，您将收到在扣除已根据本计划提供服务的服务费后的全部退款。<strong>如果您在收到本计划的三十 (30) 天后取消，您将获得的退款金额为：本计划原购买价格的按比例退款（具体比例取决于自购买本计划之日算起的剩余保修期所占百分比）减去 (a) 取消手续费，即 160 元（人民币）或按比例退款金额的 10%（以二者中较低者为准）</strong></p></blockquote><p>转让手续：</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/6.png" alt></p><h2 id="iPhone保修政策"><a href="#iPhone保修政策" class="headerlink" title="iPhone保修政策"></a>iPhone保修政策</h2><p>iPhone的AC+政策略微复杂，还包含了Apple推出的年年换新活动。<a href="https://www.apple.com.cn/support/products/iphone/" target="_blank" rel="noopener">AppleCare For iPhone</a></p><p>价格：</p><blockquote><p>iPhone11、iPhoneXR、iPhone 8 Plus：1399元</p><p>iPhone11 Pro、iPhone 11 Pro Max、iPhone 11 XS、iPhone 11 XS Max：1799元</p></blockquote><p>介绍：</p><blockquote><p>每部 iPhone 均可在有限保修期内享有 <strong>1 年的硬件保修服务</strong>和<strong>长达 90 天的免费电话技术支持</strong>。适用于 iPhone 的 AppleCare+ 服务计划可为你提供自购买该服务计划之日起为期 2 年的维修服务，还可获得最多两次意外损坏保修服务，每次需收取相应的服务费：对于屏幕损坏，收取 RMB 188 的服务费；对于其他任何损坏，收取 RMB 628 的服务费。</p></blockquote><p>具体内容：</p><blockquote><ol><li>保修从1年升至2年。</li><li>优先获得Apple专家的帮助，主要大城市提供当日服务。</li><li>硬件维修包含：iPhone整机、电池、包含的耳机和配件。</li><li>最多两次意外损坏保修服务，屏幕损坏，每次收取188元；其他损坏，每次收取628元。</li><li>电池容量低于原规格标示的80%时，可获得电池维修服务。</li><li>解决软件支持相关问题。</li></ol></blockquote><p>所有AC+如果全款购买，均可在中途退款取消或者转移。</p><h3 id="那么iPhone的AC-划算吗？"><a href="#那么iPhone的AC-划算吗？" class="headerlink" title="那么iPhone的AC+划算吗？"></a><strong>那么iPhone的AC+划算吗？</strong></h3><h4 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h4><p>根据朋友使用情况及查阅相关资料了解，iPhone电池在2年内用到80%以下，还是有点难度的，应该需要超级重度暴力使用才能做到，想要蹭电池免费换新看运气。</p><p>保外相关维修费用如图，</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/9.png" alt="维修"></p><h4 id="屏幕维修"><a href="#屏幕维修" class="headerlink" title="屏幕维修"></a>屏幕维修</h4><p>部分型号屏幕更换费用如下：</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/11.png" alt></p><p>简单算一下，如果使用的是iPhone 11，在2年内屏幕坏了一次，需要花费1399的AC+购买费用和188的屏幕维修费，总计1587元。而单次维修费用为1549元，购买AC+的成本甚至更高。</p><p>假设用户更厉害一点，一年坏了两次屏幕，则购买AC+后的维修费用为1775元，未购买AC+的费用为3098元。这种情况貌似有点划算，但前提是用户够狠。</p><h4 id="其他维修定价"><a href="#其他维修定价" class="headerlink" title="其他维修定价"></a>其他维修定价</h4><blockquote><p>是否需要针对其他问题（如<strong>主屏幕按钮、浸液损坏或配件</strong>）进行维修？</p><ul><li>如果您的 iPhone 问题在 Apple 保修、AppleCare 计划或消费者权益法的保障范围内，我们不会收取任何费用。<strong>这不包括意外损坏，意外损坏的维修会产生一定的费用。</strong></li><li>如果您的 iPhone 存在意外损坏，而您享有 AppleCare+ 服务计划保障，则<strong>可使用其中的一次意外损坏保障来将维修纳入保障范围</strong>。如下文所示，每次提供意外损坏保障时都会收取一定的 AppleCare+ 服务计划服务费。 </li><li>如果您的 iPhone 已损坏，而您不享有 AppleCare+ 服务计划保障，<strong>则维修费用会因具体的维修内容而异，最高不会超出下文所示的保外维修费用</strong>。这些保外维修价格适用于由 Apple 提供的维修。Apple 授权服务提供商可能会自行设定相应的费用。</li></ul></blockquote><p>这里就当主板维修费用，详细如下：</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/10.png" alt></p><p>再次以iPhone11举例，使用AC+进行一次主板维护需要花费1399元的AC+购买费用以及628元的主板维修费用，总计2027元。而单次维修需要3109元。</p><p>血赚有没有？有个头。但问题是，多少用户会在使用的时候把主板都用烂，而且在两年之内，我想几率应该很小很小。你要是喜欢带着iPhone潜水，推荐购买。</p><h3 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h3><p>iPhone的AC+的保修条件相对比较难达到，且一般可以通过改变使用方式等进行避免。</p><p>但如果有摔手机等其他特殊癖好，对Apple屏幕、主板等质量信不过的朋友，非常推荐购买。</p><p>当然，重度使用者对电池消耗也相对较大，可以购置一个AC+以防万一。</p><p>性价比如上描述，最后根据个人情况选择即可。</p><h3 id="年年换新"><a href="#年年换新" class="headerlink" title="年年换新"></a>年年换新</h3><p>最后介绍一下Apple的年年换新活动，具体政策查看链接啊：<a href="https://www.apple.com.cn/shop/iphone/iphone-upgrade-program" target="_blank" rel="noopener">iPhone年年换新计划</a></p><p>官方介绍挺明白的：</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/12.png" alt></p><p>年年换新购买条件之一是需要在Apple Store零售店购买手机的同时购入AppleCare+计划。应该是Apple希望回收的时候保证机子的质量。</p><p>主要<a href="https://www.apple.com.cn/legal/sales-support/iphoneupgrade_cn/" target="_blank" rel="noopener">年年换新条款</a>如下：</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/13.png" alt="f"></p><p>需要留意的是在换购时需要保证iPhone状态完好，如第六条所示。</p><p>举个例子，如果你使用iPhone11，且满足换新条件，原价6000购入，在条件期间购买新款手机可以抵价3000元。</p><p>但一年使用的手机带AC+，按苹果二手回收价格来看，感觉不是很划算。根据需求判断。</p><h2 id="Airpods保修政策"><a href="#Airpods保修政策" class="headerlink" title="Airpods保修政策"></a>Airpods保修政策</h2><p>介绍：</p><blockquote><p>AppleCare+ 服务计划可为 AirPods、Beats 入耳式耳机或 Beats 头戴式耳机<strong>提供自购买该服务计划之日起长达 2 年的专家技术支持，以及额外硬件保修服务，还可获得最多两次意外损坏保修服务，每次收取 RMB 199 的服务费</strong>。</p><p>中国的消费者权益保护法包括“三包”规定，赋予了消费者自购买之日起 3 个月的有线耳机质量问题保修服务。在此基础之上，大多数 Apple 产品还附带 90 天的免费电话技术支持，以及来自 Apple 的1 年有限保修服务。</p></blockquote><p>Airpods默认一年保修，是针对<strong>产品本身质量问题</strong>导致的问题提供一年的保障，比如电池非正常老化，蓝牙连接不稳定，电流声严重等产品质量上的问题。</p><p>但不包含意外损坏，<strong>比如喝汤的时候耳机掉到碗里淹死了，被朋友用诺基亚砸烂，用户酷爱解剖等意外不可控因素</strong>，若日常生活中可能包含以上条件，那么AppleCare+的重要性不言而喻。</p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/8.png" alt="e"></p><p>AC+具体内容：</p><blockquote><p>1.保修延长至两年，优先获得技术支持。</p><p>2.电池容量低于80%可以<strong>免费</strong>换新。</p><p>3.若在保修的两年期限内，被诺基亚砸烂了，››给耳机游泳了，解剖了等等，我在购买AC+的时候特地问过店员，只要你把耳机尸体拿到店里，仍然能够识别出是你的耳机（序列号检测），耳机坏了就换耳机，壳子坏了换壳子，两个都坏了就都换，<strong>算一次意外保修</strong>，只需要再支付199元的服务费即可。而且他也特地强调了<strong>只换不修</strong>，因为使用了高精密的Sip封装，维修难度及成本不如换新来的方便。「具体售后为准」</p><p>4.USB充电线也包含在内，不包含在意外次数内的。</p></blockquote><p>但是需要明确的是，不能丢！！AppleCare+不为丢失或被盗的Airpods提供保障。详见：<a href="https://support.apple.com/zh-cn/airpods/repair/service" target="_blank" rel="noopener">Airpods服务和维修</a></p><p><img src="/2020/06/29/Apple%20%E4%BF%9D%E4%BF%AE%E6%94%BF%E7%AD%96/7.png" alt="x"></p><h3 id="为什么我认为这是性价比最高的AppleCare"><a href="#为什么我认为这是性价比最高的AppleCare" class="headerlink" title="为什么我认为这是性价比最高的AppleCare+"></a>为什么我认为这是性价比最高的AppleCare+</h3><ol><li>电池。根据以往几代反应的情况来看，如果你是中度或者重度使用，两年内电池是很难挺住的。假设耳机一天一次电池循环，两年内500次循环一般也挺不住。这时候就可以拿去售后检测换一个全新的耳机，还是挺香的。</li><li>因为是真无线耳机，摆脱线控之后，适用各种使用场景，场景一多，意外受损的几率就大很多，购买AC+在使用时便会舒心很多。</li><li>假设你要转卖，转卖前使用意外险换新还能卖个好价钱。</li><li>保外维修费用昂贵。AirPods Pro单只耳机和充电盒均705元 电池379元，AirPods单只耳机和无线充电盒均549元，有线的盒子479元，电池379元。「一次意外保险费用算上AC+为 299 + 199 = 499，相当于499换新」</li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>购买AC+后的凭证需要保存好，流程一般会要求提供耳机购买凭证、AC+购买凭证以及耳机尸体才可以保修。</p><p>最好通过Apple官方渠道购买AC+，看到有第三方直接用AC+的名字让消费者购买却不是Apple官方的AC+。</p><p>尽量避免极限使用获取更长久的电池续航。</p><blockquote><p>AC+并不便宜，受财力限制及各种分析未购买AC+，且打算小心使用耳机的朋友，<strong>好好充电是很重要的</strong>，Apple产品质量上出问题的可能性不是很大，但电池损耗属于物理性损耗，电池产业在技术上没有革新的情况下，即使Apple使用了较好的电池，也很难避免电池的损耗，一般消费级电子产品使用多为锂电池，切忌将电量用到极低后再进行充电（20%以下），此时对于电池寿命的损耗是很大的。</p></blockquote><hr><p>参考：</p><p><a href="https://post.smzdm.com/p/akmr45nr/" target="_blank" rel="noopener">AppleCare 扫盲帖，三年苹果狗告诉你 AppleCare 到底值不值得买？</a></p><p><a href="https://support.apple.com/zh-cn/warranties" target="_blank" rel="noopener">中国官方保修政策</a></p><p><a href="https://www.apple.com.cn/support/products" target="_blank" rel="noopener">AppleCare 产品</a>,</p><p><a href="https://www.apple.com.cn/legal/statutory-warranty/" target="_blank" rel="noopener">Apple 产品与中国消费者权益相关法律法规</a></p><p><a href="https://support.apple.com/zh-cn/repair/products" target="_blank" rel="noopener">产品服务和维修信息</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Apple-保修政策-「更新至Mac、iPhone、AirPods」&quot;&gt;&lt;a href=&quot;#Apple-保修政策-「更新至Mac、iPhone、AirPods」&quot; class=&quot;headerlink&quot; title=&quot;Apple 保修政策-「更新至Mac、iPhone、AirPods」&quot;&gt;&lt;/a&gt;Apple 保修政策-「更新至Mac、iPhone、AirPods」&lt;/h1&gt;&lt;p&gt;自从用上Apple全家桶之后，日常生活已经离不开Apple生态的产品了，产品，而从产品角度来讲，不可避免会有所损伤或故障，这时候就很有必要了解一下相关产品的保修政策了。借此机会梳理一下Apple主要产品的保修政策。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新至Mac、Airpods。&lt;/p&gt;
&lt;p&gt;AppleCare+ 简称AC+。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;很多Apple用户对于Apple提供的相关保修政策可能不是很了解，先介绍一下。若了解可直接跳过。&lt;/p&gt;
&lt;p&gt;以下讨论为国行机器，虽然Apple产品全球联保，但经过与Apple Store相关店员确认，因为每个国家都有其保修政策，具体实施上会根据硬件产品的相关差别产生很大的影响「配件不通用等问题」，可能无法保证服务质量。&lt;/p&gt;
&lt;p&gt;Apple原话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你购买 Apple 硬件产品时，你还将获得 Apple 一年有限保证项下的保修服务。通过购买可选的 AppleCare Protection Plan 全方位服务计划，你还可以获得其他额外益处。 根据三包规定，Mac 和 iPad 的主要部件将获得自购买日起两年的保修服务。 Apple 尊重中国的国家法律和地方法规。根据浙江的地方三包规定，浙江省的 Mac 台式电脑产品享有整机三年保修服务。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Tech" scheme="http://yoursite.com/categories/Tech/"/>
    
    
      <category term="Apple" scheme="http://yoursite.com/tags/Apple/"/>
    
      <category term="Tech" scheme="http://yoursite.com/tags/Tech/"/>
    
  </entry>
  
  <entry>
    <title>Mapreduce</title>
    <link href="http://yoursite.com/2020/05/18/Mapreduce/"/>
    <id>http://yoursite.com/2020/05/18/Mapreduce/</id>
    <published>2020-05-18T01:58:58.000Z</published>
    <updated>2020-05-31T02:38:13.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapreduce"><a href="#Mapreduce" class="headerlink" title="Mapreduce"></a>Mapreduce</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>分布式并行编程可以大幅提高程序性能，实现高效的批量数据处理。分布式程序运行在大规模计算机集群上，集群中包含大量廉价服务器，能够并行执行大规模数据处理任务，从而获得海量的计算能力。MapReduce就是一种并行编程模型，用于大规模数据集的并行运行，将复杂的，运行于大规模集群上的并行计算高度抽象到两个函数<strong>Map</strong>和<strong>Reduce</strong>，两个函数及其核心思想源自函数式编程语言。</p></blockquote><p>谷歌最先提出了分布式并行编程模型MapRecude，Hadoop MapReduce是其开源实现。前者运行在DFS上，后者运行在HDFS上。</p><p>在MapReduce中，一个存储在分布式文件系统中的大规模数据集会被切分为许多独立的小数据块，这些小数据块可以被多个Map任务并行处理。<u>MapReduce框架会为每个Map任务输入一个<strong>数据子集</strong>，Map任务生成的结果会继续作为Reduce任务的输入，最终由Reduce任务输出最后结果，并写入分布式文件系统。</u>「适合用MapReduce来处理的数据集需要满足一个前提条件：待处理的数据集可以分解成许多小的数据集，而且每个小数据集都可以完全并行进行处理。」</p><p>MapReduce的一个设计理念为<strong>“计算向数据靠拢”</strong>而非“数据向计算靠拢”。主要是因为移动数据需要大量的网络传输开销，尤其在大规模数据环境下，移动计算比移动数据更加经济。所以在集群中，MapReduce框架会将每个Map程序就近在HDFS数据所在的节点运行，即将计算节点和存储节点一起运行，减少移动数据开销。</p><p>综上，MapReduce是一个<strong>基于集群的高性能并行计算平台</strong>，MapReduce是一个<strong>并行计算软件框架</strong>，MapReduce是一个<strong>并行程序设计模型与方法</strong>。</p><h2 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h2><p>MapReduce核心是Map函数和Reduce函数，开发者只需要关注Map和Reduce函数的实现即可，不需要处理其他复杂的问题，比如分布式存储、工作调度、负载均衡等。</p><p>MapReduce使用列表和键值对&lt;key, value&gt;作为主要的数据模式。</p><p><img src="/2020/05/18/Mapreduce/structure.png" alt></p><h3 id="Map函数"><a href="#Map函数" class="headerlink" title="Map函数"></a>Map函数</h3><p>Map函数的输入来自分布式文件系统的文件快，这些文件块的格式是任意的，可以是文档，也可以是二进制格式的。文件块是一系列元素的集合，这些元素也是任意类型的。Map函数将输入元素转化为键值对，<strong>键和值的类型也是任意的</strong>，其中键不同于一般的标志属性，键没有唯一性，不能作为输出身份标识。即使是同一输入元素也可以通过Map任务生成具有相同键的多个&lt;key, value&gt;。</p><h3 id="Reduce函数"><a href="#Reduce函数" class="headerlink" title="Reduce函数"></a>Reduce函数</h3><p>Reduce函数的任务就是将输入的一系列具有相同键的键值对以某种方式组合起来，输出处理后的键值对，输出结果会合并成一个文件。用户可指定Reduce任务个数，通知实现系统，然后主控进程通常选择一个Hash函数，Map任务输出的每个键都会经过Hash函数计算，并更具哈希结果将该键值对输入相应的Reduce任务处理。</p><p><img src="/2020/05/18/Mapreduce/process.png" alt></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/2020/05/18/Mapreduce/workflow.png" alt></p><p>MapReduce的核心思想可以用“分而治之”描述，如上流程图可知，即将一个大的数据集拆分成多个小数据块在多台机器上并行处理。Map任务一般在数据节点上运行，以减少多余开销。只有在Map任务结束后，中间结果会被分发到多个Reduce中。</p><p>需要注意的是：不同的Map任务之间不会进行通讯，不同的Reduce任务之间也不会发生任何信息交换；用户不能显式地从一台机器向另一台机器发送消息，所有数据交换都通过MapReduce自身去实现的。</p><p>在执行过程中，Map任务输入文件，Reduce任务的处理结果保存在分布式文件系统中，而Map任务处理得到的中间结果则保存在本地磁盘中，只有Map任务处理结束后，Reduce过程才开始；所以Map任务需要考虑到数据的局部性。</p><h3 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h3><p>MapReduce执行阶段如下：</p><p><img src="/2020/05/18/Mapreduce/phase.png" alt></p><ol><li>MapReduce使用<strong>InputFormat</strong>模块作为Map的预处理；然后将输入文件切分为逻辑上的多个<strong>InputSplit</strong>，<em>InputSplit是MapReduce对文件进行处理和运算的输入单位。</em>「实际上InputSplit并没有对文件进行切割，而是记录了需要处理数据的位置和长度」</li><li>通过<strong>RecordReader</strong>（RR）根据InputSplit里面的信息处理具体数据，加载数据并转换为适合的Map任务读取的键值对，输入给Map任务。</li><li>Map根据用户自定义的映射规则，输出一些列键值对作为中间结果。</li><li>为了让Reduce可以并行处理Map的结果，需要对Map的输出进行一定的分区(Portition)、排序(Sort)、合并(Combine)、归并(Merge)等操作，得到中间结果，然后交给对应的Reduce处理，该过程为<strong>Shuffle</strong>。从无序的键值对到有序的键值对。</li><li>Reduce以一系列中间结果作为输入，执行用户定义的逻辑，输出结果给OutputFormat模块。</li><li><strong>OutputFormat</strong>模块验证输出目录是否已经存在以及输出结果类型是否符合配置文件中的配置类型，如果都满足，就输出Reduce结果到分布式文件系统。</li></ol><h3 id="Shuffle过程"><a href="#Shuffle过程" class="headerlink" title="Shuffle过程"></a>Shuffle过程</h3><p>Shuffle是MapReduce的核心环节。Shuffle过程即对Map输出结果进行分区、排序、合并等处理交给Reduce过程，故分为Map端操作和Reduce端操作，Shuffle过程如下图。</p><p><img src="/2020/05/18/Mapreduce/Shuffle1.png" alt></p><p>Map的输出结果首先被写入缓存，缓存满后进行溢写操作，即把缓存中的数据写入磁盘文件，清空缓存。当启动溢写操作时，首先把缓存中的数据写入分区，然后对每个分区的数据进行排序、合并，之后再写入磁盘文件。每次溢写操作生成一个新的磁盘文件，随着Map任务执行，磁盘中就会有多个溢写文件，任务结束后，这些文件被归并（Merge）为一个大的磁盘文件。然后通知Reduce任务领取属于自己处理的数据。Reduce任务领取数据后，将其归并写入磁盘后交给Reduce处理。</p><h4 id="Map端的Shuffle过程"><a href="#Map端的Shuffle过程" class="headerlink" title="Map端的Shuffle过程"></a>Map端的Shuffle过程</h4><ol><li>输入数据和执行Map任务</li></ol><p>Map任务的输入数据保存在分布式文件系统的文件块中，文件格式任意。Map任务接收&lt;key , value&gt;作为输入后，按一定的映射规则转换成一批&lt;key , value&gt;进行输出。</p><ol start="2"><li>写入缓存</li></ol><p>每个Map任务都会分配一个缓存，Map输出结果先写入缓存中，在缓存满后才写入磁盘。可以大大降低开销。</p><ol start="3"><li>溢写（分区、排序和合并）</li></ol><p>提供给MapReduce的缓存容量时有限的，一旦占满缓存就执行溢写（Spill）操作，把缓存中的内容一次性写入磁盘并清空缓存。在溢写到磁盘前，缓存中的数据先被分区（Partition），以键值对形式存储；对于每个分区的键值对，后台线程根据其Key对其进行内存排序（Sort），排序是MapReduce默认操作，排序结束后执行合并（Combine）操作，合并操作根据用户定义的执行。</p><ol start="4"><li>文件归并</li></ol><p>在Map任务全部结束之前，系统会对所有溢写文件中的数据进行归并（Merge），生成一个大的溢写文件。这个大的溢写文件中所有键值对也是经过分区和排序的。</p><p>综上，Map端的Shuffle过程全部完成，最终生成一个大文件存放在本地磁盘上。其中JobTracker会一直检测Map任务执行，当检测到一个Map任务完成后，立即通知相关Reduce任务来领取数据。</p><h4 id="Reduce端的Shuffle过程"><a href="#Reduce端的Shuffle过程" class="headerlink" title="Reduce端的Shuffle过程"></a>Reduce端的Shuffle过程</h4><p>Reduce端的Shuffle过程相对简单，从Map端读取Map结果，然后进行归并，最后输送给Reduce进行处理。</p><ol><li>领取数据</li></ol><p>Map端的Shuffle过程结束后，Reduce任务把这些数据领取回来，</p><ol start="2"><li>归并数据</li></ol><p>归并过程与Map端类似</p><ol start="3"><li>把数据给Reduce任务</li></ol><p>磁盘经过多轮归并后得到若干大文件，不再继续归并，直接输入给Reduce任务，减少磁盘读写开销。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mapreduce&quot;&gt;&lt;a href=&quot;#Mapreduce&quot; class=&quot;headerlink&quot; title=&quot;Mapreduce&quot;&gt;&lt;/a&gt;Mapreduce&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="Bigdata" scheme="http://yoursite.com/tags/Bigdata/"/>
    
  </entry>
  
  <entry>
    <title>JDBC基本概念</title>
    <link href="http://yoursite.com/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-05-16T14:30:05.000Z</published>
    <updated>2020-05-16T14:32:26.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC基本概念"><a href="#JDBC基本概念" class="headerlink" title="JDBC基本概念"></a>JDBC基本概念</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JDBC（Java Database Connectivity）是一组用来按照统一方式访问数据库的API。向程序员提供了独立于数据库的<strong>统一接口</strong>，开发人员只需要学习JDBC结构，并通过JDBC加载具体驱动，就可以对数据库进行连接及操作。「组成JDBC的两个包：java.sql和javax.sql」</p><p>JDBC一共有四种驱动类型，参见<a href="https://en.wikipedia.org/wiki/JDBC_driver" target="_blank" rel="noopener">维基百科</a>。</p><a id="more"></a><p>JDBC API：</p><p><img src="/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/jdbcapi.png" alt="jdbcapi"></p><h2 id="基本编程操作"><a href="#基本编程操作" class="headerlink" title="基本编程操作"></a>基本编程操作</h2><p>连接数据库分为以下7步：</p><blockquote><p>第一步：加载正确的数据库驱动程序</p><p>第二步：定义所要连接数据库的地址</p><p>第三步：建立与数据库的连接</p><p>第四步：声明SQL语句并创建语句对象</p><p>第五步：执行SQL语句</p><p>第六步：对执行结果进行处理</p><p>第七步：关闭打开的资源</p></blockquote><ol><li>创建数据库脚本</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Table structure for user</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>  (</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="string">`ident`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'0普通用户\r\n1管理员'</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="string">`telephone`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`unique-username`</span>(<span class="string">`username`</span>) <span class="keyword">USING</span> BTREE</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> AUTO_INCREMENT = <span class="number">17</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Records of user</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'admin'</span>, <span class="string">'123'</span>, <span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'user1'</span>, <span class="string">'123'</span>, <span class="string">'0'</span>, <span class="string">'041184835202'</span>, <span class="string">'大连东软信息学院A3座117室'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'user2'</span>, <span class="string">'123'</span>, <span class="string">'0'</span>, <span class="string">'041184835207'</span>, <span class="string">'大连理工大学计算机系'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'user3'</span>, <span class="string">'123'</span>, <span class="string">'0'</span>, <span class="string">'041184832264'</span>, <span class="string">'新新园100号2门103'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span></pre></td></tr></table></figure><p>数据表结构如下：</p><p><img src="/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/tablestu.png" alt="tablestu"></p><ol start="2"><li>新建Java工程并在web资源中导入数据库驱动</li></ol><p><img src="/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/connector.png" alt="connector"></p><ol start="3"><li>编写注册页面<code>register.html</code>，用于输入信息并提交至RegisterServlet。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"register"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"un"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pw"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>电话：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"tel"</span> <span class="attr">size</span>=<span class="string">"20"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>地址：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"addr"</span> <span class="attr">rows</span>=<span class="string">"3"</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><p>页面如下：</p><p><img src="/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/register.png" alt="register"></p><ol start="4"><li>编写<code>RegisterServlet</code>，只放doGet部分代码。</li></ol><blockquote><p>使用JDBC连接数据库，将注册页面填写的信息插入数据表中，并给出提示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">String un = request.getParameter(<span class="string">"un"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">String pw = request.getParameter(<span class="string">"pw"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">String tel = request.getParameter(<span class="string">"tel"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">String addr = request.getParameter(<span class="string">"addr"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(un==<span class="keyword">null</span> || pw==<span class="keyword">null</span>|| tel==<span class="keyword">null</span> ||addr==<span class="keyword">null</span>||un.equals(<span class="string">""</span>)||pw.equals(<span class="string">""</span>)||tel.equals(<span class="string">""</span>)||addr.equals(<span class="string">""</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"注册信息不全！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"请输入完整的&lt;a href=register.html&gt;注册&lt;/a&gt;信息！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="comment">//end if 注册信息不全</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> r=<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">Connection con=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt=<span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">ResultSet rs = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//1加载驱动程序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//2定义url连接数据库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">String url=<span class="string">"jdbc:mysql://127.0.0.1:3306/meal?serverTimezone=UTC"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//3 建立与DB的连接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">con = DriverManager.getConnection(url,<span class="string">"root"</span>,<span class="string">""</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//4写SQL语句，查询用户名是否可用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from user where username=?"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//5创建语句对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">pstmt = con.prepareStatement(sql);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//6给❓ 赋值，执行SQL</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">pstmt.setNString(<span class="number">1</span>, un);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">rs=pstmt.executeQuery();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//7对结果集进行处理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"====rs"</span>+rs);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(rs.next()) &#123;<span class="comment">//如果结果集不为空，说明注册用户名在数据库中已存在</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"用户名不可用"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"&lt;a href=register.html&gt;返回&lt;/a&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="comment">//end if用户名已存在，不可用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">pstmt.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//4 写sql语句，完成插入操作</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">sql=<span class="string">"insert into user values(null,?,?,0,?,?)"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">pstmt = con.prepareStatement(sql);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">pstmt.setString(<span class="number">1</span>, un);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">pstmt.setString(<span class="number">2</span>, pw);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">pstmt.setString(<span class="number">3</span>, tel);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">pstmt.setString(<span class="number">4</span>, addr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">r=pstmt.executeUpdate();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="comment">//end else用户名可用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="comment">//end try</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">ex.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(SQLException ex) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">ex.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//8关闭连接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(rs!=<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">rs.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pstmt!=<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">pstmt.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(con!=<span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">con.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(r==<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"注册成功！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"注册失败！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">&#125;out.println(<span class="string">"&lt;a href=register.html&gt;返回&lt;/a&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="comment">//end if 注册信息完整</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>以上，代码编写且执行均可正常运行，JDBC也连接ok。</p><h3 id="步骤拆分"><a href="#步骤拆分" class="headerlink" title="步骤拆分"></a>步骤拆分</h3><ol><li>加载正确的数据库驱动程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);<span class="comment">//声明后即正确加载驱动程序</span></span></pre></td></tr></table></figure><p>如果抛出<code>ClassNotFoundException</code>异常表明所需驱动未在<code>classpath</code>中。</p><p>不同数据库驱动程序的名称是不同的，声明内的代码也是不同的。</p><ol start="2"><li>定义url连接数据库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//2定义url连接数据库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">String url=<span class="string">"jdbc:mysql://127.0.0.1:3306/meal?serverTimezone=UTC"</span>;</span></pre></td></tr></table></figure><p>不同数据库连接的地址不同，URL一般由三个部分组成，用冒号隔开。<code>jdbc:子协议：子名称</code></p><blockquote><p>jdbc：JDBC中的协议就是jdbc。</p><p>&lt;子协议&gt;：数据库驱动程序名或数据库连接机制的名称。</p><p>&lt;子名称&gt;：一种标记数据库的方法。子名称根据子协议的不同而不同，使用子名称的目的是为定位数据库。</p></blockquote><p>常用数据库URL地址写法：</p><blockquote><p>String ODBCURL = “jdbc:odbc:dbName”;</p><p>String oracleURL = “jdbc:oracle:thin:@host:port:dbName”;</p><p>String mysqlURL = “jdbc:mysql://host:port/dbName”;</p><p>String sqlURL = “jdbc:microsoft:sqlserver://host:port;DatabaseName=dbName “;</p></blockquote><p><img src="/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/url.png" alt="url"></p><ol start="3"><li>建立与DB的连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//3 建立与DB的连接,url,user,password</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Connection connetion = DriverManager.getConnection(url,username,password);</span></pre></td></tr></table></figure><p><strong>DriverManager类</strong></p><p>驱动程序管理类负责管理JDBC驱动程序。在使用JDBC驱动程序，在使用JDBC驱动程序前，需要向DriverManager注册才可使用，调用<code>Class.forName()</code>方法。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerDriver</span><span class="params">(Driver driver)</span> <span class="comment">//向 DriverManager 注册给定驱动程序。</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">(String url,String user,String password)</span> <span class="keyword">throws</span> SQLException<span class="comment">//获得url对应数据库的一个连接</span></span></span></pre></td></tr></table></figure><p><strong>Connection接口</strong></p><p>Connection对象是通过DriverManager.getConnection()方法获得，代表与数据库的连接，也就是在已经加载的驱动程序和数据库之间建立连接，是数据库编程中非常重要的一个对象，客户端和数据库之间的交互全是通过Connection对象完成的。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function">Statement <span class="title">createStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException<span class="comment">//创建一个Statement对象</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException<span class="comment">//创建一个Preparestatement对象，并能把SQL语句提交到数据库进行预编译。</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAutoCommit</span><span class="params">(Boolean autocommit)</span> <span class="keyword">throws</span> SQLException<span class="comment">//设置事务提交的模式</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException<span class="comment">//提交对数据库的更改，使更改生效</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException<span class="comment">//放弃当前事务开始以来对数据库所作的修改</span></span></span></pre></td></tr></table></figure><ol start="4"><li>声明SQL语句并创建语句对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from tablename"</span> ；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Statement statement = connection.createStatement();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = connection.prepareStatement(sql);</span></pre></td></tr></table></figure><p><strong>Statement类</strong></p><p>Statement用于执行静态SQL语句。</p><p>执行<code>insert</code>，<code>update</code>，<code>delete</code>语句等，调用<code>executeUpdate(String sql)</code>方法。</p><p>执行<code>select</code>语句可以调用<code>executeQuery(String sql)</code>方法，返回<code>ResultSet</code>对象。</p><p>常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function">ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException<span class="comment">//执行一个查询语句并返回结果集</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException<span class="comment">//执行更新操作，返回更新的行数</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException<span class="comment">//执行更新或查询语句，返回是否有结果集 [任意结果集]</span></span></span></pre></td></tr></table></figure><p><strong>PreparedStatement类</strong></p><p>PreparedStatement 是预编译的语句对象，可以用来执行带占位符的SQL语句。</p><p>数据库对他们事先进行编译，因此，客户端需要做的只是传送占位符位置所需要的数据。</p><p><strong>Statement对象执行的SQL语句，只有在程序运行时才对他们进行编译，因此PreparedStatement运行的速度更快。</strong></p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setXXX</span><span class="params">(<span class="keyword">int</span> parameterIndex,XXX x)</span> <span class="comment">//为第1参数指定的占位符设置第2参数指定的值</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function">ResultSet <span class="title">executeQuery</span><span class="params">()</span><span class="comment">//执行 SQL 查询，并返回该查询生成的 ResultSet 对象。 </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">()</span> <span class="comment">//执行 SQL 语句，该语句必须是一个 SQL 数据操作语言（Data Manipulation Language，DML）语句，比如 INSERT、UPDATE 或 DELETE 语句；或者是无返回内容的 SQL 语句，比如 DDL 语句。 </span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="comment">//执行 SQL 语句，该语句可以是任何种类的 SQL 语句。</span></span></span></pre></td></tr></table></figure><p>例如编程基本操作处使用的代码使用的就是PreparedStatement类。</p><p><strong>CallableStatement类</strong></p><p>CallableStatement是JDBC用来调用数据库中存储过程的机制。</p><p>具体的使用和PreparedStatement相似。</p><p>需要注意的是：要调用的存储过程必须在数据库中存在，否则将抛出异常。</p><ol start="5"><li>执行SQL语句</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">pstmt = con.prepareStatement(sql);</span></pre></td></tr></table></figure><p>执行查询类SQL语句：使用语句对象的executeQuery()方法，返回 ResultSet结果集（一个二维表）。</p><p>执行更新类SQL语句：使用语句对象的executeUpdate()方法，返回被更新记录的条数。</p><p>执行各种类型的SQL语句：使用语句对象的execute()方法，当SQL语句的执行结果是一个ResultSet时，方法返回true，并可以通过语句对象的getResultSet()方法得到返回的结果集；当SQL语句的执行没有返回的结果集时，该方法返回false。</p><ol start="6"><li>处理结果</li></ol><p>ResultSet用于代表Sql语句执行结果。Resultset封装执行结果时，采用类型表格的方式。维护了一个指向表格数据行的游标，游标在第一行之前，调用<code>ResultSet.next()</code>方法，可以使游标指向具体数据行。</p><p>ResultSet提供了getXxx()方法，用于获取当前行中某列的值，其中“XXX”与列的数据类型有关，例如，如要获取的列是String类型，则使用getString()方法获取该列的值。getXxx()方法如下所示：getString()，getInt()，getFloat()，getDouble()，getDate()和getBoolean() </p><p>应用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ResultSet rs = statement.executeQuery();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">String name = rs.getString(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">String phone = rs.getString(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">System.out.println(name+<span class="string">","</span>+phone);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">通过指定列名(getXxx(String)) 或列号的方式(getXxx(<span class="keyword">int</span>)) 调用getXxx()方法将对应列的内容获取出来。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">通过first(), (), previous(), next(), absolute(<span class="keyword">int</span>), … 方法滚动结果集中的内容。</span></pre></td></tr></table></figure><p><img src="/2020/05/16/JDBC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/sql&java.png" alt="sql&amp;java"></p><ol start="7"><li>释放资源</li></ol><p>JDBC程序运行完后，一定要释放程序中创建的一些交互对象，通常为ResultSet、Statement和Connection对象，尤其是Connection对象，非常稀有的资源，用完后需要立即释放，否则容易造成系统宕机。</p><p>资源释放代码一定要放在finally语句中执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JDBC基本概念&quot;&gt;&lt;a href=&quot;#JDBC基本概念&quot; class=&quot;headerlink&quot; title=&quot;JDBC基本概念&quot;&gt;&lt;/a&gt;JDBC基本概念&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JDBC（Java Database Connectivity）是一组用来按照统一方式访问数据库的API。向程序员提供了独立于数据库的&lt;strong&gt;统一接口&lt;/strong&gt;，开发人员只需要学习JDBC结构，并通过JDBC加载具体驱动，就可以对数据库进行连接及操作。「组成JDBC的两个包：java.sql和javax.sql」&lt;/p&gt;
&lt;p&gt;JDBC一共有四种驱动类型，参见&lt;a href=&quot;https://en.wikipedia.org/wiki/JDBC_driver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Hive MacOS配置</title>
    <link href="http://yoursite.com/2020/05/16/Hive%20MacOS%20%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/05/16/Hive%20MacOS%20%E9%85%8D%E7%BD%AE/</id>
    <published>2020-05-16T01:00:00.000Z</published>
    <updated>2020-06-02T19:37:57.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hive-MacOS-配置"><a href="#Hive-MacOS-配置" class="headerlink" title="Hive MacOS 配置"></a>Hive MacOS 配置</h2><p>环境：</p><p>Hadoop3.2.1</p><p>Hive 3.1.2</p><h2 id="Hive-3-1-2-安装"><a href="#Hive-3-1-2-安装" class="headerlink" title="Hive 3.1.2 安装"></a>Hive 3.1.2 安装</h2><p>使用brew安装Hive</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew update</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">brew install hive</span></pre></td></tr></table></figure><p>Hive的默认安装目录为：<code>/usr/local/Cellar/hive/3.1.2</code></p><p>添加环境变量至shell配置文件, 我使用<code>zshrc</code>，故执行<code>vim .zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/usr/local/Cellar/hive/3.1.2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span></pre></td></tr></table></figure><p>保存退出后使配置生效<code>source .zshrc</code>。</p><h3 id="创建Hive的HDFS目录"><a href="#创建Hive的HDFS目录" class="headerlink" title="创建Hive的HDFS目录"></a>创建Hive的HDFS目录</h3><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Create warehouse folder under hive and provide permission</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir -p &#x2F;user&#x2F;hive&#x2F;warehouse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -chmod g+w &#x2F;user&#x2F;hive&#x2F;warehouse</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Create tmp folder in root and provide permission</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir -p &#x2F;tmp</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -chmod g+w &#x2F;tmp</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir -p &#x2F;tmp&#x2F;hive</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -chmod 777 &#x2F;tmp&#x2F;hive</span></pre></td></tr></table></figure><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd /usr/local/Cellar/hive/3.1.2/libexec/conf</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mv hive-default.xml.template hive-default.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">vim hive-site.xml</span></pre></td></tr></table></figure><p>进入<code>/usr/local/Cellar/hive/3.1.2/libexec/conf</code>目录创建<code>hive-site.xml</code>，在其中添加如下配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><p>其中UserName为数据库名称，Password为数据库密码，其中Password与下面mysql创建的hive账户密码一致。</p><h2 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h2><blockquote><p>本文默认安装MySQL。</p></blockquote><h3 id="jdbc包下载"><a href="#jdbc包下载" class="headerlink" title="jdbc包下载"></a>jdbc包下载</h3><p>下载地址：<a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener">地址</a>，选择Platform Independent，下载。</p><p>下载完成后，将mysql的jdbc包移入hive的lib目录下<code>/usr/local/Cellar/hive/3.1.2/libexec/lib</code>。</p><h3 id="创建sql表"><a href="#创建sql表" class="headerlink" title="创建sql表"></a>创建sql表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mysql&gt; create database hive;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mysql&gt; USE hive;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#39;hive&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;hive&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">mysql&gt; grant SELECT,INSERT,UPDATE,DELETE,ALTER,CREATE ON hive.* TO &#39;hive&#39;@&#39;localhost&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; grant all on hive.* to &#39;hive&#39;@&#39;localhost&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span></pre></td></tr></table></figure><h2 id="启动Hive-并测试"><a href="#启动Hive-并测试" class="headerlink" title="启动Hive 并测试"></a>启动Hive 并测试</h2><p>先执行以下命令，使用 schematool工具初始化Hive版本的Metastore架构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">schematool -initSchema -dbType mysql</span></pre></td></tr></table></figure><p>最后会出现<code>Initialization script completed schemaTool completed</code></p><p>启动Hive</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hive</span></pre></td></tr></table></figure><p>hive启动完成后会出现如下命令提示符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hive&gt;</span></pre></td></tr></table></figure><p>可以简单执行以下命令尝试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hive&gt; show databases;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hive&gt; show tables;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hive&gt; create table test (id int, name string);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">hive&gt; insert into test values (1, &#39;John Smith&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">hive&gt; select * from test;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">hive&gt; drop table test;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">hive&gt; exit;</span></pre></td></tr></table></figure><p><img src="/2020/05/16/Hive%20MacOS%20%E9%85%8D%E7%BD%AE/hive.png" alt="hive"></p><p>Hive安装成功后在MySql会有如下表格：</p><p><img src="/2020/05/16/Hive%20MacOS%20%E9%85%8D%E7%BD%AE/hivetable.png" alt="hivetable"></p><h2 id="Hive常见Bug汇总"><a href="#Hive常见Bug汇总" class="headerlink" title="Hive常见Bug汇总"></a>Hive常见Bug汇总</h2><h3 id="guava版本不一致问题"><a href="#guava版本不一致问题" class="headerlink" title="guava版本不一致问题"></a>guava版本不一致问题</h3><p>在使用hive命令后，出现如下报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">LF4J: Class path contains multiple SLF4J bindings.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">SLF4J: Found binding in [jar:file:/usr/local/Cellar/hive/3.1.2/libexec/lib/log4j-slf4j-impl-2.10.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">SLF4J: Found binding in [jar:file:/usr/local/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.conf.Configuration.set(Configuration.java:1357)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.conf.Configuration.set(Configuration.java:1338)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.mapred.JobConf.setJar(JobConf.java:536)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.mapred.JobConf.setJarByClass(JobConf.java:554)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.mapred.JobConf.&lt;init&gt;(JobConf.java:448)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.hive.conf.HiveConf.initialize(HiveConf.java:5141)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.hive.conf.HiveConf.&lt;init&gt;(HiveConf.java:5099)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4jCommon(LogUtils.java:97)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.hive.common.LogUtils.initHiveLog4j(LogUtils.java:81)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:699)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:683)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    at java.lang.reflect.Method.invoke(Method.java:498)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.util.RunJar.run(RunJar.java:323)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</span></pre></td></tr></table></figure><p>修复：</p><p>查阅资料后，是因为<code>com.google.common.base.Preconditions.checkArgument</code>依赖包在hive内部以及hadoop内部版本不一致导致的。</p><p>使用如下命令解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/guava*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/guava-27.0-jre.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/hive/3.1.2/libexec/lib/guava* </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/hive/3.1.2/libexec/lib/guava-19.0-jre.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hadoop 版本比 hive 高，替换之</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv /usr/<span class="built_in">local</span>/Cellar/hive/3.1.2/libexec/lib/guava-19.0.jar /tmp <span class="comment"># 保留下副本</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp /usr/<span class="built_in">local</span>/Cellar/hadoop/3.2.1/libexec/share/hadoop/common/lib/guava-27.0-jre.jar /usr/<span class="built_in">local</span>/Cellar/hive/3.1.2/libexec/lib/ <span class="comment"># 替换</span></span></span></pre></td></tr></table></figure><h3 id="Metastore-Server未正常启动"><a href="#Metastore-Server未正常启动" class="headerlink" title="Metastore Server未正常启动"></a>Metastore Server未正常启动</h3><p>报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:444)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:672)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:616)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        at java.lang.reflect.Method.invoke(Method.java:597)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        at org.apache.hadoop.util.RunJar.run(RunJar.java:221)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        at org.apache.hadoop.util.RunJar.main(RunJar.java:136)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span></pre></td></tr></table></figure><p>解决：启动Hive的MetaStoreServer服务进程即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># hive --service metastore &amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[1] 52460</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Starting Hive Metastore Server</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">SLF4J: Found binding in [jar:file:&#x2F;root&#x2F;hadoop&#x2F;hadoop-2.6.0&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;slf4j-log4j12-1.7.5.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">SLF4J: Found binding in [jar:file:&#x2F;root&#x2F;hadoop&#x2F;apache-hive-0.14.0-bin&#x2F;lib&#x2F;hive-jdbc-0.14.0-standalone.jar!&#x2F;org&#x2F;slf4j&#x2F;impl&#x2F;StaticLoggerBinder.class]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">SLF4J: See http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#multiple_bindings for an explanation.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]</span></pre></td></tr></table></figure><p><img src="/2020/05/16/Hive%20MacOS%20%E9%85%8D%E7%BD%AE/metastore.png" alt="metastore"></p><p>Hive启动报错</p><p>参见：<a href="https://stackoverflow.com/questions/52783323/hive-throws-wstxparsingexception-illegal-character-entity-expansion-character" target="_blank" rel="noopener">参考</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Exception in thread "main" java.lang.RuntimeException: com.ctc.wstx.exc.WstxParsingException: Illegal character entity: expansion character (code 0x8</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure><p>解决：</p><p>在hive-site.xml中删除下面描述</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     Ensures commands with OVERWRITE (such as INSERT OVERWRITE) acquire Exclusive locks for </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     transactional tables. This ensures that inserts (w/o overwrite) running concurrently</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     are not hidden by the INSERT OVERWRITE.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://blog.csdn.net/freedomboy319/article/details/44828337" target="_blank" rel="noopener">常见问题汇总</a></p><p><a href="https://www.datageekinme.com/setup/setting-up-my-mac-hive/" target="_blank" rel="noopener">hive configuration</a></p><p><a href="https://luckymrwang.github.io/2018/03/14/Install-hive-on-Mac-with-Homebrew/" target="_blank" rel="noopener">https://luckymrwang.github.io/2018/03/14/Install-hive-on-Mac-with-Homebrew/</a></p><p><a href="https://dbmstutorials.com/hive/hive-setup-on-mac.html" target="_blank" rel="noopener">hive set up on mac</a></p><p><a href="https://www.datageekinme.com/setup/setting-up-my-mac-hive/" target="_blank" rel="noopener">set up hive</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hive-MacOS-配置&quot;&gt;&lt;a href=&quot;#Hive-MacOS-配置&quot; class=&quot;headerlink&quot; title=&quot;Hive MacOS 配置&quot;&gt;&lt;/a&gt;Hive MacOS 配置&lt;/h2&gt;&lt;p&gt;环境：&lt;/p&gt;
&lt;p&gt;Hadoop3.2.1&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="Bigdata" scheme="http://yoursite.com/tags/Bigdata/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop集群配置安装：MacOS+Ubuntu尝试</title>
    <link href="http://yoursite.com/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/"/>
    <id>http://yoursite.com/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/</id>
    <published>2020-05-11T16:17:58.000Z</published>
    <updated>2020-05-12T14:05:40.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop集群配置安装：MacOS-Ubuntu-尝试"><a href="#Hadoop集群配置安装：MacOS-Ubuntu-尝试" class="headerlink" title="Hadoop集群配置安装：MacOS+Ubuntu 尝试"></a>Hadoop集群配置安装：MacOS+Ubuntu 尝试</h1><p>关于Hadoop集群配置，教程基本都是都是Ubuntu之间的相互配置，很少MacOs与Ubuntu之间的分布式教程，相信很多同学为了做实验受限于机器等条件限制，本文可能会有所帮助。</p><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><p>MacOS 【Catalina 10.15.3 】： 作为从节点，节点名称为superming。</p><p>Ubuntu 【19.04】：作为主节点，节点命名ZKM-Master。【为方便理解，文章中使用Master替换】</p><p>两者位于同一网络环境下，ZKM-Master 节点局域网IP为<strong>192.168.1.106</strong>，superming节点局域网IP为<strong>192.1.1.101</strong>。</p><p><strong>说明：</strong></p><p>两者安装的Hadoop版本均为3.2.1。</p><p>Ubuntu机器使用hadoop用户进行hadoop的相关操作，而Mac机器上为了方便使用，并未创建hadoop用户，而是使用我原来的用户superming进行相关操作，在配置集群之前，所有机器上的hadoop配置均按照伪分布式配置，并可以运行。</p><a id="more"></a><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>为了便于区分节点名称，修改Master的主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hostname</span></pre></td></tr></table></figure><p>在文件hostname文件中写入自己指定的机器名称并保存即可。</p><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/hadoop4.png" alt="hadoop4"></p><h3 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h3><p>在每台机器上修改节点对应的IP映射。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span></pre></td></tr></table></figure><p>按照我的机器命名及IP，添加如下映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">192.168.1.106 ZKM-Master</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">192.168.1.101 superming</span></pre></td></tr></table></figure><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><blockquote><p>⚠️：SSH是配置中需要变通的一处，因为我的机器之间的用户等配置并不完全对等，需要进行一些多余配置消除这些影响。</p></blockquote><p>SSH主要是让Master节点可以通过SSH无密码登录到各Slave节点上。</p><p>本步骤用于Master可以通过SSH无密码访问各Slave节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd ~/.ssh               # 如果没有该目录，先执行一次ssh localhost</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">rm ./id_rsa*            # 删除之前生成的公匙「因为主机名修改了」</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa       # 回车到底</span></pre></td></tr></table></figure><p>截止该步骤，SSH密钥生成完毕，需要SSH能够免密访问机器，需要将生成的公钥保存到Anutorized_key文件中。</p><blockquote><p>扩展：<a href="https://abcdabcd987.com/ssh/" target="_blank" rel="noopener">SSH基本用法</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cat ./id_rsa.pub &gt;&gt; ./authorized_keys</span></pre></td></tr></table></figure><p>将本机的SSH公钥保存到本机的anthoroized_keys文件中，执行<code>ssh ZKM-Master</code>免密码访问本机，详情如下：</p><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/1.png" alt="1"></p><p>然后将本机的SSH公钥加入从节点的授权中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub superming@superming:./ #发送公钥至从机器./目录下  解释：&lt;superming:superming&gt;:机器名：用户名 scp为ssh的传输命令，即通过ssh传输文件。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以下在从机执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh       # 如果不存在该文件夹需先创建，若已存在则忽略</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">rm ~/id_rsa.pub    # 用完就可以删掉了</span></pre></td></tr></table></figure><p>如果有多余节点，按照以上步骤进行传输并授权。该操作后，Master节点可以无密码访问各从节点。</p><p><strong>问题解决</strong>：以上配置后，在Master 节点执行<code>ssh superming</code>，默认使用hadoop用户访问ssh，而我的从节点使用的是superming用户，因此需要为SSH配置别名以确定默认登录用户名。</p><p>需要在.ssh/文件下创建一个config文件，用来指定ssh指定的访问方式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd .ssh/</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">touch config</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">vim config</span></pre></td></tr></table></figure><p>config文件内容如下，Host指定访问名称，Hostname指定访问IP地址，User指定访问用户。</p><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/2.png" alt="1"></p><p>经过以上配置后，在Master执行<code>ssh superming</code>就指定用户superming访问Hostname为<code>192.168.1.101</code>。</p><h2 id="分布式集群环境配置"><a href="#分布式集群环境配置" class="headerlink" title="分布式集群环境配置"></a>分布式集群环境配置</h2><p>一共需要配置五个文件，配置文件目录在<code>/usr/local/hadoop/etc/hadoop</code>下</p><p><code>Slave</code>文件：</p><p>注：3.2.1版本slave文件即worker，编辑该文件即可。</p><p>Slave文件需要列出节点名称，默认为<code>localhost</code>，本节点仅有一个Datanode，名称为superming，故删除原来的localhost文件并添加superming。</p><p>修改<code>core-site.xml</code>文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://Master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><p>注：以上为<strong>标准格式</strong>，需要根据个人情况进行修改，比如我的机器名为<code>ZKM-Master</code>，需要将fs.defaultFS的值改为<code>hdfs://ZKM-Master:9000</code>。</p><p>修改<code>hdfs-site.xml</code>文件，集群中有几个slave节点，将<code>dfs.replication</code>的值改为多少：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Master:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><p>修改<code>mapred-site.xml</code>文件：【第一次设置需要将<code>mapred-site.xml.template</code>文件重命名】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Master:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Master:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><p>修改<code>yarn-site.xml</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><blockquote><p>如果是两台ubuntu机器，按以下命令即可将配置好的文件分发到各个节点上，并完成配置。</p></blockquote><p>因为以前跑过伪分布式模式，在切换到集群模式前删除之前的临时文件，<strong>并在Master节点上执行</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd /usr/local</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo rm -r ./hadoop/tmp     # 删除 Hadoop 临时文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sudo rm -r ./hadoop/logs/*   # 删除日志文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">tar -zcf ~/hadoop.master.tar.gz ./hadoop   # 先压缩再复制</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">cd ~</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">scp ./hadoop.master.tar.gz superming:/home/hadoop # superming为从节点用户名称，根据自己配置情况修改</span></pre></td></tr></table></figure><p><strong>Slave节点执行：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo rm -r /usr/local/hadoop    # 删掉旧的（如果存在）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo tar -zxf ~/hadoop.master.tar.gz -C /usr/local</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sudo chown -R hadoop /usr/local/hadoop</span></pre></td></tr></table></figure><p>以上，Hadoop节点的配置基本完成。</p><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><p>问题解决：</p><p>因为Hadoop在Mac上的文件以及安装目录与Ubuntu上有很大不同，按以上配置启动，在Ubuntu上启动的Namenode启动正常，但是在Mac上启动的Datanode会碰到很多问题，很多报错忘记截图了，总结了一下大致上是默认安装目录的冲突引起的问题。</p><blockquote><p>本来想根据报错一个个解决的，修改Master上寻找Datanode路径的配置的，但操作过于麻烦，还是选择了相对简单的方法。</p></blockquote><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/3.png" alt="1"></p><p>如上，在启动datanode节点时不能找到对应目录<code>/usr/local/haoop/etc/hadoop</code>目录，就是因为Mac的目录冲突导致的。所以作为Datanode，需要确保有/usr/local/hadoop/这个目录能够让Master节点访问到，如果没有就创建一个。</p><p>解决：将原本安装于<code>/usr/local/Cellar/hadoop/3.2.1</code>下的Hadoop相关文件复制到该目录下<code>/usr/local/hadoop/</code>下。同时又因为ubuntu的hadoop配置文件在<code>./etc/hadoop/</code>下，而Mac在<code>./libexec/share/hadoop/</code>下，故需要在hadoop目录下创建etc文件，将<code>./libexec/share/hadoop/</code>下的配置文件复制到etc文件下。</p><blockquote><p>截止该步，将Mac的配置文件与Ubuntu文件的冲突解决。</p></blockquote><p>在该目录下创建tmp文件，用于存储数据。tmp文件下创建<code>dfs/data/</code>目录以及<code>dfs/name/</code>目录。</p><blockquote><p>综上，Mac作为数据节点配置完毕。</p></blockquote><p>在Master节点上使用以下命令启动集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hdfs namenode -format       # 首次运行需要执行初始化</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">start-yarn.sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh start historyserver</span></pre></td></tr></table></figure><p>如下图，Master上的执行过程：</p><blockquote><p>hdfs dfsadmin -report 用于查看节点状态。</p></blockquote><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/4.png" alt="1"></p><p>Slave节点上应该有Datanode运行：</p><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/5.png" alt="1"></p><p>开启成功后。可以在web页面查看节点状态：<code>localhost:9870</code></p><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/web.png" alt="1">`</p><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/web2.png" alt="web2">执行分布式例子：</p><p>创建HDFS用户目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir -p /user/hadoop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -mkdir input</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hdfs dfs -put /usr/local/hadoop/etc/hadoop/*.xml input</span></pre></td></tr></table></figure><p>执行MapReduce作业：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output 'dfs[a-z.]+'</span></pre></td></tr></table></figure><p><img src="/2020/05/12/Hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85--MacOS+Ubuntu%E5%B0%9D%E8%AF%95/hadoop2.png" alt="hadoop2"></p><p>节点关闭也是在Master上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">stop-yarn.sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">stop-dfs.sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">mr-jobhistory-daemon.sh stop historyserver</span></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html" target="_blank" rel="noopener">Hadoop Cluster Setup</a></p><p><a href="https://www.linode.com/docs/databases/hadoop/how-to-install-and-set-up-hadoop-cluster/" target="_blank" rel="noopener">How to Install and Set Up a 3-Node Hadoop Cluster</a></p><p><a href="http://dblab.xmu.edu.cn/blog/install-hadoop-cluster/" target="_blank" rel="noopener">Hadoop集群安装配置教程_Hadoop2.6.0_Ubuntu/CentOS</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hadoop集群配置安装：MacOS-Ubuntu-尝试&quot;&gt;&lt;a href=&quot;#Hadoop集群配置安装：MacOS-Ubuntu-尝试&quot; class=&quot;headerlink&quot; title=&quot;Hadoop集群配置安装：MacOS+Ubuntu 尝试&quot;&gt;&lt;/a&gt;Hadoop集群配置安装：MacOS+Ubuntu 尝试&lt;/h1&gt;&lt;p&gt;关于Hadoop集群配置，教程基本都是都是Ubuntu之间的相互配置，很少MacOs与Ubuntu之间的分布式教程，相信很多同学为了做实验受限于机器等条件限制，本文可能会有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;环境准备：&quot;&gt;&lt;a href=&quot;#环境准备：&quot; class=&quot;headerlink&quot; title=&quot;环境准备：&quot;&gt;&lt;/a&gt;环境准备：&lt;/h2&gt;&lt;p&gt;MacOS 【Catalina 10.15.3 】： 作为从节点，节点名称为superming。&lt;/p&gt;
&lt;p&gt;Ubuntu 【19.04】：作为主节点，节点命名ZKM-Master。【为方便理解，文章中使用Master替换】&lt;/p&gt;
&lt;p&gt;两者位于同一网络环境下，ZKM-Master 节点局域网IP为&lt;strong&gt;192.168.1.106&lt;/strong&gt;，superming节点局域网IP为&lt;strong&gt;192.1.1.101&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者安装的Hadoop版本均为3.2.1。&lt;/p&gt;
&lt;p&gt;Ubuntu机器使用hadoop用户进行hadoop的相关操作，而Mac机器上为了方便使用，并未创建hadoop用户，而是使用我原来的用户superming进行相关操作，在配置集群之前，所有机器上的hadoop配置均按照伪分布式配置，并可以运行。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://yoursite.com/2020/04/20/MongoDB/"/>
    <id>http://yoursite.com/2020/04/20/MongoDB/</id>
    <published>2020-04-19T16:17:58.000Z</published>
    <updated>2020-04-20T15:45:45.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用tar包进行安装"><a href="#使用tar包进行安装" class="headerlink" title="使用tar包进行安装"></a>使用tar包进行安装</h3><p>前提：</p><p>MongoDB4.2社区版支持macOS 10.12及后续版本。</p><p>下载tar包：<a href="https://www.mongodb.com/download-center/community?tck=docs_server" target="_blank" rel="noopener">地址</a></p><ol><li><p>OS选择macOSx64，包选择TGZ，点击下载。</p></li><li><p>把下载文件移至<code>/usr/local</code>下，进行解压缩。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-macos-x86_64-4.2.5.tgz</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo mv mongodb-osx-x86_64-4.2.5/ mongodb  //重命名</span></pre></td></tr></table></figure><ol start="3"><li>将bin目录下的文件放入<code>/usr/local/bin</code>下</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo cp /usr/local/mongodb/bin/* /usr/local/bin/</span></pre></td></tr></table></figure><a id="more"></a><p>建立存放数据目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/var/mongodb    //mongod进程写入数据文件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/var/log/mongodb//创建mongod进程产生的log文件</span></pre></td></tr></table></figure><p>注意：在macOS 10.15 Catalina后，Apple限制了MongDB存放数据的默认地址<code>/data/db</code>。所以我们必须使用不同的数据目录。比如<code>/usr/local/var/mongodb</code>。</p><p>设置文件的拥有者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo chown my_mongodb_user /usr/local/var/mongodb</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo chown my_mongodb_user /usr/local/var/log/mongodb</span></pre></td></tr></table></figure><p>运行</p><p>使用命令行开启mongod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork</span></pre></td></tr></table></figure><p>使用config文件开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf</span></pre></td></tr></table></figure><blockquote><p>使用tar包安装的mongod没有创建<code>mongod.conf</code>文件。</p></blockquote><p>查看是否开启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ps aux | grep -v grep | grep mongod</span></pre></td></tr></table></figure><p>确认完毕在终端输入mongo即可开启mongoDB</p><h3 id="使用Brew安装"><a href="#使用Brew安装" class="headerlink" title="使用Brew安装"></a>使用Brew安装</h3><p>准备：</p><p>需要Xcode、Homebrew。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew tap mongodb/brew</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">brew install mongodb-community@4.2</span></pre></td></tr></table></figure><p>使用brew安装，会自动创建如下文件及目录</p><blockquote><p>the configuration file(<code>/usr/local/etc/mongod.conf</code>)</p><p>the log directory path(<code>/usr/local/var/log/mongodb</code>)</p><p>the data directory path (<code>/usr/local/var/mongodb</code>)</p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>可以使用brew运行MongoDB作为macOS服务，或者手动将其作为后台程序运行。</p><ul><li>使用brew运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew services start mongodb-community@4.2   //开启Mongod进程</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">brew services stop mongodb-community@4.2//停止Mongod进程</span></pre></td></tr></table></figure><ul><li>作为后台程序手动开启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf --fork</span></pre></td></tr></table></figure><p>以上都使用<code>usr/local/etc/mongod.conf</code>文件。</p><p>同样可以使用以下命令验证mongod是否运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ps aux | grep -v grep | grep mongod</span></pre></td></tr></table></figure><p>日志文件存放于：<code>/usr/local/var/log/mongodb/mongo.log</code></p><p>键入mongo即可使用mongoDB。</p><h2 id="MongoDB概述"><a href="#MongoDB概述" class="headerlink" title="MongoDB概述"></a>MongoDB概述</h2><p>MongoDB是一个面向文档的NoSQL数据库，由C++编写，使用类JSON的BSON格式进行数据编码和传输。具有高性能、高可用、可伸缩、易部署等特性，目前非常火爆。</p><h2 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h2><h3 id="文档数据库"><a href="#文档数据库" class="headerlink" title="文档数据库"></a>文档数据库</h3><p>记录在MongoDB中是一个文档，是一个由键值对组成的数据结构。</p><p><img src="/2020/04/20/MongoDB/exp.png" alt="exp"></p><p>优势：</p><blockquote><p>文档可以适应多种本地文件的数据类型</p><p>使用嵌入式的文档组织模式减少了表之间的连接需求</p><p>很好的动态伸缩性</p></blockquote><p>MongoDB单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同数据库克放在不同文件内。</p><h3 id="集合-Collections"><a href="#集合-Collections" class="headerlink" title="集合(Collections)"></a>集合(Collections)</h3><p>集合是MongoDB的文档组(Collections)，类似RDBMS中的表格。集合存储于数据库中，没有固定的结构，可以在集合中插入不同格式的数据。如下为一个集合，其中包括多个文档(Documents)。</p><p><img src="/2020/04/20/MongoDB/colletions.png" alt="colletions"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/2020/04/20/MongoDB/data.png" alt="DataType"></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="主从模式（Master-Slaver）"><a href="#主从模式（Master-Slaver）" class="headerlink" title="主从模式（Master-Slaver）"></a>主从模式（Master-Slaver）</h3><p><img src="/2020/04/20/MongoDB/Master.png" alt="Master"></p><p>由一个主节点和多个从节点组成。</p><p>主节点运行MongoDB实例，完成数据存储、查询和修改操作。</p><p>从节点不提供任何服务，但可通过设置是其具有查询服务，从而减轻主节点压力。</p><p>主节点出现故障，只能人工介入，指定新的主节点，从节点不会自动升级主节点，此时集群处于只读状态。</p><h3 id="副本集模式-Replication"><a href="#副本集模式-Replication" class="headerlink" title="副本集模式(Replication)"></a>副本集模式(Replication)</h3><p>官方参考：<a href="https://docs.mongodb.com/manual/replication/" target="_blank" rel="noopener">Replication</a></p><p><img src="/2020/04/20/MongoDB/replication.png" alt="replication"></p><p>主节点负责数据写入和更新，负责指定其他节点为从节点，并设置从节点的可读性。</p><p>在主节点发生故障时，有额外仲裁节点会参与选举新节点作为主节点。</p><p>副本集模式可以解决主节点发生故障导致数据丢失或不可用问题，但遇到存储海量数据情况时，就束手无策了。</p><h3 id="分片模式（Sharding）"><a href="#分片模式（Sharding）" class="headerlink" title="分片模式（Sharding）"></a>分片模式（Sharding）</h3><p>官方参考: <a href="https://docs.mongodb.com/manual/sharding/" target="_blank" rel="noopener">Sharding</a></p><p><img src="/2020/04/20/MongoDB/sharding.png" alt="sharding"></p><p>分片服务器（Shard Server）：每个分片服务器都是一个mongod数据库实例，用于存储实际的数据块。<strong>整个数据库集合分成多个块存储在不同分片服务器中</strong>。</p><p>配置服务器（Config Server）：保存集合和分片的元数据。</p><p>路由服务器（Route Server）：在集群中作为路由使用，客户端由此介入。路由服务器本身不保存数据，启动时从配置服务器加载集群信息到缓存中，并将客户端的请求路由给每个分片服务器，将各个分片服务器的返回结果进行聚合并返回客户端。</p><h2 id="Shell操作"><a href="#Shell操作" class="headerlink" title="Shell操作"></a>Shell操作</h2><h3 id="一-创建库与集合操作"><a href="#一-创建库与集合操作" class="headerlink" title="一. 创建库与集合操作"></a>一. 创建库与集合操作</h3><ol><li>创建一个名为library的数据库</li></ol><p>创建数据库的语法为<code>use DATABASE_NAME</code></p><p><code>use library</code></p><ol start="2"><li>在library数据库中创建名为book的集合</li></ol><p>创建集合<code>db.createCollection(&quot;book&quot;)</code></p><ol start="3"><li>将集合book重命名为new_book</li></ol><p>修改集合的语法为<code>db.collection.renameCollection(target, dropTarget)</code>，其中dropTarget为可选参数，如果为true，则mongod会在先删除原有集合。</p><p><code>db.collection.renameCollection(&quot;new_book&quot;)</code></p><ol start="4"><li>查看集合new_book的信息</li></ol><p>查询数据的语法为<a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/#db.collection.find" target="_blank" rel="noopener"><code>db.collection.find(query, projection)</code></a>；query，document类型，使用查询操作符指定的查询条件；projection，document类型，使用投影操作副返回的键。</p><p><code>db.collection.find()</code></p><ol start="5"><li>删除集合new_books</li></ol><p>删除集合的语法为<a href="https://docs.mongodb.com/manual/reference/method/db.collection.drop/" target="_blank" rel="noopener"><code>db.collection.drop()</code></a>，</p><p><code>db.new_book.drop()</code></p><p>6.删除数据库library</p><p>删除数据库语法为<code>db.dropDatabase(&lt;option&gt;)</code></p><p><code>db.dropDatabase()</code></p><h3 id="二：文档插入"><a href="#二：文档插入" class="headerlink" title="二：文档插入"></a>二：文档插入</h3><p>文档插入有三种方式，分别为<a href="https://docs.mongodb.com/manual/reference/method/db.collection.insert/" target="_blank" rel="noopener"><code>db.collection.insert()</code></a>，<a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/" target="_blank" rel="noopener"><code>db.collection.insertOne()</code></a>，[<code>db.collection.insertMany()</code>()]；</p><p>insert( )语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"> db.collection.insert(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &lt;document or array of documents&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     writeConcern: &lt;document&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     ordered: &lt;boolean&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Example</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">db.products.insert( &#123; item: "card", qty: 15 &#125; )</span></pre></td></tr></table></figure><p>insertone( )语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.insertOne(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &lt;document&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      writeConcern: &lt;document&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Examples:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">try &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   db.products.insertOne( &#123; item: "card", qty: 15 &#125; );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125; catch (e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   print (e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>insertmany( )语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.insertMany(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      writeConcern: &lt;document&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      ordered: &lt;boolean&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Examples：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">try &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   db.products.insertMany( [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      &#123; _id: 10, item: "large box", qty: 20 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      &#123; _id: 11, item: "small box", qty: 55 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      &#123; _id: 12, item: "medium box", qty: 30 &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">   ] );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125; catch (e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   print (e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img src="/2020/04/20/MongoDB/insert.png" alt="insert"></p><p>在插入文档时注意<code>[ ]</code>的使用，例如：</p><ol><li>在school数据库中按下表创建表示班级grade_1_2的集合，并插入相应文档：</li></ol><table><thead><tr><th>name</th><th>sex</th><th>age</th><th>hobby</th><th>telephone</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td>fixed</td><td>mobile</td></tr><tr><td>Tom</td><td>M</td><td>18</td><td>Football, skiing</td><td>84833380</td><td>13840957289</td></tr><tr><td>Lisi</td><td>M</td><td>18</td><td>Swimming</td><td></td><td>15543789567</td></tr><tr><td>Jack</td><td>M</td><td>20</td><td>Baseball</td><td>84833380</td><td>17656775563</td></tr><tr><td>Joan</td><td>F</td><td>22</td><td></td><td>84832281</td><td>13840957289</td></tr><tr><td>Marry</td><td>F</td><td>25</td><td>Table tennis</td><td></td><td>15543789567</td></tr></tbody></table><p>其中hobby部分设计多个项目，如果使用<code>{name:&quot;Zhangsan&quot;,sex:&quot;M&quot;,age:20,hobby:&quot;Swimming&quot;,&quot;basketball&quot;,telephone:{fixed:&quot;84833380&quot;,mobile:&quot;13840957289&quot;}}</code>，后期会导致查询方面的问题。</p><p>应该使用<code>[ ]</code>将其中的内容括起来:<code>{name:&quot;Zhangsan&quot;,sex:&quot;M&quot;,age:20,hobby:[&quot;Swimming&quot;,&quot;basketball&quot;],telephone:{fixed:&quot;84833380&quot;,mobile:&quot;13840957289&quot;}}</code></p><p>上述插入操作如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.insertMany([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;name:"Tom",sex:"M",age:18,hobby:["Football","Skiing"],telephone:&#123;fixed:"84833380",mobile:"13840957289"&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;name:"Lisi",sex:"M",age:18,hobby:"Swimming",telephone:&#123;fixed:"84833380",mobile:"17656775563"&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;name:"Jack",sex:"M",age:20,hobby:"Swimming",telephone:&#123;fixed:"84832281",mobile:"13840957289"&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#123;name:"Joan",sex:"F",age:22&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#123;name:"Marry",sex:"F",age:25,hobby:"Table tennis",telephone:&#123;mobile:"15543789567"&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">]);</span></pre></td></tr></table></figure><h3 id="三：简单文档增查"><a href="#三：简单文档增查" class="headerlink" title="三：简单文档增查"></a>三：简单文档增查</h3><p>文档查询一般使用<a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/" target="_blank" rel="noopener"><code>db.collection.find(query, projection)</code></a></p><p>query：document类型，可选，使用查询操作运算符；</p><p>project：document类型，指定投影操作符返回字段，{ field1: <value>, field2: <value> … }，value为0不显示，1显示。</value></value></p><p>查询选择器参考：<a href="https://docs.mongodb.com/manual/reference/operator/query/#query-selectors" target="_blank" rel="noopener">Query Selectors</a></p><p><strong>多条件查询</strong>：</p><p><img src="/2020/04/20/MongoDB/Multiple.png" alt="multiple"></p><p><strong>查询数组元素参考</strong>：</p><p><img src="/2020/04/20/MongoDB/arrary.png" alt="array"></p><p><strong>其中对查询数据进行重新整理的行为参考如下</strong>：</p><p><img src="/2020/04/20/MongoDB/cusorbehavior.png" alt="cusorbehavior"></p><p><strong>练习内容：</strong></p><ol><li>查看一年级二班grade_1_2中所有年龄大于 20 岁并且小于25 岁的学生</li></ol><p><code>db.grade_1_2.find({age:{$gt:20,$lt:25}})</code></p><ol start="2"><li>查看一年级二班grade_1_2中所有年龄大于 20 岁并且性别值为M的学生</li></ol><p><code>db.grade_1_2.find({age:{$gt:20},&quot;sex&quot;:&quot;M&quot;})</code></p><ol start="3"><li>查看一年级二班grade_1_2中所有兴趣爱好为Football的学生</li></ol><p><code>db.grade_1_2.find({&quot;hobby&quot;:&quot;Football&quot;})</code></p><ol start="4"><li>查看一年级二班grade_1_2中所有兴趣爱好既包括Football又包括Skiing的学生</li></ol><p><code>db.grade_1_2.find({&quot;hobby&quot;:{$all:[&quot;Football&quot;,&quot;Sking&quot;]}})</code></p><ol start="5"><li>扩展：查看一年级二班grade_1_2中所有兴趣爱好既包括Football或Skiing的学生</li></ol><p><code>db.grade_1_2.find({&quot;hobby&quot;:{$in:[&quot;Football&quot;,&quot;Sking&quot;]}})</code></p><ol start="6"><li>查看一年级二班grade_1_2中所有兴趣爱好两个以上的学生</li></ol><p><code>db.grade_1_2.find({hobby:{$size:2}})</code></p><ol start="7"><li>查看一年级二班grade_1_2中所有兴趣爱好两个以上的学生的数量</li></ol><p><code>db.grade_1_2.find({hobby:{$size:2}}).count()</code></p><ol start="8"><li><p>查看一年级二班grade_1_2的第二位学生</p></li><li><p>使用skip跳过第一个同学</p></li></ol><p><code>db.grade_1_2.find().limit(1).skip(1)</code></p><ol start="10"><li>查看一年级二班grade_1_2的学生，按年纪升序</li></ol><p><code>db.grade_1_2.find().sort({&quot;age&quot;: 1})</code> [ -1 为降序 ]</p><h3 id="四：数据删除相关"><a href="#四：数据删除相关" class="headerlink" title="四：数据删除相关"></a>四：数据删除相关</h3><p>数据删除主要使用<a href="https://docs.mongodb.com/manual/reference/method/db.collection.remove/" target="_blank" rel="noopener"><code>db.collection.remove()</code></a>，语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &lt;query&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     justOne: &lt;boolean&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     writeConcern: &lt;document&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     collation: &lt;document&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> justone: 默认<span class="literal">false</span>，删除所有匹配条件的数据，若改为<span class="literal">true</span>，则仅删除第一条。</span></span></pre></td></tr></table></figure><p><strong>练习内容：</strong></p><ol><li>删除一年级二班grade_1_2所有 20 岁的学生</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.remove(&#123;age:20&#125;)</span></pre></td></tr></table></figure><ol start="2"><li>删除一年级二班grade_1_2第一位18岁的学生</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.remove(&#123;"age": 18&#125;, &#123;justOne: 1&#125;)</span></pre></td></tr></table></figure><ol start="3"><li>删除一年级三班grade_1_3所有爱好football的学生</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.remove(&#123;"hobby":"football"&#125;)</span></pre></td></tr></table></figure><h3 id="五：更新文档"><a href="#五：更新文档" class="headerlink" title="五：更新文档"></a>五：更新文档</h3><p>对文章内容进行更新修改，一般使用<a href="https://docs.mongodb.com/manual/reference/method/db.collection.update/" target="_blank" rel="noopener"><code>db.collection.update()</code></a></p><blockquote><p>Modifies an existing document or documents in a collection. The method can modify specific fields of an existing document or documents or replace an existing document entirely, depending on the <a href="https://docs.mongodb.com/manual/reference/method/db.collection.update/#update-parameter" target="_blank" rel="noopener">update parameter</a>.</p></blockquote><p>语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &lt;query&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &lt;update&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     upsert: &lt;boolean&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     multi: &lt;boolean&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     writeConcern: &lt;document&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     collation: &lt;document&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">     arrayFilters: [ &lt;filterdocument1&gt;, ... ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     hint:  &lt;document|string&gt;        // Available starting in MongoDB 4.2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><p>Update的操作符：<a href="https://docs.mongodb.com/manual/reference/operator/update/#id1" target="_blank" rel="noopener">Update Operators</a></p><p><strong>Fields</strong></p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/currentDate/#up._S_currentDate" target="_blank" rel="noopener"><code>$currentDate</code></a></td><td align="left">Sets the value of a field to current date, either as a Date or a Timestamp.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/inc/#up._S_inc" target="_blank" rel="noopener"><code>$inc</code></a></td><td align="left">Increments the value of the field by the specified amount.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/min/#up._S_min" target="_blank" rel="noopener"><code>$min</code></a></td><td align="left">Only updates the field if the specified value is less than the existing field value.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/max/#up._S_max" target="_blank" rel="noopener"><code>$max</code></a></td><td align="left">Only updates the field if the specified value is greater than the existing field value.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/mul/#up._S_mul" target="_blank" rel="noopener"><code>$mul</code></a></td><td align="left">Multiplies the value of the field by the specified amount.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/rename/#up._S_rename" target="_blank" rel="noopener"><code>$rename</code></a></td><td align="left">Renames a field.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/set/#up._S_set" target="_blank" rel="noopener"><code>$set</code></a></td><td align="left">Sets the value of a field in a document.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/setOnInsert/#up._S_setOnInsert" target="_blank" rel="noopener"><code>$setOnInsert</code></a></td><td align="left">Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/unset/#up._S_unset" target="_blank" rel="noopener"><code>$unset</code></a></td><td align="left">Removes the specified field from a document.</td></tr></tbody></table><p><strong>Array</strong></p><p>Operators</p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/addToSet/#up._S_addToSet" target="_blank" rel="noopener"><code>$addToSet</code></a></td><td align="left">Adds elements to an array only if they do not already exist in the set.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/pop/#up._S_pop" target="_blank" rel="noopener"><code>$pop</code></a></td><td align="left">Removes the first or last item of an array.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/pull/#up._S_pull" target="_blank" rel="noopener"><code>$pull</code></a></td><td align="left">Removes all array elements that match a specified query.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/push/#up._S_push" target="_blank" rel="noopener"><code>$push</code></a></td><td align="left">Adds an item to an array.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/pullAll/#up._S_pullAll" target="_blank" rel="noopener"><code>$pullAll</code></a></td><td align="left">Removes all matching values from an array.</td></tr></tbody></table><p><strong>Modifiers</strong></p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/each/#up._S_each" target="_blank" rel="noopener"><code>$each</code></a></td><td align="left">Modifies the <a href="https://docs.mongodb.com/manual/reference/operator/update/push/#up._S_push" target="_blank" rel="noopener"><code>$push</code></a> and <a href="https://docs.mongodb.com/manual/reference/operator/update/addToSet/#up._S_addToSet" target="_blank" rel="noopener"><code>$addToSet</code></a> operators to append multiple items for array updates.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/position/#up._S_position" target="_blank" rel="noopener"><code>$position</code></a></td><td align="left">Modifies the <a href="https://docs.mongodb.com/manual/reference/operator/update/push/#up._S_push" target="_blank" rel="noopener"><code>$push</code></a> operator to specify the position in the array to add elements.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/slice/#up._S_slice" target="_blank" rel="noopener"><code>$slice</code></a></td><td align="left">Modifies the <a href="https://docs.mongodb.com/manual/reference/operator/update/push/#up._S_push" target="_blank" rel="noopener"><code>$push</code></a> operator to limit the size of updated arrays.</td></tr><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/sort/#up._S_sort" target="_blank" rel="noopener"><code>$sort</code></a></td><td align="left">Modifies the <a href="https://docs.mongodb.com/manual/reference/operator/update/push/#up._S_push" target="_blank" rel="noopener"><code>$push</code></a> operator to reorder documents stored in an array.</td></tr></tbody></table><p><strong>Bitwise</strong></p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.mongodb.com/manual/reference/operator/update/bit/#up._S_bit" target="_blank" rel="noopener"><code>$bit</code></a></td><td align="left">Performs bitwise <code>AND</code>, <code>OR</code>, and <code>XOR</code> updates of integer values.</td></tr></tbody></table><p>以官方为例，创建Collections如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.books.remove(&#123;&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">db.books.insertMany([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    "_id" : 1,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    "item" : "TBD",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    "stock" : 0,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    "info" : &#123; "publisher" : "1111", "pages" : 430 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    "tags" : [ "technology", "computer" ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    "ratings" : [ &#123; "by" : "ijk", "rating" : 4 &#125;, &#123; "by" : "lmn", "rating" : 5 &#125; ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    "reorder" : false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    "_id" : 2,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    "item" : "XYZ123",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    "stock" : 15,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    "info" : &#123; "publisher" : "5555", "pages" : 150 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    "tags" : [ ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    "ratings" : [ &#123; "by" : "xyz", "rating" : 5 &#125; ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    "reorder" : false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">]);</span></pre></td></tr></table></figure><p>inc 与 set 操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.books.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &#123; _id: 1 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     $inc: &#123; stock: 5 &#125;,   # stock增加5</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     $set: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       item: "ABC123",# 修改item</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">       "info.publisher": "2222",# 修改info下的publisher</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">       tags: [ "software" ],# 修改tags</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">       "ratings.1": &#123; by: "xyz", rating: 3 &#125;# 修改rating的第一部分</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><p>push操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.books.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &#123; _id: 2 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     $push: &#123; ratings: &#123; "by" : "jkl", "rating" : 2 &#125; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><p>unset操作，移除某filed操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.books.update(&#123;_id:2&#125;,&#123;$unset: &#123;tags:""&#125;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">same as : db.books.update( &#123; _id: 1 &#125;, &#123; <span class="variable">$unset</span>: &#123; tags: 1 &#125; &#125; )</span></span></pre></td></tr></table></figure><p>与SQL语句类似，即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ALTER TABLE books</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">DROP COLUMN tags</span></pre></td></tr></table></figure><p>文档覆盖操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.books.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   &#123; _id: 2 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     item: "XYZ123",</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     stock: 10,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     info: &#123; publisher: "2255", pages: 150 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">     tags: [ "baking", "cooking" ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><p><strong>练习内容：</strong></p><ol><li>修改一年级二班grade_1_2中名为Joan的学生，年龄为 22 岁，兴趣爱好为 dance和drawing</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;"name":"Joan"&#125;,&#123;$set:&#123;age:22,"hobby":["dancing","drawing"]&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ol start="2"><li>追加一年级二班grade_1_2中，名为Joan的学生的兴趣爱好sing</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;“name”:Joan&#125;,&#123;$push:&#123;“hobby”:sing&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ol start="3"><li>追加一年级二班grade_1_2中，名为Joan的学生的兴趣爱好sing和basketball，要保证hobby数组不重复；</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;"name":"Joan"&#125;,&#123;$addToSet:&#123;"hobby":&#123;$each:["sing","basketball"]&#125;&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ol start="4"><li>新学年，给一年级二班所有学生的年龄都增加一岁</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;$inc:&#123;"age":1&#125;&#125;,&#123;multi:true&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><ol start="5"><li>删除一年级二班grade_1_2中，名为Joan的学生的sex属性</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_2.update(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;"name":"Joan"&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;$unset:&#123;"sex":1&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><h3 id="六：文档聚合"><a href="#六：文档聚合" class="headerlink" title="六：文档聚合"></a>六：文档聚合</h3><p>文档聚合主要用于处理数据并返回计算结果，聚合操作将来自多个文档的值聚合在一起，按条件分组后，再进行一系列操作（求和、平均值、最大值、最小值）以返回单个结果。</p><p><strong>聚合管道</strong>是最常用的一种聚合方法，将前一条语句的结果作为第二条语句的输入。</p><p>MongoDB聚合管道由阶段组成，每个阶段在文档通过管道时转换文档。</p><p>使用<code>db.collection.aggregate(pipeline, options)</code></p><p>aggregate( )的阶段参考：<a href="https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/" target="_blank" rel="noopener">db.collection,aggregate()Stages</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建聚合示例</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.orders.insertMany([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123; "_id": 1, "cust_id": "abc1", "ord_date": ISODate("2012-11-02T17:04:11.102Z"), "status": "A", "amount": 50 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;" _id": 2, "cust_id": "xyz1", "ord_date": ISODate("2013-10-01T17:04:11.102Z"), "status": "A", "amount": 100 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#123; "_id": 3, "cust_id": "xyz1", "ord_date": ISODate("2013-10-12T17:04:11.102Z"), "status": "D", "amount": 25 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#123;" _id": 4, "cust_id": "xyz1", "ord_date": ISODate("2013-10-11T17:04:11.102Z"), "status": "D", "amount": 125 &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#123;" _id": 5, "cust_id": "abc1", "ord_date": ISODate("2013-11-12T17:04:11.102Z"), "status": "A", "amount": 25 &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">])</span></pre></td></tr></table></figure><p>分组计算总和：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.orders.aggregate([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">                     &#123; $match: &#123; status: "A" &#125; &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                     &#123; $group: &#123; _id: "$cust_id", total: &#123; $sum: "$amount" &#125; &#125; &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                     &#123; $sort: &#123; total: -1 &#125; &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">                   ])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 统计所有状态为‘A’，按cust_id分组，计算总价</span></span></pre></td></tr></table></figure><p><strong>练习内容：</strong></p><ol><li>统计每名学生在考试中的总分</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_4.aggregate([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;$group:&#123;_id:"$name",score:&#123;$sum:&#123;$sum:["$score.chinese","$score.math","$score.english"]&#125;&#125;&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">])</span></pre></td></tr></table></figure><ol start="2"><li>统计每名男生在考试中的总分及平均分</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_4.aggregate([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;$match:&#123;sex:"M"&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;$group:&#123;_id:"$name",score:&#123;$sum:&#123;$sum:["$score.chinese","$score.math","$score.english"]&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">avg:&#123;$avg:&#123;$avg:["$score.chinese","$score.math","$score.english"]&#125;&#125;&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">])</span></pre></td></tr></table></figure><ol start="3"><li>根据姓名分组，并统计人数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_4.aggregate([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;$group:&#123;_id:"$name",numbers:&#123;$sum:1&#125;&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">])</span></pre></td></tr></table></figure><ol start="4"><li>根据姓名分组，并统计人数，过滤人数大于2的学生</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_4.aggregate([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;$group:&#123;_id:"$name",numbers:&#123;$sum:1&#125;&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;$match:&#123;numbers:&#123;$gt:2&#125;&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">])</span></pre></td></tr></table></figure><ol start="5"><li>统计每名男生在考试中的总分</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.grade_1_4.aggregate([</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;$match:&#123;sex:"M"&#125;&#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;$group:&#123;_id:"$name",score:&#123;$sum:&#123;$sum:["$score.chinese","$score.math","$score.english"]&#125;&#125;&#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">])</span></pre></td></tr></table></figure><p>参考：</p><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x-tarball/#run-mongod-with-a-configuration-file" target="_blank" rel="noopener">MongoDB官方安装教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB&quot;&gt;&lt;a href=&quot;#MongoDB&quot; class=&quot;headerlink&quot; title=&quot;MongoDB&quot;&gt;&lt;/a&gt;MongoDB&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;使用tar包进行安装&quot;&gt;&lt;a href=&quot;#使用tar包进行安装&quot; class=&quot;headerlink&quot; title=&quot;使用tar包进行安装&quot;&gt;&lt;/a&gt;使用tar包进行安装&lt;/h3&gt;&lt;p&gt;前提：&lt;/p&gt;
&lt;p&gt;MongoDB4.2社区版支持macOS 10.12及后续版本。&lt;/p&gt;
&lt;p&gt;下载tar包：&lt;a href=&quot;https://www.mongodb.com/download-center/community?tck=docs_server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;OS选择macOSx64，包选择TGZ，点击下载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把下载文件移至&lt;code&gt;/usr/local&lt;/code&gt;下，进行解压缩。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf mongodb-macos-x86_64-4.2.5.tgz&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mv mongodb-osx-x86_64-4.2.5/ mongodb  //重命名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;将bin目录下的文件放入&lt;code&gt;/usr/local/bin&lt;/code&gt;下&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo cp /usr/local/mongodb/bin/* /usr/local/bin/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL</title>
    <link href="http://yoursite.com/2020/04/14/NoSQL/"/>
    <id>http://yoursite.com/2020/04/14/NoSQL/</id>
    <published>2020-04-13T16:17:58.000Z</published>
    <updated>2020-04-14T15:02:16.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>NoSQL( Not only SQL ) 是非关系型数据库的统称，其数据模型采用类似键/值、列族、文档等非关系模型。因为没有固定的表结构，故不存在连接操作，也无ACID约束。</p><p><strong>主要特点：</strong></p><p>可扩展性：传统的关系型数据库由于其设计约束，很难实现“横向扩展”，只能通过升级硬件来实现“纵向拓展”。而NoSQL数据库的设计初衷就是为了满足“横向扩展”，因此具有很好的水平扩展能力。</p><p>数据模型：关系模型是关系数据库的基石，以完备的关系代数理论为基础，保证了业务系统对数据一致性需求，但过多的束缚条件很难满足各新兴业务需求。而NoSQL摒弃各种束缚条件，采用新的模型，允许在一个数据元素中存储不同类型的数据。</p><p>云计算：云计算具有很好的水平扩展能力，根据资源使用情况进行自由伸缩，各种动态资源可以动态加入或退出。NoSQL凭良好的横向扩展能力，很好融入云计算环境中，构建基于NoSQL的云数据库服务。</p><a id="more"></a><h3 id="为何兴起？"><a href="#为何兴起？" class="headerlink" title="为何兴起？"></a>为何兴起？</h3><p>随着Web2.0时代以及大数据时代的带来。关系数据库暴露出很多缺陷「在银行、电信等各类商业公司具有较好的需求」，为了满足新兴业务和市场需求，NoSQL应运而生。</p><p>关系数据库无法满足Web2.0的需求：无法满足海量数据的管理需求，无法满足数据高并发的需求，无法满足高可扩展性和高可用性需求。</p><p>Web2.0特性：通常不要求严格的数据库事务，不要求严格的读写实时性，不包含大量复杂的SQL查询。</p><h2 id="NOSQL-vs-RDBMS"><a href="#NOSQL-vs-RDBMS" class="headerlink" title="NOSQL vs RDBMS"></a>NOSQL vs RDBMS</h2><p><img src="/2020/04/14/NoSQL/nosqlvssql.png" alt="nosqlvssql"></p><p>以下为NoSQL与关系数据库(Relatioal DataBase Management System)之间的比较。</p><p><img src="/2020/04/14/NoSQL/compare1.png" alt="compare1"></p><p><img src="/2020/04/14/NoSQL/compare2.png" alt="compare1"></p><p><img src="/2020/04/14/NoSQL/compare3.png" alt="compare1"></p><p>由上图比较可见，<strong>关系数据库</strong>优势在于以完善的关系代数理论作为基础，具有严格的标准，支持ACID四性并且可以实现高效的查询，技术成熟且开发环境支持良好。劣势在于其可扩展性较差，无法较好支持海量的数据存储，数据模型过于死板，无法很好支持Web2.0应用。事务机制影响系统整体性能等。    <strong>NoSQL数据库</strong>的明显优势在于，可以支持超大规模的数据存储，灵活的数据模型，同时具备良好的横向扩展能力。其劣势在于：很难实现数据完整性，缺乏数学理论基础，复杂性查询性能不高，一般不能实现事务的强一致性，维护较为困难。很重要的一个局限在于NoSQL没有一个统一的查询语言，各自独立，这将拖慢NoSQL发展。</p><p>综上，两者各有所长，都具有各自的用户群体和市场，根据需求选择。</p><h2 id="NoSQL四大类型"><a href="#NoSQL四大类型" class="headerlink" title="NoSQL四大类型"></a>NoSQL四大类型</h2><p>NoSQL数据库数量众多，主要分为四大类型：<strong>键值数据库、列族数据库、文档数据库和图数据库</strong>。</p><p><img src="/2020/04/14/NoSQL/type.png" alt="compare1"></p><p><img src="/2020/04/14/NoSQL/NoSQLfamily.png" alt="NoSQLfamily"></p><h3 id="键值数据库"><a href="#键值数据库" class="headerlink" title="键值数据库"></a>键值数据库</h3><p>键值数据库（Key-Value Database）使用一个哈希表，表中有一个特定Key和一个指针指向特定的Value。Key可以定位Value，即检索具体的Value。<strong>适合大量写操作的情况</strong>。</p><p><img src="/2020/04/14/NoSQL/keyvalue.png" alt="compare1"></p><h3 id="列族数据库"><a href="#列族数据库" class="headerlink" title="列族数据库"></a>列族数据库</h3><p>一般采用列族数据模型，数据库由多个行构成，每个数据包括多个列族，不同的行可以有不同数量的列族，属于统一列族的数据会存放在一起。每行数据通过行键进行定位，与这个行键对应的是一个列族，从该角度看，列族数据库可被视为键值数据库。</p><p><img src="/2020/04/14/NoSQL/column.png" alt="compare1"></p><h3 id="文档数据库"><a href="#文档数据库" class="headerlink" title="文档数据库"></a>文档数据库</h3><p>文档是文档数据库最小单位。文档数据库通过键来进行定位一个文档，为键值数据库的衍生品，比键值数据库有更好的查询效率。一个文档可以包含非常复杂的数据结构，如嵌套对象，且不需要特定的数据模式。**文档数据库即可以根据键（Key）构建索引，也可以基于文档内容构建索引，后者为其与键值数据库的主要差别。</p><p><img src="/2020/04/14/NoSQL/doc.png" alt="compare1"></p><h3 id="图数据库"><a href="#图数据库" class="headerlink" title="图数据库"></a>图数据库</h3><p>图数据库以图论为基础，一个图表示一个对象集合，包括顶点以及连接顶点的边。可以高效地存储不同顶点之间的关系。图数据库专门用于处理具有高度相互关联关系的数据，可以高效处理实体之间的关系，适合社交网络、模式识别、依赖分析等问题。</p><p><img src="/2020/04/14/NoSQL/map.png" alt="compare1"></p><h2 id="NoSQL三大基石"><a href="#NoSQL三大基石" class="headerlink" title="NoSQL三大基石"></a>NoSQL三大基石</h2><p>NoSQL三大基石包括CAP、BASE和最终一致性。</p><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p><strong>C(Consistency)</strong>:一致性，是指任何一个读操作总是能够读到之前完成的写操作的结果，也就是在分布式环境中，多点的数据是一致的，即<strong>所有节点在同一时间具有相同的数据。</strong></p><p><strong>A(Availability)</strong>:可用性，是指快速获取数据，可以在确定的时间内返回操作结果，<strong>保证每个请求不管成功或者失败都有响应**</strong>。</p><p><strong>P(Tolerance of Network Partition)</strong>:分区容错性，是指当出现网络分区的情况时(即系统中的一部分节点无法和其他节点进行通信)，分离的系统也能够正常运行，即<strong>系统中任意信息的丢失或失败不会影响系统的继续运作。</strong></p><p>但是一个分布式系统不可能同时满足以上三个需求，最多只能满足其中的两个。</p><p><img src="/2020/04/14/NoSQL/cap.png" alt="cap"></p><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p>BASE: Basically Availble, Soft-state, Eventual consistency。</p><p>Basically Availble：基本可用。指允许一个分布式系统的一部分发生问题变得不可用时，其余部分仍可以正常使用，即允许分区失败的情形出现。</p><p>Soft-state:软状态。指的是状态有一段时间不同步，允许一定的滞后性。</p><p>Eventual Consistency：最终一致性。分为强一致性和弱一致性。区别在于高并发数据访问的情况下，后续操作能否<strong>及时</strong>获得最新数据。最终一致性是弱一致性的一种特例，允许后续的访问操作可以暂时读不到更新后的数据，但一段时间后，必须读到更新后的数据。</p><blockquote><p>最常见的实现最终一致性的系统是DNS(域名系统)。一个域名更 新操作根据配置的形式被分发出去，并结合有过期机制的缓存;最终所有的客户端可以看到最新的值。</p></blockquote><h3 id="Eventual-consistency"><a href="#Eventual-consistency" class="headerlink" title="Eventual consistency"></a>Eventual consistency</h3><p>最终一致性，需要从两个角度来考虑。<strong>从服务端看</strong>，一致性指更新如何复制分布到整个系统，以保证数据的最终一致。<strong>从客户端来看</strong>，一致性主要指高并发的数据访问操作下，后续操作能否获得最新数据。「关系数据库通常实现强一致性，即一个更新完成，后续访问可立即读取更新后的数据。」弱一致而言，则无法保证。</p><p><strong>最终一致性要求很低，只要经过一段时间后能够访问到更新数据即可。</strong></p><p>最终一致性根据更新数据后各进程访问到数据的时间和方式的不同， 又可以区分为:</p><blockquote><p>因果一致性：如果进程A通知进程B它已更新了一个数据项，那么进程B 的后续访问将获得A写入的最新值。而与进程A无因果关系的进程C的访问， 仍然遵守一般的最终一致性规则 。</p><p>“读己之所写”一致性：可以视为因果一致性的一个特例。当进程A自 己执行一个更新操作之后，它自己总是可以访问到更新过的值，绝不会看 到旧值 。</p><p>单调读一致性：如果进程已经看到过数据对象的某个值，那么任何后续 访问都不会返回在那个值之前的值。</p><p>会话一致性：它把访问存储系统的进程放到会话(session)的上下文中， 只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败 情形令会话终止，就要建立新的会话，而且系统保证不会延续到新的会话 。</p><p>单调写一致性：系统保证来自同一个进程的写操作顺序执行。系统必须 保证这种程度的一致性，否则就非常难以编程了。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简单介绍了NoSQL数据库相关知识以及与传统数据库的对比。但并非可以偏袒或夸大某方，两者各有所长，为了满足市场的差异化需求而存在。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NoSQL&quot;&gt;&lt;a href=&quot;#NoSQL&quot; class=&quot;headerlink&quot; title=&quot;NoSQL&quot;&gt;&lt;/a&gt;NoSQL&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;NoSQL( Not only SQL ) 是非关系型数据库的统称，其数据模型采用类似键/值、列族、文档等非关系模型。因为没有固定的表结构，故不存在连接操作，也无ACID约束。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要特点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可扩展性：传统的关系型数据库由于其设计约束，很难实现“横向扩展”，只能通过升级硬件来实现“纵向拓展”。而NoSQL数据库的设计初衷就是为了满足“横向扩展”，因此具有很好的水平扩展能力。&lt;/p&gt;
&lt;p&gt;数据模型：关系模型是关系数据库的基石，以完备的关系代数理论为基础，保证了业务系统对数据一致性需求，但过多的束缚条件很难满足各新兴业务需求。而NoSQL摒弃各种束缚条件，采用新的模型，允许在一个数据元素中存储不同类型的数据。&lt;/p&gt;
&lt;p&gt;云计算：云计算具有很好的水平扩展能力，根据资源使用情况进行自由伸缩，各种动态资源可以动态加入或退出。NoSQL凭良好的横向扩展能力，很好融入云计算环境中，构建基于NoSQL的云数据库服务。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>HBase</title>
    <link href="http://yoursite.com/2020/03/24/03-Hbase/"/>
    <id>http://yoursite.com/2020/03/24/03-Hbase/</id>
    <published>2020-03-24T10:17:58.000Z</published>
    <updated>2020-04-14T14:49:05.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote><p>MacOS 10.15.3    /    Hadoop 3.2.1    /    Hbase  1.3.5</p></blockquote><p>使用shell命令安装Hbase</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew install Hbase</span></pre></td></tr></table></figure><p>默认安装的hbase1.3.5，安装目录如下：<code>/usr/local/Cellar/hbase/1.3.5</code>。</p><p>配置：Hbase有两个运行模式，分别为单机模式和分布式模式。分布式又分为伪分布式和完全分布式，下面配置伪分布式模式。其余配置请参考<a href="https://hbase.apache.org/book.html" target="_blank" rel="noopener">HBase文档</a>。</p><p><code>在确保Hbase停止的情况下进行如下配置。</code></p><ul><li>修改hbase-env.sh</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/<span class="built_in">local</span>/Cellar/hbase/1.3.5/libexec</span></pre></td></tr></table></figure><p>第一个配置使用Hbase自带的Zookeeper，而非单独加载外部的。</p><a id="more"></a><ul><li>修改hbase-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr></table></figure><p>修改<code>hbase.rootdir</code>地址可参见Hadoop配置文件<code>core-site.xml</code>下的<code>fs.default.name</code>值。</p><p>为了使用方便，我们可以在shell配置文件下使用以下命令。</p><p><code>export PATH=$PATH:/usr/local/Cellar/hbase/1.3.5/bin</code></p><p>运行Hbase：</p><p>类似HDFS，先运行hadoop伪分布，再运行Hbase。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">start-hbase.sh</span></pre></td></tr></table></figure><p>使用<code>jps</code>查看<code>HMaster</code>、<code>HQuorumPeer</code>和HRegionServer进程是否运行。</p><img src="/2020/03/24/03-Hbase/flow.png" alt="flow" style="zoom:50%;"><h2 id="HBase-1"><a href="#HBase-1" class="headerlink" title="HBase"></a>HBase</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>HBase是一种构建在HDFS之上的分布式、面向列的存储系统，是一个高可靠、高性能、面向列、可伸缩的分布式数据库，用于存储非结构化和半结构化的松散数据，在需要实时读写、随机访问超大数据集时具有极大优势。</p><h3 id="生态关系"><a href="#生态关系" class="headerlink" title="生态关系"></a>生态关系</h3><p>HBase在Hadoop生态中与其他部分的关系。</p><blockquote><p>HBase利用Hadoop MapReduce来处理HBase中的海量数据，实现<strong>高性能计算</strong>。</p><p>Zookeeper作为协同服务，实现<strong>稳定服务和失败恢复</strong>。</p><p>使用HDFS作为高可靠底层数据存储，<strong>利用廉价集群提供海量数据存储能力</strong>。</p><p>Sqoop为HBase提供高效、<strong>便捷的RDBMS（Relational Database Management System）数据导入功能</strong>。</p><p>Pig和Hive为HBase提供<strong>高层语言支持</strong>。</p></blockquote><p><img src="/2020/03/24/03-Hbase/Hbase-relenvent.png" alt="Hbase-relenvent"></p><h3 id="为什么需要HBase"><a href="#为什么需要HBase" class="headerlink" title="为什么需要HBase"></a>为什么需要HBase</h3><p>Hadoop主要解决大规模数据的离线批量处理，无法满足大规模数据实时处理应用的需求。HDFS面向批量访问模式，而非随机访问模式    ——&gt; HBase支持数据的随机访问模式，提供在线实时数据分析处理。</p><p>传统的关系型数据库无法应对在数据规模剧增时导致的系统扩展性和性能问题    ——&gt;     Hbase支持分布式存储，易于横向拓展，性能高，且支持动态调整。</p><p>HBase与传统数据库之间优劣分析</p><table><thead><tr><th>对比</th><th>HBase</th><th>传统关系数据库</th></tr></thead><tbody><tr><td>数据类型</td><td>把数据存储为未经解释的字符串，用户可以把不同格式的数据存入其中</td><td>关系模型具有丰富的数据类型和存储方式</td></tr><tr><td>数据操作</td><td>采用单表的主键查询，操作功能简单</td><td>操作丰富，表简通过主外键关联，操作较复杂</td></tr><tr><td>存储模式</td><td>列存储，不同列族文件分离存储，可以降低I/O开销，支持大量并发用户查询</td><td>基于行存储，被连续存在磁盘页中，需要顺序扫描每个元组，筛选出需要属性，会浪费磁盘空间和内存带宽</td></tr><tr><td>数据索引</td><td>只有行键作为索引</td><td>针对不同列构建复杂的索引，提高数据访问性能</td></tr><tr><td>数据维护</td><td>执行更新操作时，并不会删除数据旧的版本，而是生成新的版本</td><td>更新操作使用新的值去覆盖旧的值</td></tr><tr><td>可伸缩性</td><td>可以轻易通过在集群中增加或减少硬件数量实现伸缩</td><td>很难实现<strong>横向扩展</strong></td></tr></tbody></table><p>局限：Hbase不支持事务，无法实现跨行原子性。</p><h3 id="数据模型概述"><a href="#数据模型概述" class="headerlink" title="数据模型概述"></a>数据模型概述</h3><p>HBase是一个稀疏、多维度、排序的映射表，索引是行键、列族、列限定符和时间戳。每个值是未经解释的字符串，没有数据类型。<strong>每一行都有一个可排序的行键和任意多的列。</strong></p><p><strong>数据模型相关概念</strong></p><p><img src="/2020/03/24/03-Hbase/table.png" alt="table"></p><p>Hbase可以对允许保留的版本数量进行设置。</p><table><thead><tr><th></th><th>概念</th></tr></thead><tbody><tr><td>表</td><td>采用表组织数据，表由行和列族组成，列族划分若干个列限定符</td></tr><tr><td>行</td><td>每个HBase由若干行组成，每个行由行键（row key）标示</td></tr><tr><td>列族</td><td>一个HBase表被分组为许多“列族”(Column Family)的集合，它是基本的访问控制单元</td></tr><tr><td>列限定符</td><td>列族里的数据通过列限定符定位</td></tr><tr><td>单元格</td><td>在HBase表中，通过行键、列族和列限定符确定一个“单元格”（cell），单元格中存书的数据没有数据类型，视为字节数据byte[]</td></tr><tr><td>时间戳</td><td>每个单元格都保存着同一份数据的多个版本，采用时间戳进行索引</td></tr><tr><td>稀疏表</td><td>很多单元没有值</td></tr></tbody></table><blockquote><p>HBase按单元格插数据，或按照单元格删除数据</p></blockquote><h2 id="HBase原理与系统架构"><a href="#HBase原理与系统架构" class="headerlink" title="HBase原理与系统架构"></a>HBase原理与系统架构</h2><h3 id="HBase各组件"><a href="#HBase各组件" class="headerlink" title="HBase各组件"></a>HBase各组件</h3><p><img src="/2020/03/24/03-Hbase/Hbasestructure.png" alt="Hbase structure"></p><p>HBase系统架构如上图，包含客户端、Zookeeper服务器、Master服务器、Region服务器。</p><p><strong>客户端</strong></p><p>包含HBase接口，在缓存中维护已经访问过的Region位置信息以加快后续数据访问。使用RPC机制与Master和Region服务器进行通信。<strong>对于管理类操作，客户端与Master进行RPC；对于数据读写，客户端与Region服务器进行RPC。</strong></p><p><strong>Zookeeper</strong></p><p>维护集群中机器的服务状态：每一个Region服务器都需要到Zookeeper中进行注册，<strong>Zookeeper实时监控每个Region服务器的状态并通知给Master</strong>，Master就可以通过Zookeeper感知到各个region服务器的工作状态。</p><p>选出“总管”：HBase可以启动多个Master，Zookeeper可以选出一个Master作为集群总管，并保证在任何时刻总有唯一一个Master在运行，避免Master<strong>单点失效</strong>。</p><p>保存了HBase：mata的位置。</p><p><strong>HMaster</strong></p><p>对用户表的增删改查操作</p><p>在Region分裂或合并后，负责重新调整Region的分布</p><p>Master会实时监测集群中的Region服务器，把特定的Region分配到可用Region服务器中，<strong>确保整个集群内部不同Region服务器之间负载均衡</strong></p><p>对故障失效的Region服务器上的Region进行迁移</p><blockquote><p>客户端一般访问HBase上的数据不需要Master参与，客户端可以通过访问Zookeeper获取ROOT表地址，并最终到达相应Region服务器。</p><p>对于未被分配的Region：Master给这个Region服务器发送一个请求，把该Region分配给它，Region服务器接受请求并加载数据后变提供服务。</p></blockquote><p><strong>HRegion服务器</strong><br>Region是HBase最核心的模块。负责维护分配给自己的Region丙响应读写请求。</p><p>HBase自身不具备<strong>数据复制和维护数据副本的功能</strong>，而HDFS可以为HBase提供支持。「也可以使用其他任何支持Hadoop接口文件系统作为底层存储）</p><p>管理一系列HRegion对象，每个HRegion对象对应table中的一个Region，Region中每个Store对应一个列族。</p><p>管理一个HLog对象，存储数据日志，当HRegion发生故障时，利用HLog进行故障恢复。</p><p>一台机器上只运行一个RegionServer。</p><h3 id="Region服务器工作原理"><a href="#Region服务器工作原理" class="headerlink" title="Region服务器工作原理"></a>Region服务器工作原理</h3><p><img src="/2020/03/24/03-Hbase/HBaseData.png" alt="HBase Data"></p><p>上图描述了Region服务器向HDFS文件系统读写数据的基本原理。</p><p>Region服务器内部管理了一系列Region对象和一个HLog文件，每个Region对象由多个Store组成，每个Store对应表中一个列族。同时每个Store包含一个MemStore和多个StoreFile。</p><blockquote><p>HLog：磁盘上的记录文件，记录所有更新操作。</p><p>MemStore时内存中的缓存，保存最近更新的数据。</p><p>StoreFile：磁盘中的文件，文件是B树结构，方便快速读取。</p><p>HFile：是StoreFile的底层实现方式，HFile数据快通常采用压缩方式存储，压缩之后大大减少网络I/O和磁盘I/O。</p></blockquote><p><strong>用户读写数据的过程</strong></p><p>用户读写数据时，会被翻配到对应的Region服务器去执行操作。用户数据首先写入<strong>MemStore</strong>与<strong>HLog</strong>中，当操作写入HLog后，commit( )调用将其返回客户端。</p><p>当用户读取数据时，Region服务器先访问<strong>MemStore</strong>缓存，如果数据不在缓存中，然后到<strong>StoreFile</strong>中读取。</p><p><strong>缓存的刷新</strong></p><p>MemStore缓存容量有限，系统周期性调用Region.flushcache( )把MemStore缓存里面的内容写到磁盘的StoreFile文件中，清空缓存，并在HLog文件中写入一个标记，表示缓存中内容已经被写入StoreFile文件中。每次缓存刷新操作都会在磁盘上生成新的StoreFile。</p><p><strong>StoreFile的合并</strong></p><p>每次MemStore缓存的刷新操作都会在磁盘上生成一个新的StoreFile，在用户访问Store中某个值时非常耗费时间，因此系统会调用Store.compact( )把多个StoreFile文件合并成一个大文件。次操作耗费资源，会在StoreFile文件数量到一个阈值时出发该操作。「阈值参数：hbase.hstore.compaction.min 默认3，hbase.hstore.compaction.max 默认10」</p><p><strong>StoreFile分割</strong></p><p>单个StoreFile大小超过阈值后「hbase.hregion.max.filesize」，触发Split操作，当前Region Split成两个Region。原Region下线，2个新生成的Region被HMaster分配到对应的HRegionServer上。</p><p>以下两张图解释的很详细</p><p><img src="/2020/03/24/03-Hbase/HRegion.png" alt="HRegion"></p><p><img src="/2020/03/24/03-Hbase/Store.png" alt="Store"></p><blockquote><p>注意：合并操作是由文件数量触发的，分裂操作由单个文件大小触发。</p></blockquote><h3 id="表和Region"><a href="#表和Region" class="headerlink" title="表和Region"></a>表和Region</h3><blockquote><p>Region服务器是HBase最核心的模块。</p></blockquote><p>开始只有一个Region， 后来不断分裂。</p><p>Region拆分操作非常快，拆分后Region读取的仍是原存储文件，直到“分裂”过程把存储文件异步写到独立的文件之后，才会读取新文件</p><p>需要根据行键的值对表中的行进行分区，每个行区间构成一个分区，称为“Region”</p><p>每个Region最佳大小取决于单台服务器的有效处理能力，建议1GB-2GB</p><p>同一Region不会被分拆到多个Region服务器，每个Region服务器存储10-1000个Region「每个Region服务器负责管理一个Region集合」</p><blockquote><p>每个Region都有一个RegionID来标识其唯一性，一个Region标识符“表名 + 开始主键 + RegionID”‘</p><p>元数据表(.META表)：这个映射表包含关于Region的元数据，为了加快访问速度，数据存放在Region位置</p><p>-ROOT-表：当HBase中Region非常庞大的时候，一个服务器保存不了.MATA.表的条目，就需要存储到不同服务器上，此时.MATA.分裂成多个Region，于是构建了一个新的映射表即：“-ROOT-表”</p></blockquote><p><img src="/2020/03/24/03-Hbase/HbaseLayer.png" alt="HbaseLayer"></p><h4 id="Region定位"><a href="#Region定位" class="headerlink" title="Region定位"></a>Region定位</h4><p>客户端查找zookeeper的meta-region-server节点查询HBase：meta表在哪台HRegionServer上</p><p>客户端连接含有HBase:meta表的HRegionServer该表存储了所有Region的行键范围信息,可以查询出需要存取的行键属于那个Region，以及这个Region属于那个HRegionServer</p><p>此后，客户端就可以直接连接拥有存取行键Region的HRegionServer，并对其操作</p><p>客户端吧meta信息缓存起来，下次进行相同操作就不用加载HBase:meta操作了</p><p><img src="/2020/03/24/03-Hbase/RegionLocation.png" alt="Region Location"></p><h3 id="HLog工作原理"><a href="#HLog工作原理" class="headerlink" title="HLog工作原理"></a>HLog工作原理</h3><p><strong>HLog实际是为了保证系统容错性而存在的。</strong></p><p>HLog文件格式：</p><p><img src="/2020/03/24/03-Hbase/HLog.png" alt="HLog"></p><blockquote><p>Key： HLogKey对象，记录了写入数据的归属信息，包括table、sequence number、timestamp等</p><p>Value：HBase的KeyValue对象，对应HFile中的KeyValue</p></blockquote><p>HBase为每个Region配置了一个HLog文件，是一种<strong>预写式日志(Write Ahead Log)</strong>，换句话说，用户更新数据必须首先写入日志才能写MemStore缓存，直到MemStore缓存内容对应内容被写入磁盘之后，该缓存内容才会被刷新写入磁盘。</p><p>Region服务器启动时检查HLog文件，发现更新，则先写入MemStore再刷写到StoreFile。</p><p>HLog定期回滚，删除被写入文件中的更新。</p><h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h4><ol><li><p>Zookeeper实时监测Region服务器状态，当某个Region服务器发生故障，Zookeeper通知Master。</p></li><li><p>Master处理故障Region服务器上遗留的HLog文件。根据每条日志记录所属的<strong>Region对象</strong>对HLog数据进行拆分，分别放到对应Region对象目录下，然后再将失效的Region重新分配到可用的Region服务器中,同时把该Region对象相关的HLog日志记录也发送给相应的Region服务器。</p></li><li><p>Region服务领取到分配给自己的Region对象以及相关的HLog日志后，把日志记录中的数据写入到MemStore缓存中，刷新到磁盘的StroeFile文件中，完成数据恢复。</p></li></ol><blockquote><p>需要强调的是：HBase中，每个Region服务器只需要维护一个HLog文件，所有<strong>Region对象</strong>共用一个HLog。多个Region对象的更新操作导致的日志修改，只需要对HLog进行文件追加即可。缺点在于，当一个Region服务器故障时，需要将HLog按照所属的Region对象进行拆分并分发。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>主要介绍HBase数据库相关内容。HBase数据库是BigTable的开源实现，和BigTable一样，支持大规模海量数据，分布式并发数据处理效率很高，易于扩展且支持动态伸缩。</p><p>HBase实际是一个稀疏、多维、持久化存储的映射表，采用行键、列键和时间戳进行索引，每个值都是未经解释的字符串。</p><p>HBase采用分区存储，一个大的表会被拆分为多个Region，这些Region会被分发到不同的服务器上实现分布式存储。</p><p>HBase的系统架构包括客户端、Zookeeper服务器、Master、Region服务器。客户端包含访问HBase的接口；Zookeeper服务器负责稳定、可靠的协同服务；Master主要负责表和Region的管理工作；Region服务器负责维护分配给自己的Region，并响应用户的读写请求。</p><p>对于HBase实现与编程受限于文章长度并未涉及。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HBase&quot;&gt;&lt;a href=&quot;#HBase&quot; class=&quot;headerlink&quot; title=&quot;HBase&quot;&gt;&lt;/a&gt;HBase&lt;/h1&gt;&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MacOS 10.15.3    /    Hadoop 3.2.1    /    Hbase  1.3.5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用shell命令安装Hbase&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install Hbase&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;默认安装的hbase1.3.5，安装目录如下：&lt;code&gt;/usr/local/Cellar/hbase/1.3.5&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;配置：Hbase有两个运行模式，分别为单机模式和分布式模式。分布式又分为伪分布式和完全分布式，下面配置伪分布式模式。其余配置请参考&lt;a href=&quot;https://hbase.apache.org/book.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HBase文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;在确保Hbase停止的情况下进行如下配置。&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改hbase-env.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; HBASE_MANAGES_ZK=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; HBASE_HOME=/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/Cellar/hbase/1.3.5/libexec&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第一个配置使用Hbase自带的Zookeeper，而非单独加载外部的。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>02-分布式文件系统HDFS</title>
    <link href="http://yoursite.com/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/"/>
    <id>http://yoursite.com/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/</id>
    <published>2020-03-20T12:57:26.000Z</published>
    <updated>2020-03-26T14:54:57.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式文件系统HDFS"><a href="#分布式文件系统HDFS" class="headerlink" title="分布式文件系统HDFS"></a>分布式文件系统HDFS</h1><h2 id="1-HDFS概述："><a href="#1-HDFS概述：" class="headerlink" title="1. HDFS概述："></a>1. HDFS概述：</h2><p>HDFS（Hadoop Distributed File Syetem），Hadoop框架的核心组件之一。<strong>HDFS是为以流式数据访问模式存储超大文件而设计的文件系统。</strong>主要解决数据分布式存储问题。</p><p>HDFS是个高度容错性的系统，适合部署在廉价的机器上，能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。</p><h3 id="1-1-设计目标"><a href="#1-1-设计目标" class="headerlink" title="1.1 设计目标"></a>1.1 设计目标</h3><p>设计目标即设计初衷，理解其为何诞生对我们掌握并使用它具有很大帮助。</p><p><strong>流式数据访问</strong>：“一次写入，多次读取”，HDFS建立在这个思想之上，简化了数据一致性问题。HDFS设计中考虑了数据批处理，而不是用户交互处理。HDFS为了达到高数据吞吐量从而牺牲了数据访问的延时。</p><p><strong>硬件故障</strong>：由于Hadoop适合部署在廉价硬件集群上，而非昂贵且高可靠的硬件上，不可避免会产生硬件错误，HDFS面对硬件故障时，其快速检错与自动恢复时是HDFS架构最核心的目标。</p><h3 id="1-2-HDFS设计优劣"><a href="#1-2-HDFS设计优劣" class="headerlink" title="1.2 HDFS设计优劣"></a>1.2 HDFS设计优劣</h3><p>优点：高容错性、适合大量数据批处理、模型简单、成本低…</p><p>缺点：流式数据读取拥有很高的数据吞吐率，但导致了很高的延时，不适合低延时数据访问；不适合大量小文件存储，过多小文件会严重影响系统性能；不支持多用户并发写入及修改文件。</p><a id="more"></a><h2 id="2-HDFS架构"><a href="#2-HDFS架构" class="headerlink" title="2. HDFS架构"></a>2. HDFS架构</h2><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS.gif" alt="分布式文件系统HDFS"></p><h3 id="2-1-数据存储与组织"><a href="#2-1-数据存储与组织" class="headerlink" title="2.1 数据存储与组织"></a>2.1 数据存储与组织</h3><p>HDFS采用块作为存储单位，默认为128MB，是HDFS读写数据数据的最小单位。注意：<strong>HDFS中小于一个块大小的文件不会占据整个块的空间。</strong></p><p><strong>为什么分布式文件系统中采用抽象块来存储数据？</strong></p><ol><li><p>抽象的扩大了单个文件所能存储的最大值。假设要存储一个20G的文件，可以采用分布式文件系统存储在10个2G的磁盘上，而使用文件系统，即使你有10个2G的磁盘，你能存储的<strong>最大单个文件大小</strong>为2G。</p></li><li><p>简化存储子系统。存储子系统控制的是块，<strong>简化了存储管理</strong>。「可以很容易的计算出一个磁盘分为了多少块」，同时也消除了对元数据（MetaData）的顾虑，「块仅仅作为一部分存储数据，而文件的元数据，不需要与块一同存储，<u>其他系统就可以正交地管理元数据</u>」</p></li><li><p>应对损坏的块或机器的故障，每个块会在其他分散机器复制副本，<strong>提高容错性和实用性</strong>。块很适合做这样的复制操作。</p></li></ol><p><strong>为什么HDFS中一个块这么大？</strong></p><p>影响文件系统存储文件的事件有两个因素，一是寻址时间，二是数据传输时间。</p><p>寻址时间主要取决于数据块的数量，而数据块越大，相对而言寻址事件就越小。</p><p>数据传输时间取决于数据大小及磁盘读写速率。</p><p><strong>T(存储时间) = T(寻址时间)  + T(传输时间)</strong></p><p>如果数据传输时间远远大于数据的寻址时间，那么公式可以简化为<strong>T(存储时间) ≈ T(传输时间)</strong>，而HDFS要的就是这个效果。</p><h3 id="2-2-Namenode-和-Datanode"><a href="#2-2-Namenode-和-Datanode" class="headerlink" title="2.2 Namenode 和 Datanode"></a>2.2 Namenode 和 Datanode</h3><p><strong>Namenode</strong>管理文件系统的命名空间（namespace）以及客户端对文件的访问「比如打开、关闭、重命名等」。将信息通过fsimag（命名空间镜像）和edits（编辑日志）的形式永久保存在<strong>本地磁盘</strong>中，Namenode会记录每个文件的每个块所在的数据节点，但不会永久保存，因为信息会在系统启动时由数据节点重建。</p><blockquote><p>Namespace：支持传统层次型文件组织结构，用户可以创建、删除、移动文件等，但HDFS不支持用户磁盘配额和访问权限控制。</p><p>Fsimage文件：用于维护文件系统树以及文件树中所有的文 件和文件夹的元数据信息</p><p>Edits文件记录所有针对目录、文件的创建、删除、重命 名等的操作日志。</p></blockquote><p>Namenode工作机制：</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/Namenodeworkflow.png" alt="Namenodeworkflow"></p><p><strong>Datanode</strong>负责它所在的节点上的存储，处理客户端的读写请求，在Namenode的统一调度下进行数据块的创建和、删除和复制。</p><p>如果没有Namenode，那么文件系统将无法使用，因为我们无法知道如何通过数据节点上的块来重建文件，故Namenode是HDFS集群中的单点故障(Single point of failure)所在。对于名称节点的保护机制时非常重要的。Hadoop提供了两种方法。</p><ol><li><p>复制那些组成文件系统元数据持久状态的文件。Hadoop可以通过配置使Namenode在多个文件系统上写入其持久化状态。「一般在配置选择：在本地磁盘写入同时，写入一个远程NFS挂载」 <code>Network File System (NFS) is a distributed file system protocol that allows you to share remote directories over a network</code></p></li><li><p>运行Secondary Namenode，主要作用是为了防止Edits日志过大导致的问题，主要通过定期合并Edits和fsimage来减少Edits的数据大小。一般在其他单独的计算机上运行，因为需要占用大量CPU和内存。Secondary Namenode还可以作为Namenode 的冷备份，它会保存合并后的fsimage的副本，在名称节点失效后使用。但因为Secondary Namenode相较Namenode是滞后的，损失难以避免。</p><p>Secondarynode执行过程：</p></li></ol><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/SecondaryNodeworkflow.png" alt="SecondaryNode workflow"></p><h3 id="2-3-HDFS-高可用架构（-HDFS-High-Avaiability）"><a href="#2-3-HDFS-高可用架构（-HDFS-High-Avaiability）" class="headerlink" title="2.3 HDFS 高可用架构（ HDFS High Avaiability）"></a>2.3 HDFS 高可用架构（ HDFS High Avaiability）</h3><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html" target="_blank" rel="noopener">HDFS High Availability Using the Quorum Journal Manager</a></p><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithNFS.html" target="_blank" rel="noopener">HDFS High Availability With NFS</a></p><p>[后续补充]</p><h3 id="2-4-HDFS-Federation"><a href="#2-4-HDFS-Federation" class="headerlink" title="2.4 HDFS Federation"></a>2.4 HDFS Federation</h3><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/Federation.html" target="_blank" rel="noopener">HDFS Federation</a></p><p>[后续补充]</p><h2 id="3-HDFS存储"><a href="#3-HDFS存储" class="headerlink" title="3. HDFS存储"></a>3. HDFS存储</h2><h3 id="3-1-数据冗余（Data-redundancy）存储"><a href="#3-1-数据冗余（Data-redundancy）存储" class="headerlink" title="3.1 数据冗余（Data redundancy）存储"></a>3.1 数据冗余（Data redundancy）存储</h3><p>为了保证系统的容错性和可用性，HDFS采用多副本方式对数据进行冗余存储，即一个数据块的内容会放到不同的数据节点上。</p><blockquote><p>当多个客户访问统一文件时，可以从不同副本中读取数据，加快了数据传输速度。</p><p>HDFS节点之间通过网络传输数据，多副本可以很<strong>容易判断数据是否出错。</strong></p><p>保证了数据的可靠，避免了单点故障。</p></blockquote><h3 id="3-2-数据存储策略"><a href="#3-2-数据存储策略" class="headerlink" title="3.2 数据存储策略"></a>3.2 数据存储策略</h3><blockquote><p>简单介绍一下HDFS数据读写的相关类。</p><p>FileSystem时一个通用文件系统的抽象基类，可被分布式文件系统继承。</p><p>DistributedFileSystem是FileSystem在HDFS文件系统中的实现，是Hadoop为FileSystem这个抽象类提供的具体实现之一。</p><p>FileSystem的open( )方法返回一个输入流FSDataInputStream对象，create（）方法返回一个输出流FSDataOutputStream对象。「即HDFS文件系统中的具体输入输出流」</p><p>Hadoop文件API的起点是FileSysem类，可以通过调用FileSystem.get(Configuration conf)来得到所需的FileSystem实例。</p><p>Configuration类的默认实例化方法是以HDFS系统的资源配置为基础。</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/HadoopFilesystem.png" alt="Hadoop Filesystem"></p></blockquote><h4 id="3-2-1-数据存放"><a href="#3-2-1-数据存放" class="headerlink" title="3.2.1 数据存放"></a>3.2.1 数据存放</h4><p>HDFS默认每个数据节点都是在不同的机架上，会带来一个问题：<strong>写入数据时不能充分利用同一机架内部机器之间的带宽</strong>。但更容易实现系统内部的负载均衡和错误处理。</p><p>HDFS默认冗余复制因子为3，每一个文件块被同时保存到三个地方，两个副本放在同一机架不同机器上，第三个副本放在不同机架的机器上面。可以保证机架发生异常时的数据恢复，也可以提高读写性能。</p><p><code>hdfs-site.xml</code>配置文件<code>dfs.replication</code>用于修改冗余复制因子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/hdfs/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/hdfs/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="3-2-2-数据读取"><a href="#3-2-2-数据读取" class="headerlink" title="3.2.2 数据读取"></a>3.2.2 数据读取</h4><p>HDFS提供了一个API可以确定一个数据节点所属的机架ID，客户端也可以调用API获取自己所属的机架ID。</p><p>利用Java API读数据过程：</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/JavaApiRead.png" alt="Java Api Read"></p><h4 id="3-2-3-数据写入与复制"><a href="#3-2-3-数据写入与复制" class="headerlink" title="3.2.3 数据写入与复制"></a>3.2.3 数据写入与复制</h4><p>HDFS采用流水线复制的策略。</p><p>当客户端要向HDFS写入文件时，这个文件首先根据块大小划分成若干块并写入本地，每个块都向HDFS集群中的Namenode发起写请求，Namenode返回一个最佳数据节点返回客户端，客户端把数据写入第一个数据节点，同时把列表传给第一个数据节点，第一个数据节点将数据写入本地，同时向第二个数据节点发送数据和列表，以此类推。</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/HDFSDataWrite.png" alt="HDFS DataWriteIn"></p><p>使用Java API写数据：</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/JavaApiWrite.png" alt="Java Api Write"></p><h3 id="3-3-数据错误与恢复"><a href="#3-3-数据错误与恢复" class="headerlink" title="3.3 数据错误与恢复"></a>3.3 数据错误与恢复</h3><h4 id="3-3-1-Namenode出错"><a href="#3-3-1-Namenode出错" class="headerlink" title="3.3.1 Namenode出错"></a>3.3.1 Namenode出错</h4><p>Namenode保存了所有元数据信息，若文件损坏，整个系统宕机。HDFS的两种补救措施在2.2.2 Namenode 和 Datanode 中已提到。</p><h4 id="3-3-2-Datanode出错"><a href="#3-3-2-Datanode出错" class="headerlink" title="3.3.2 Datanode出错"></a>3.3.2 Datanode出错</h4><p>每个Datanode会定期向Namenode发送“心跳”，向Namenode报告“我还活着”。一旦Namenode没有接收到定期的心跳信息，默认该Datanode宕机，不会对其进行任何读写等操作。同时Namenode会定期检查Datanode数据块副本数量，若小于冗余因子，则启动数据的冗余复制。</p><h4 id="3-3-3-数据错误"><a href="#3-3-3-数据错误" class="headerlink" title="3.3.3 数据错误"></a>3.3.3 数据错误</h4><p>数据错误主要集中在网络传输和磁盘错误。客户端采用md5和sha1对数据块进行校验，确保读取到正确的数据。</p><blockquote><p>文件被创建时，客户端会对每一个文件进行信息摘录，把信息写入同一个路径的隐藏文件中。当客户端读取文件时，先读取该信息文件，利用信息文件对每个信息读取的数据块进行校验，校验出错，客户端请求到另一个数据节点读取文件块，并向Namenode报告错误。</p></blockquote><h2 id="4-HDFS-实践"><a href="#4-HDFS-实践" class="headerlink" title="4. HDFS 实践"></a>4. HDFS 实践</h2><p>HDFS交互的方式有很多种，但相对而言使用命令行是最简单的，如果在一台机器上运行HDFS，需要将Hadoop配置为为分布模式。</p><p>在使用HDFS的过程中，注意集群的<code>/</code>目录与<code>.</code>目录的区别。</p><h4 id="4-1-Shell-命令"><a href="#4-1-Shell-命令" class="headerlink" title="4.1 Shell 命令"></a>4.1 Shell 命令</h4><p>HDFS Shell具体使用命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Usage: hadoop fs [generic options]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[-cat [-ignoreCrc] &lt;src&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">[-checksum &lt;src&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">[-chgrp [-R] GROUP PATH...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">[-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">[-chown [-R] [OWNER][:[GROUP]] PATH...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">[-copyFromLocal [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] &lt;localsrc&gt; ... &lt;dst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">[-copyToLocal [-f] [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">[-count [-q] [-h] [-v] [-t [&lt;storage type&gt;]] [-u] [-x] [-e] &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">[-cp [-f] [-p | -p[topax]] [-d] &lt;src&gt; ... &lt;dst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">[-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">[-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">[-df [-h] [&lt;path&gt; ...]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">[-du [-s] [-h] [-v] [-x] &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">[-expunge [-immediate]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">[-find &lt;path&gt; ... &lt;expression&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">[-get [-f] [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">[-getfacl [-R] &lt;path&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">[-getfattr [-R] &#123;-n name | -d&#125; [-e en] &lt;path&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">[-getmerge [-nl] [-skip-empty-file] &lt;src&gt; &lt;localdst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">[-head &lt;file&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">[-help [cmd ...]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">[-ls [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [-e] [&lt;path&gt; ...]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">[-mkdir [-p] &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">[-moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">[-moveToLocal &lt;src&gt; &lt;localdst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">[-mv &lt;src&gt; ... &lt;dst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">[-put [-f] [-p] [-l] [-d] &lt;localsrc&gt; ... &lt;dst&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">[-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">[-rm [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">[-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">[-setfacl [-R] [&#123;-b|-k&#125; &#123;-m|-x &lt;acl_spec&gt;&#125; &lt;path&gt;]|[--set &lt;acl_spec&gt; &lt;path&gt;]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">[-setfattr &#123;-n name [-v value] | -x name&#125; &lt;path&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">[-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">[-stat [format] &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">[-tail [-f] [-s &lt;sleep interval&gt;] &lt;file&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">[-test -[defswrz] &lt;path&gt;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">[-text [-ignoreCrc] &lt;src&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">[-touch [-a] [-m] [-t TIMESTAMP ] [-c] &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">[-touchz &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">[-truncate [-w] &lt;length&gt; &lt;path&gt; ...]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">[-usage [cmd ...]]</span></pre></td></tr></table></figure><p>多数操作与Linux类似，不做赘述。具体实践可参考下面文章：<a href="https://juejin.im/entry/58a57f12128fe1006cafc8d9" target="_blank" rel="noopener">HDFS实践</a>  [注：该文章有几个错误]</p><p>需要注意几点：</p><ol><li><p>HDFS主张“一次写入，多次读取”，一般来说，写入的内容最好不要后期修改内容，要不删除，要不重新上传。极端情况下可以使用<code>appendToFile</code>这一命令对文件进行追加，但一般建议先把文件下到本地再进行追加操作。</p></li><li><p>熟悉Shell命令的朋友在命令比价复杂情况下可以使用Shell的条件判断等语句来执行。</p></li></ol><h4 id="4-2-如何在Mac使用Eclipse进行HDFS编写："><a href="#4-2-如何在Mac使用Eclipse进行HDFS编写：" class="headerlink" title="4.2 如何在Mac使用Eclipse进行HDFS编写："></a>4.2 如何在Mac使用Eclipse进行HDFS编写：</h4><p>参考这边文章吧，这边懒得写了。<a href="https://blog.csdn.net/G290095142/article/details/78231337" target="_blank" rel="noopener">Mac Eclipse HDFS配置</a></p><p>以下步骤为Hadoop单机伪分布环境下Eclipse HDFS 配置。</p><h5 id="4-2-1-下载Hadoop-Eclipse插件"><a href="#4-2-1-下载Hadoop-Eclipse插件" class="headerlink" title="4.2.1 下载Hadoop Eclipse插件"></a>4.2.1 下载Hadoop Eclipse插件</h5><p><a href="https://people.apache.org/~srimanth/hadoop-eclipse/" target="_blank" rel="noopener">官网地址</a>，需要Eclipse版本3.6以上。</p><p>将插件放到Eclipse Plugins下，然后重启Eclipse，在Preferences下按如下配置，Hadoop安装目录根据自己情况配置。</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/HDFSEclipseConfig1.png" alt="HDFS Eclipse Config1"></p><h5 id="4-2-2-创建Hadoop-HDFS程序"><a href="#4-2-2-创建Hadoop-HDFS程序" class="headerlink" title="4.2.2 创建Hadoop HDFS程序"></a>4.2.2 创建Hadoop HDFS程序</h5><p>New一个Map/Reduce Project</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/Eclipse.png" alt="Eclipse"></p><p>项目创建完毕后，重点是配置Hadoop Location。</p><p>在<code>Windows -&gt; show view -&gt; Other -&gt; MapReduce Location</code>下配置：</p><p>其中</p><p><strong>Map/Reduce Master</strong>下：</p><p>Host：就是jobtracker 所在的集群机器，这里写localhost</p><p>Port：就是jobtracker 的port，这里写的是9001</p><p><strong>这两个参数就是mapred-site.xml里面mapred.job.tracker里面的ip和port</strong> </p><p>*<em>DFS Master *</em>下：</p><p>Host：就是namenode所在的集群机器，这里写localhost</p><p>Port：就是namenode的port，这里写9000</p><p><strong>这两个参数就是core-site.xml里面fs.default.name里面的ip和port</strong>，根据自己情况修改。</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/Config.png" alt="Config"></p><p>修改完成，就可以去搞了，项目运行时选择<code>Run On Hadoop</code>运行即可。</p><p>举个例子吧：</p><p>编程实现一个类“MyFSDataInputStream”，该类继承“org.apache.hadoop.fs.FSDataInputStream”，要求如下：实现按行读取HDFS中指定文件的方法“readLine()”，如果读到文件末尾，则返回空，否则返回文件一行的文本。</p><p>准备：</p><p>使用JavaApi在superming目录下写入test文件，文件内容为“Hello World”，代码截图如下：</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/FileWrite.png" alt="FileWrite"></p><p>在Hadoop下运行代码将文件写入。</p><p>执行：</p><p>使用JavaApi读取刚创建的test文件，代码截图如下：</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/MyFDSDATAInputStream.png" alt="MyFDSDATAInputStream"></p><p>在Hadoop下执行如下：</p><p><img src="/2020/03/20/02-%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FHDFS/Result.png" alt="Result"></p><p>显示HDFS中指定文件的读写权限、大小、创建时间、路径等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.hadoop.examples;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 显示HDFS中指定文件的读写权限，大小，创建时间，路径等信息 </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fileList</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(Configuration conf, String remoteFilePath)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(FileSystem fs = FileSystem.get(conf))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">Path remotePath = <span class="keyword">new</span> Path(remoteFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">FileStatus[] fileStatus = fs.listStatus(remotePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(FileStatus s : fileStatus) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Path: "</span> + s.getPath().toString());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Access: "</span> + s.getPermission().toString());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Size: "</span> + s.getLen());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> timeStamp = s.getModificationTime();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">String date = format.format(timeStamp);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"时间："</span> + date);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">fs.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">conf.set(<span class="string">"fs.default"</span>, <span class="string">"hdfs://localhost:8888"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">conf.set(<span class="string">"fs.hdfs.impl"</span>,<span class="string">"org.apache.hadoop.hdfs.DistributedFileSystem"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">String remoteFilePath = <span class="string">"/user/superming/hello.txt"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"File Information:"</span> + remoteFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">fileList.list(conf, remoteFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"\n Read Done"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>判断本地路径是否已存在，如果存在则自动更名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.hadoop.examples;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">copyToLocal</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copytolocal</span><span class="params">(Configuration conf, String remoteFilePath, String localFilePath)</span> <span class="keyword">throws</span> IOException</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//FileSystem fs = FileSystem.get(conf);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Path remotePath = <span class="keyword">new</span> Path(remoteFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(localFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//若文件存在，则自动重命名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(FileSystem fs = FileSystem.get(conf))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(f.exists()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">System.out.println(localFilePath + <span class="string">"已存在"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">new</span> File(localFilePath + <span class="string">"-"</span> + i.toString());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决更改后依旧存在的问题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!f.exists()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">localFilePath = localFilePath + <span class="string">"-"</span> + i.toString();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"文件修改为："</span> + localFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载文件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">Path localPath = <span class="keyword">new</span> Path(localFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">fs.copyToLocalFile(remotePath, localPath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">fs.close();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;<span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">conf.set(<span class="string">"fs.default"</span>, <span class="string">"hdfs://localhost:8888"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">String localFilePath = <span class="string">"/usr/local/Cellar/hadoop/hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">String remoteFilePath = <span class="string">"/user/superming/hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">copyToLocal.copytolocal(conf, remoteFilePath, localFilePath);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Download Complete !"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hadoop.apache.org/docs/r1.0.4/cn/hdfs_design.html" target="_blank" rel="noopener">Hadoop分布式文件系统：架构和设计</a> </p><p><a href="https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/FileSystemShell.html" target="_blank" rel="noopener">HDFS command 官方文档</a></p><p><a href="http://hadoop.apache.org/docs/stable/api/" target="_blank" rel="noopener">Hadoop Api</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分布式文件系统HDFS&quot;&gt;&lt;a href=&quot;#分布式文件系统HDFS&quot; class=&quot;headerlink&quot; title=&quot;分布式文件系统HDFS&quot;&gt;&lt;/a&gt;分布式文件系统HDFS&lt;/h1&gt;&lt;h2 id=&quot;1-HDFS概述：&quot;&gt;&lt;a href=&quot;#1-HDFS概述：&quot; class=&quot;headerlink&quot; title=&quot;1. HDFS概述：&quot;&gt;&lt;/a&gt;1. HDFS概述：&lt;/h2&gt;&lt;p&gt;HDFS（Hadoop Distributed File Syetem），Hadoop框架的核心组件之一。&lt;strong&gt;HDFS是为以流式数据访问模式存储超大文件而设计的文件系统。&lt;/strong&gt;主要解决数据分布式存储问题。&lt;/p&gt;
&lt;p&gt;HDFS是个高度容错性的系统，适合部署在廉价的机器上，能提供高吞吐量的数据访问，非常适合大规模数据集上的应用。&lt;/p&gt;
&lt;h3 id=&quot;1-1-设计目标&quot;&gt;&lt;a href=&quot;#1-1-设计目标&quot; class=&quot;headerlink&quot; title=&quot;1.1 设计目标&quot;&gt;&lt;/a&gt;1.1 设计目标&lt;/h3&gt;&lt;p&gt;设计目标即设计初衷，理解其为何诞生对我们掌握并使用它具有很大帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流式数据访问&lt;/strong&gt;：“一次写入，多次读取”，HDFS建立在这个思想之上，简化了数据一致性问题。HDFS设计中考虑了数据批处理，而不是用户交互处理。HDFS为了达到高数据吞吐量从而牺牲了数据访问的延时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;硬件故障&lt;/strong&gt;：由于Hadoop适合部署在廉价硬件集群上，而非昂贵且高可靠的硬件上，不可避免会产生硬件错误，HDFS面对硬件故障时，其快速检错与自动恢复时是HDFS架构最核心的目标。&lt;/p&gt;
&lt;h3 id=&quot;1-2-HDFS设计优劣&quot;&gt;&lt;a href=&quot;#1-2-HDFS设计优劣&quot; class=&quot;headerlink&quot; title=&quot;1.2 HDFS设计优劣&quot;&gt;&lt;/a&gt;1.2 HDFS设计优劣&lt;/h3&gt;&lt;p&gt;优点：高容错性、适合大量数据批处理、模型简单、成本低…&lt;/p&gt;
&lt;p&gt;缺点：流式数据读取拥有很高的数据吞吐率，但导致了很高的延时，不适合低延时数据访问；不适合大量小文件存储，过多小文件会严重影响系统性能；不支持多用户并发写入及修改文件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>Java Web: HttpServletRequest对象和HttpServeltRespnse对象详解</title>
    <link href="http://yoursite.com/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-03-17T16:17:58.000Z</published>
    <updated>2020-05-16T14:32:24.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HttpServletRequest对象和HttpServeltResponse对象详解"><a href="#HttpServletRequest对象和HttpServeltResponse对象详解" class="headerlink" title="HttpServletRequest对象和HttpServeltResponse对象详解"></a>HttpServletRequest对象和HttpServeltResponse对象详解</h1><h2 id="1-HttpServletRequest简介"><a href="#1-HttpServletRequest简介" class="headerlink" title="1. HttpServletRequest简介"></a>1. HttpServletRequest简介</h2><p>HttpServletRequest代表客户端请求，顾名思义，客户端通过HTTP协议访问服务器时，HTTP相关信息都封装在这个对象中，开发者可以通过这个对象的方法获取客户端请求的所有信息。</p><h2 id="2-Request对象常用方法"><a href="#2-Request对象常用方法" class="headerlink" title="2. Request对象常用方法"></a>2. Request对象常用方法</h2><h3 id="2-1-获取请求行信息「客户机信息」"><a href="#2-1-获取请求行信息「客户机信息」" class="headerlink" title="2.1 获取请求行信息「客户机信息」"></a>2.1 获取请求行信息「客户机信息」</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getMethod</td><td>获得请求方式</td></tr><tr><td>getRequestURL</td><td>获得客户端发出请求时完整URL</td></tr><tr><td>getRequestURI</td><td>获得请求行中资源名部分</td></tr><tr><td>getServletPath</td><td>获得Servlet路径</td></tr><tr><td>getProtocol</td><td>获得协议和版本</td></tr><tr><td>getQueryString</td><td>获得返回行中的参数部分</td></tr><tr><td>getLocalAddr</td><td>获得Web服务器的IP地址</td></tr><tr><td>getLocalName</td><td>获得Web服务器来的主机名</td></tr></tbody></table><a id="more"></a><h3 id="2-2-获取请求头信息"><a href="#2-2-获取请求头信息" class="headerlink" title="2.2 获取请求头信息"></a>2.2 获取请求头信息</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getHeader</td><td>以字符串形式返回指定请求头的值</td></tr><tr><td>getHeaderNames</td><td>返回请求包含所有的请求头名称的枚举</td></tr><tr><td>代码实例：</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Servlet implementation class request</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/request"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">request</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求行、请求头内容获取</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">   PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">   String title = <span class="string">"Servlet Example: Showing Request Headers"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">   out.println(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n"</span>     </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h1&gt;"</span> + title+ <span class="string">"&lt;/h1&gt;\n"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;Request Method: "</span>+request.getMethod()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;Request URL: "</span>+request.getRequestURL()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;Request URI: "</span>+request.getRequestURI()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;ServletPath: "</span>+request.getServletPath()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;Request Protocol: "</span>+request.getProtocol()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;Request String: "</span>+request.getQueryString()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;Web Server IP Address: "</span>+request.getLocalAddr()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;h2&gt;WebServerLocalName: "</span>+request.getLocalName()+<span class="string">"&lt;/h2&gt;"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;table border=\"1\"&gt;\n"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">     + <span class="string">"&lt;tr&gt;&lt;th&gt;Header Name&lt;/th&gt;&lt;th&gt;Header Value&lt;/th&gt;&lt;/tr&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">   Enumeration headerNames = request.getHeaderNames();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">       String headerName = (String) headerNames.nextElement();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">       out.println(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + headerName + <span class="string">"&lt;/td&gt;"</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">         +<span class="string">"&lt;td&gt;"</span>+request.getHeader(headerName)+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">    out.println(<span class="string">"&lt;/table&gt;\n&lt;/body&gt;&lt;/html&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">doGet(request, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/RequestHeader.png" alt="RequestHeader"></p><h3 id="2-3-获取请求体"><a href="#2-3-获取请求体" class="headerlink" title="2.3 获取请求体"></a>2.3 获取请求体</h3><h3 id="2-3-1-表单获取"><a href="#2-3-1-表单获取" class="headerlink" title="2.3.1 表单获取"></a>2.3.1 表单获取</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>String getParameter(name)</td><td>根据表单中的属性名，获取value的值</td></tr><tr><td>String[]　getParameterValues（String name）</td><td>为复选框提供的方法</td></tr><tr><td>getParameterNames</td><td>获取表单提交的所有name方法</td></tr><tr><td>Map&lt;String , String[]&gt;　getParameterMap()</td><td>得到表单提交的所有值的方法</td></tr><tr><td>getInputStream</td><td>以字节流的方式得到所有表单数据</td></tr></tbody></table><h4 id="2-3-1-1-使用getParameter和getParameterValues获取表单数据"><a href="#2-3-1-1-使用getParameter和getParameterValues获取表单数据" class="headerlink" title="2.3.1.1 使用getParameter和getParameterValues获取表单数据"></a>2.3.1.1 使用getParameter和getParameterValues获取表单数据</h4><p>代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//创建表单文件，提交到requset</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"request"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        UserName：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        PassWord：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        Gender：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>/&gt;</span>男  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>/&gt;</span>女  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        Hobby：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"篮球"</span>/&gt;</span>篮球</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"唱歌"</span>/&gt;</span>唱歌</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"编码"</span>/&gt;</span>编码</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        City：</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"NewYork"</span>&gt;</span>NewYork<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ShangHai"</span>&gt;</span>ShangHai<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Sydney"</span>&gt;</span>Sydney<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        Others:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">"notes"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"hidden"</span> <span class="attr">name</span> = <span class="string">"hidden"</span> <span class="attr">value</span> = <span class="string">"hiddenvalue"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.java</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Servlet implementation class request</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/request"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">request</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">     String userName = request.getParameter(<span class="string">"userName"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        String pwd = request.getParameter(<span class="string">"pwd"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        String sex = request.getParameter(<span class="string">"sex"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        String[] hobbys = request.getParameterValues(<span class="string">"hobby"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        String city = request.getParameter(<span class="string">"city"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        String others = request.getParameter(<span class="string">"notes"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        String hidden = request.getParameter(<span class="string">"hidden"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        userName = <span class="keyword">new</span> String(userName.getBytes(<span class="string">"iso-8859-1"</span>),<span class="string">"UTF-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        System.out.println(userName);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        System.out.println(pwd);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        System.out.println(sex);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; hobbys!=<span class="keyword">null</span> &amp;&amp; i &lt; hobbys.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">            System.out.print(hobbys[i]+<span class="string">"\t"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        System.out.println();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        System.out.println(city);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">        System.out.println(others);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        System.out.println(hidden);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">doGet(request, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/RequestBody.png" alt="RequestBody"></p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/RequestBody1.png" alt="RequestBody1"></p><h4 id="2-3-1-2-使用getParameterNames-和-getParameterValues（String-name）获取"><a href="#2-3-1-2-使用getParameterNames-和-getParameterValues（String-name）获取" class="headerlink" title="2.3.1.2 使用getParameterNames()和 getParameterValues（String name）获取"></a>2.3.1.2 使用getParameterNames()和 getParameterValues（String name）获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Enumeration names = request.getParameterNames();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(names.hasMoreElements())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">            String name = (String) names.nextElement();<span class="comment">//得到每一个name名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            String[] values = request.getParameterValues(name);<span class="comment">//根据name名，得到value值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;values!=<span class="keyword">null</span> &amp;&amp; i &lt; values.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                System.out.println(name+<span class="string">"\t"</span>+values[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr></table></figure><h4 id="2-3-1-3-使用getParameterMap获取提交的所有值-需要导入对应包"><a href="#2-3-1-3-使用getParameterMap获取提交的所有值-需要导入对应包" class="headerlink" title="2.3.1.3 使用getParameterMap获取提交的所有值,需要导入对应包"></a>2.3.1.3 使用getParameterMap获取提交的所有值,需要导入对应包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; paramMap = request.getParameterMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">       <span class="keyword">for</span>(Map.Entry&lt;String, String[]&gt; entry :paramMap.entrySet())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">           String paramName = entry.getKey();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">           String paramValue = <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">           String[] paramValueArr = entry.getValue();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; paramValueArr!=<span class="keyword">null</span> &amp;&amp; i &lt; paramValueArr.length; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">               <span class="keyword">if</span> (i == paramValueArr.length-<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                   paramValue+=paramValueArr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">               &#125;<span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                   paramValue+=paramValueArr[i]+<span class="string">","</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">               &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">           System.out.println(MessageFormat.format(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>, paramName,paramValue));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr></table></figure><p>执行如下：</p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/RequestMap1.png" alt="RequestMap1"></p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/RequestMap.png" alt="RequestMap"></p><h3 id="2-3-2-Request对象进行请求转发"><a href="#2-3-2-Request对象进行请求转发" class="headerlink" title="2.3.2 Request对象进行请求转发"></a>2.3.2 Request对象进行请求转发</h3><p>主要使用以下方法</p><table><thead><tr><th>方法</th><th>zuoyng</th></tr></thead><tbody><tr><td>void setAttribute(String name, Object value);</td><td>将数据作为request对象的一个属性存放到request对象中</td></tr><tr><td>Object getAttribute(String name);</td><td>获取属性</td></tr><tr><td>Void removeAttribute(String name);</td><td>移除request对象的name属性</td></tr><tr><td>getAttributeNames</td><td>获取request对象所有的属性名，例如：Enumeration<String> attrNames = request.getAttributeNames();</String></td></tr></tbody></table><p>代码实例，将<code>dispatcher.java</code>请求转发到<code>anotherServelt.java</code>上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// dispatcher.java</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Servlet implementation class dispatcher</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/dispatcher"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dispatcher</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">dispatcher</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//response.getWriter().append("Served at: ").append(request.getContextPath());</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">"param"</span>, <span class="string">"It's an RequestDispatcher example"</span>);<span class="comment">//设置参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"anotherServlet"</span>).forward(request,response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">doGet(request, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Servlet implementation class anotherServelt</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/anotherServelt"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">anotherServelt</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">anotherServelt</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">super</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//response.getWriter().append("Served at: ").append(request.getContextPath());</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//String param = (String)request.getAttribute("param");//getAttribute返回object类型，需要强制转换</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">String param = (String)request.getAttribute(<span class="string">"param"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">out.print(<span class="string">"&lt;h1&gt;"</span>+param+<span class="string">"&lt;/h1&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"hello"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">System.out.print(param);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">doGet(request, response);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/Dispatcher.png" alt="Dispatcher"></p><p>总结：<strong>请求转发并不改变浏览器的URL，服务器处理转发资源，屏蔽了浏览器，request对象的值不改变，可继续从中获取数据。同时请求转发局限于某一个Web项目下，不可跳转至其他项目。</strong></p><h2 id="3-HttpServletResponse简介"><a href="#3-HttpServletResponse简介" class="headerlink" title="3. HttpServletResponse简介"></a>3. HttpServletResponse简介</h2><p>Web服务器收到客户端HTTP请求，对每一次请求创建一个请求对象request和响应对象response对象。我们需要像容器输出数据，使用response对象即可。</p><p>HttpServletResponse对象代表服务器的响应。这个对象中封装了向客户端发送数据、发送响应头，发送响应状态码的方法。</p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/Response.png" alt="Response"></p><p>其中getOutputStream和getWriter方法分别用于得到输出二进制数据、输出文本数据的ServletOuputStream、Printwriter对象。这两个方法互相排斥，调用了其中的任何一个方法后，就不能再调用另一方法。 会抛异常。</p><p>Servlet程序向ServletOutputStream或PrintWriter对象中写入的数据将被Servlet引擎从response里面获取，Servlet引擎将这些数据当作响应消息的正文，然后再与响应状态行和各响应头组合后输出到客户端。</p><p>Serlvet的service方法结束后，Servlet引擎将检查getWriter或getOutputStream方法返回的输出流对象是否已经调用过close方法，如果没有，Servlet引擎将调用close方法关闭该输出流对象。</p><h3 id="3-1-响应行"><a href="#3-1-响应行" class="headerlink" title="3.1 响应行"></a>3.1 响应行</h3><table><thead><tr><th>常见的响应状态码</th><th>含义</th></tr></thead><tbody><tr><td>200 OK</td><td>一切正常，对GET和POST请求的应答文档跟在后面</td></tr><tr><td>3XX</td><td>用于已经移动的文件并且充被包含在定位头信息中指定新的地址消息</td></tr><tr><td>302 Found</td><td>类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。</td></tr><tr><td>4XX  用于指出客户端的错误</td><td>404 Not Found 无法找到指定位置的资源</td></tr><tr><td>5XX  用于支持服务器错误</td><td>500 Internal Server Error  服务器遇到了意料不到的情况，不能完成客户的请求</td></tr></tbody></table><p>可以使用<code>setStatus(int sc)</code>来设置响应状态码</p><h3 id="3-2-响应头"><a href="#3-2-响应头" class="headerlink" title="3.2 响应头"></a>3.2 响应头</h3><p>常见响应头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Accept-Charset:告知客户可以接收的字符集</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Accept-Encoding:所有响应的字符编码集</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    Content-Type:响应体的MIME类型</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    Content-Language:响应体的语言类型</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    Content-Length:响应体的长度和字节数</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    Expires：通知客户端过期时间，防止客户浏览器使用本地缓存副本</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    Cookie：包含保存到客户端的Cookie集</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    Redirect：提供指定重定向，可以不向浏览器输出响应内容，而是直接重新请求到另一个URL地址，实现重定向响应，即是一种自动定向。</span></pre></td></tr></table></figure><p>可以使用<code>setHeader(String name, String value)</code>设置响应头信息</p><p>举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>); <span class="comment">//告诉客户端使用什么编码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">response.setStatus(<span class="number">302</span>);<span class="comment">//设置状态码为302，代表重定向</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"location"</span>, <span class="string">"http://www.baidu.com"</span>);<span class="comment">//设置location为baidu,实现重定向</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"refresh"</span>,<span class="string">"2"</span>);<span class="comment">//定时刷新页面</span></span></pre></td></tr></table></figure><h3 id="3-3-响应正文方法"><a href="#3-3-响应正文方法" class="headerlink" title="3.3 响应正文方法"></a>3.3 响应正文方法</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>getWrite</td><td>字符输出流</td></tr><tr><td>getOutputStream</td><td>字符输出流</td></tr><tr><td>setCharacterEncoding(String charset)</td><td>告诉服务器使用什么编码</td></tr><tr><td>setContentType(String type)</td><td>设置服务器编码</td></tr></tbody></table><h3 id="3-4-重定向"><a href="#3-4-重定向" class="headerlink" title="3.4 重定向"></a>3.4 重定向</h3><p>什么是重定向：<strong>一个web资源收到客户端请求后，通知客户端去访问另外一个web资源，这称之为请求重定向。</strong></p><p>应用场景：用户登陆成功，从注册页面跳转到某个页面。</p><p>实现方式：response.sendRedirect(String location)，调用response对象的sendRedirect方法实现请求重定向<br>sendRedirect内部的实现原理：使用response设置302状态码和设置location响应头实现重定向</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  response.sendRedirect(<span class="string">"http://www.baidu.com"</span>);<span class="comment">//重定向到baidu</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//sendRedirect（"http://www.baidu.com"）等同于以下两行代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//response.setStatus(302);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//response.setHeader("location", "http://baidu.com");</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>总结：</p><p>重定向由response发起，是服务器告诉浏览器要跳转的页面，所以URL地址会变，即浏览器重新发起一个请求到另一页面，request是重新发起的请求，而请求转发是服务器内部完成的请求，是不一样的。</p><p>对于重定向的跳转路径，有两种方法：</p><p><code>response.sendRedirect(&quot;/test01/MyServlet01&quot;);</code>：此处使用/作为开始，说明是从web的根开始，可以定位到根下面的任何资源。</p><p><code>response.sendRedirect(&quot;MyServlet01&quot;);</code>：这种写法是从当前web项目的根开始，即使用相对路径表示，能够访问到当前web项目下的任何资源。</p><h4 id="3-5-如何使用重定向传参"><a href="#3-5-如何使用重定向传参" class="headerlink" title="3.5 如何使用重定向传参"></a>3.5 如何使用重定向传参</h4><p>重定向发起的是二次请求，浏览器中请求的新页面无法获取服务器中原来页面参数，那么参数该如何获取呢？</p><p>解决：使用URL后的？传参，并使用getParameter取得参数。</p><p>举例：使用重定向传参数，模拟用户登陆页面。</p><p>说明：login.html为登陆的页面，表单提交后发送至loginServlet.java，在loginServlet.java中处理得到结果，将结果发送至resultServlet.java，并在页面中输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">//login.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"margin-top: 0px;margin-bottom: 0px;margin-top: 0px"</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Username：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Password：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// loginServlet.java中的doGet方法，其余不变</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取表单参数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">String user = request.getParameter(<span class="string">"name"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">String pw = request.getParameter(<span class="string">"password"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">String result = <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//登陆验证</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user.equals(<span class="string">"hello"</span>)&amp;&amp;pw.equals(<span class="string">"123"</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">result = <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">result = <span class="string">"fail"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用请求转发，通过设置参数进行获取</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.setAttribute("user", user);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//request.setAttribute("result", result);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求转发，跳回视图层</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//RequestDispatcher rd  = request.getRequestDispatcher("ResultServlet");</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//rd.forward(request, response);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用重定向，则需要通过？传参</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"ResultServlet?user="</span>+user+<span class="string">"&amp;result="</span>+result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// resultServlet中的doGet方法，其余不变</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求转发使用getAttribute获取。</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//String user = (String)request.getAttribute("user");</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//String result =(String)request.getAttribute("result");</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向参数获取，使用getParameter获取</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">String user = (String)request.getParameter(<span class="string">"user"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">String result =(String)request.getParameter(<span class="string">"result"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">PrintWriter out = response.getWriter();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">out.print(<span class="string">"Welcome,"</span>+user+<span class="string">",your status is:"</span>+result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/redirect.png" alt="redirect"></p><p><img src="/2020/03/18/Java-Web-HttpServletRequest%E5%AF%B9%E8%B1%A1%E5%92%8CHttpServeltRespnse%E5%AF%B9%E8%B1%A1%E8%AF%A6%E8%A7%A3/redirect1.png" alt="redirect1"></p><blockquote><p>以上登陆提供了请求转发和重定向两种方式，便于进一步体现两者区别。　　　</p></blockquote><h2 id="乱码问题解决"><a href="#乱码问题解决" class="headerlink" title="乱码问题解决"></a>乱码问题解决</h2><blockquote><p>待补充…</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html" target="_blank" rel="noopener">Oracle HttpServletRequest官方文档</a></p><p><a href="https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html" target="_blank" rel="noopener">Oracle HttpServletResponse官方文档</a></p><p><a href="https://www.cnblogs.com/xdp-gacl/p/3798347.html" target="_blank" rel="noopener">孤傲苍狼博客园对Java Web的总结</a></p><p><a href="https://www.cnblogs.com/zhangyinhua/p/7629221.html#_label0" target="_blank" rel="noopener">LanceToBigData</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HttpServletRequest对象和HttpServeltResponse对象详解&quot;&gt;&lt;a href=&quot;#HttpServletRequest对象和HttpServeltResponse对象详解&quot; class=&quot;headerlink&quot; title=&quot;HttpServletRequest对象和HttpServeltResponse对象详解&quot;&gt;&lt;/a&gt;HttpServletRequest对象和HttpServeltResponse对象详解&lt;/h1&gt;&lt;h2 id=&quot;1-HttpServletRequest简介&quot;&gt;&lt;a href=&quot;#1-HttpServletRequest简介&quot; class=&quot;headerlink&quot; title=&quot;1. HttpServletRequest简介&quot;&gt;&lt;/a&gt;1. HttpServletRequest简介&lt;/h2&gt;&lt;p&gt;HttpServletRequest代表客户端请求，顾名思义，客户端通过HTTP协议访问服务器时，HTTP相关信息都封装在这个对象中，开发者可以通过这个对象的方法获取客户端请求的所有信息。&lt;/p&gt;
&lt;h2 id=&quot;2-Request对象常用方法&quot;&gt;&lt;a href=&quot;#2-Request对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;2. Request对象常用方法&quot;&gt;&lt;/a&gt;2. Request对象常用方法&lt;/h2&gt;&lt;h3 id=&quot;2-1-获取请求行信息「客户机信息」&quot;&gt;&lt;a href=&quot;#2-1-获取请求行信息「客户机信息」&quot; class=&quot;headerlink&quot; title=&quot;2.1 获取请求行信息「客户机信息」&quot;&gt;&lt;/a&gt;2.1 获取请求行信息「客户机信息」&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;getMethod&lt;/td&gt;
&lt;td&gt;获得请求方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getRequestURL&lt;/td&gt;
&lt;td&gt;获得客户端发出请求时完整URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getRequestURI&lt;/td&gt;
&lt;td&gt;获得请求行中资源名部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getServletPath&lt;/td&gt;
&lt;td&gt;获得Servlet路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getProtocol&lt;/td&gt;
&lt;td&gt;获得协议和版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getQueryString&lt;/td&gt;
&lt;td&gt;获得返回行中的参数部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getLocalAddr&lt;/td&gt;
&lt;td&gt;获得Web服务器的IP地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getLocalName&lt;/td&gt;
&lt;td&gt;获得Web服务器来的主机名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>01-Hadoop Configuration</title>
    <link href="http://yoursite.com/2020/02/25/01-Hadoop-Configuration/"/>
    <id>http://yoursite.com/2020/02/25/01-Hadoop-Configuration/</id>
    <published>2020-02-25T15:31:35.000Z</published>
    <updated>2020-03-03T11:22:46.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-配置【一】：macOS-10-15-3-Hadoop-3-2-1"><a href="#Hadoop-配置【一】：macOS-10-15-3-Hadoop-3-2-1" class="headerlink" title="Hadoop 配置【一】：macOS 10.15.3 + Hadoop 3.2.1"></a>Hadoop 配置【一】：macOS 10.15.3 + Hadoop 3.2.1</h1><h2 id="云计算平台"><a href="#云计算平台" class="headerlink" title="云计算平台"></a>云计算平台</h2><p>服务层次：基础设施即服务（IaaS）/ 平台即服务（PaaS）/ 软件即服务（SaaS）</p><h2 id="资料选择"><a href="#资料选择" class="headerlink" title="资料选择"></a>资料选择</h2><p><a href="http://dblab.xmu.edu.cn/post/5663/" target="_blank" rel="noopener">《大数据技术原理与应用》</a>：作为入门教材使用</p><p><a href="https://dblab.xmu.edu.cn/post/bigdatapractice/" target="_blank" rel="noopener">《大数据基础编程、实验和案例教程》</a>：配套实验指导书</p><p><a href="https://book.douban.com/subject/10464777/" target="_blank" rel="noopener">《Hadoop》</a>:作为深入研究的书籍</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>大数据计算的几种模式</p><table><thead><tr><th align="left">大数据计算模式</th><th align="left">解决问题</th><th align="left">代表产品</th></tr></thead><tbody><tr><td align="left">批处理计算</td><td align="left">大规模数据的<strong>批</strong>处理</td><td align="left">MapReduce、Spark等</td></tr><tr><td align="left">流计算</td><td align="left">针对流数据的<strong>实时</strong>计算</td><td align="left">Storm、S4、Flume、Streams等</td></tr><tr><td align="left">图计算</td><td align="left">针对大规模<strong>图结构</strong>数据的处理</td><td align="left">Pregel、GraphX、Giraph、PowerGraph等</td></tr><tr><td align="left">查询分析计算</td><td align="left">大规模数据的<strong>存储管理和查询</strong></td><td align="left">Dremel、Hive、Cassandra等</td></tr></tbody></table><p>扩展：大数据与云计算、物联网的关系</p><p>云计算概述：</p><blockquote><p>解决两个核心问题：</p><p>解决海量数据的<strong>分布式存储和分布式处理问题</strong> / 虚拟化和多租户</p><p>三个核心缩写：</p><p>SaaS： Software as a Service    「从集中的系统部署软件，使之在一台本地计算机上运行的一个模型，SaaS允许出租一个应用程序」</p><p>PaaS：Platform as a Service    「类似IaaS，包括操作系统和围绕特定应用必须的服务」</p><p>IaaS：Infrastructure as a Service    「将基础设施（计算资源和存储）作为服务出租」</p></blockquote><p>物联网：</p><blockquote><p>感知层    -&gt; 网络层    -&gt;    处理层    -&gt;    应用层</p></blockquote><p>云计算为大数据提供技术基础、大数据为云计算提供用武之地。</p><p>物联网是大数据重要来源，大数据为物联网数据分析提供支撑。</p><p>云计算为互联网提供海量数据存储能力，物联网为云计算技术提供广阔的应用空间。</p><a id="more"></a><h2 id="处理架构Hadoop-需拓展"><a href="#处理架构Hadoop-需拓展" class="headerlink" title="处理架构Hadoop[需拓展]"></a>处理架构Hadoop[需拓展]</h2><p><img src="/2020/02/25/01-Hadoop-Configuration/p1.jpg" alt="p1"></p><p>开源的分布式计算平台，极大的降低了用户的复杂性。可以使用多种语言在Hadoop上运行。</p><p>两大核心：HDFS + MapReduce，<strong>这两个核心解决了分布式的存储和分布式处理问题两大核心问题。</strong></p><p>特点：高可靠性，高效性「分布式并行处理」，高可扩展性，成本低「可用低端机」。</p><p><strong>Hadoop版本区分</strong>：Hadoop1.x / Hadoop 2.x  / Hadoop 3.x</p><p>1.0 版本 MapReduce框架的功能过于复杂，效率低下。</p><p>2.0 版本 将MapReduce下的资源调度提取出来，新建一个<strong>YARN框架</strong>进行资源调度。HDFS也发生变化，对可扩展性进行改进。</p><blockquote><p>Hadoop衍生版本：<strong>Cloudera</strong>、MapR、Hortonwork、星环</p></blockquote><p><strong>Hadoop项目结构</strong>「需深入」</p><p>Spark基于内存计算，MapReduce基于内存，Spark性能高。Hive，Hadoop上的数据仓库。Pig进行轻量级的数据处理「可以嵌套Sql，基于Haaoop的大规模数据分析平台」，Oozie工作流管理，ZooKeeper，提供分布式协调一致性服务，Hbase非关系型的数据库。Flume进行数据收集，Sqoop进行数据导入导出「关系数据库的数据导出的Hadoop中」，Ambari，快速部署工具，支持Apache Hadoop集群的供应。</p><p><strong>Hadoop部署与使用</strong></p><p>HDFS：NameNode[名称节点] + DataNode[数据节点] 一起构成分布式文件节点系统。NameNode很多数据都保存在内存中。</p><p>MapReduce：JobTracker[作业管家，进行协调] + TaskTracker[部署在不同机器中，负责跟踪和执行分配给自己的作业]</p><p>一个MapReduce做作业时由一个总管家JobTracker来协调很多个位于不同机器上的若干个TaskTracker完成一个大的作业。</p><p>冷备份，SecondaryNameNode：NameNode故障后需要恢复过程顶上去。</p><hr><h1 id="MacOS-Hadoop-配置及入坑指南"><a href="#MacOS-Hadoop-配置及入坑指南" class="headerlink" title="MacOS Hadoop 配置及入坑指南"></a>MacOS Hadoop 配置及入坑指南</h1><blockquote><p>学习大数据的记录文章，有很多不足或错误尽请谅解或与我联系。</p><p><a href="supermingzero@gmail.com">邮箱</a>                          <a href="https://t.me/SuperMing" target="_blank" rel="noopener">Telegram</a></p></blockquote><blockquote><p>系统版本：macOS Catalina 10.15.3</p><p>Hadoop 版本：3.2.1</p></blockquote><p>学习分布式计算( Distributed Computing )，Hadoop 是一个很好的开始。</p><p>Hadoop是一个开源的分布式计算平台，由于良好的开发环境极大的降低了用户的使用复杂性。基于Java开发，具有很好的扩展性，可以使用多种语言运行。</p><p>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算.</p><p>由于Mac OS本身基于类Unix系统开发，Hadoop平台亦可以在Mac OS上使用。相关配置可能有所不同。</p><h2 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h2><p>mac作为我平时开发的主力机，当然希望各种开发环境都能在一台机子上完成，Hadoop也不例外。Apache Hadoop 3.2.1于2019年9月22日释出，mac系统可参考和借鉴的文章不是很多，所以希望在macOS下完美的配置Hadoop，并解决相关问题。「Not Yet」。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Java 8 [ 注意是Java 8 ]</li><li><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> [Mac OS的包管理系统]</li><li>ssh</li><li>Hadoop</li></ul><h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></pre></td></tr></table></figure><blockquote><p>Homebrew安装的软件都集中在/usr/local/Cellar中</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看brew的帮助</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">brew -help</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装软件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">brew install hadoop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载软件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">brew uninstall hadoop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索软件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">brew search hadoop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看已经安装的软件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">brew list</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新软件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">brew update</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新某具体软件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">brew upgrade hadoop</span></pre></td></tr></table></figure><h3 id="安装Java8"><a href="#安装Java8" class="headerlink" title="安装Java8"></a>安装Java8</h3><p>对于Java版本使用问题，参见<a href="https://cwiki.apache.org/confluence/display/HADOOP/Hadoop+Java+Versions" target="_blank" rel="noopener">官网</a>。</p><p><img src="/2020/02/25/01-Hadoop-Configuration/p2.png" alt="p1"></p><p>检查自己的Java 版本<code>Java -version</code></p><p><img src="/2020/02/25/01-Hadoop-Configuration/p3.png" alt="p1"></p><p>如果不是Java8，参考常规下载包安装或命令安装「若原本有更高级或别的java版本在进行其余开发，不用卸载修改路径即可，请自寻Google」</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew cask install java8</span></pre></td></tr></table></figure><h3 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h3><p>使用下面命令查看ssh是否可用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh localhost</span></pre></td></tr></table></figure><p>若显示</p><p><code>ssh：connect to host localhost port 22: COnnection refused</code></p><p>使用下面命令，授权SSH登陆。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod 0600 ~/.ssh/authorized_keys</span></span></pre></td></tr></table></figure><p><img src="/2020/02/25/01-Hadoop-Configuration/p5.png" alt="p1"></p><p>然后在系统System Preferences -&gt; Sharing下的Remote Login中国中选择All users允许接入。</p><p><img src="/2020/02/25/01-Hadoop-Configuration/p4.png" alt="p1"></p><p>再次执行<code>ssh localhost</code>看是否成功。若依旧失败请Google解决。</p><h3 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Brew install hadoop</span></pre></td></tr></table></figure><p>Brew会安装最新的稳定版本，截止2020年2月23日，版本为<code>hadoop-3.2.1</code> </p><p><img src="/2020/02/25/01-Hadoop-Configuration/p12.png" alt="p1"></p><p>Mac下的安装目录：<code>/usr/local/Cellar/hadoop</code></p><blockquote><p>In normal circumstances, brew would have automatically created a symlink from <code>/usr/local/opt/hadoop</code> to <code>/usr/local/Celler/hadoop/</code></p></blockquote><h2 id="相关配置参考："><a href="#相关配置参考：" class="headerlink" title="相关配置参考："></a>相关配置参考：</h2><blockquote><p>Hadoop 三种运行模式</p><ul><li>Standalone Operation  </li></ul><p>单机配置，非分布式模式。设置单节点的时候，Hadoop默认运行在<strong>非分布式的单机配置</strong>下，方便进行调试。也就是说安装完成后无需进行配置即可运行。</p><ul><li>Pseudo-Distributed Operation</li></ul><p>Hadoop可以在单节点上以伪分布的方式运行，Hadoop进程以分离的Java进行来运行，，即下面的配置。节点即作为NameNode也作为DataNode，同时提取的是HDFS中的文件。</p><ul><li>Fully-Distributed Operation </li></ul><p>分布式模式。需要多台分布式设备，在此不做展开。</p></blockquote><p>macOS下Hadoop配置文件目录为：/usr/local/Cellar/hadoop/3.2.1/libexec/etc/hadoop/ 下，进入该目录对以下文件修改</p><blockquote><p><strong>core-site.xml</strong>  「MapReduce job」</p><p><strong>hdfs-site.xml</strong> 「MapReduce job」</p><p><strong>mapred-site.xml</strong> 「YARN」</p><p><strong>hadoop-env.sh</strong> 「Total」</p></blockquote><p>Hadoop运行由配置文件决定，也就是从伪分步模式切换回非分布式模式都需要对配置文件进行调整。</p><p>在官方文档下，伪分布模式只需要配置<code>fs.defaultFS</code>与<code>dfs.replication</code>就可。但我们需要配置<code>hadoop.tmp.dir、dfs.namenode.name.dir、dfs.datenode.data.dir</code>指定使用的目录，默认目录重启时会被清理，所以需要进行配置。</p><h3 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h3><p>在此文件对hadoop进行配置。使用命令找到mac下的Java_Home路径<code>/usr/libexec/java_home -V</code></p><p>在<code>/usr/local/Cellar/hadoop/3.2.1/libexec/etc/hadoop/hadoop-env.sh</code>下寻找export JAVA_HOME，修改配置如下：</p><p>!<img src="/2020/02/25/01-Hadoop-Configuration/p6.png" alt="p1"></p><h3 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><p>在core-site.xml下配置HDFS 地址和端口号，写入下面配置「注意所有端口号不要与你正在使用的<strong>端口号</strong>冲突，冲突请更换空闲端口」</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/hdfs/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary directories<span class="tag">&lt;/<span class="name">description</span>&gt;</span>             </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><ul><li><code>hadoop.tmp.dir</code> : 用于存放本地Hadoop临时文件，比如datanode、namenode、hdfs等，记得给相应权限</li><li><code>fs.defaultFS</code> : is the new name for the previously-deprecated key <code>fs.default.name</code>.</li></ul><h3 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><p>在目录 <code>/usr/local/Cellar/hadoop/3.2.1/libexec/etc/hadoop/hdfs-site.xml</code> 下配置以下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/hdfs/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/hdfs/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><p>为什么是1？因为在单机环境下，不论是分布式还是伪分布，都只有一个数据点（Datanode）。</p><h3 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h3><p>此节点为运行YARN配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:8021<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></pre></td></tr></table></figure><h2 id="初始化HDFS"><a href="#初始化HDFS" class="headerlink" title="初始化HDFS"></a>初始化HDFS</h2><p>下面命令初始化分布式文件，收到”successfully formatted”即配置ok。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/opt/hadoop</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span></pre></td></tr></table></figure><p><img src="/2020/02/25/01-Hadoop-Configuration/p7.png" alt="p1"></p><h3 id="启动命令介绍"><a href="#启动命令介绍" class="headerlink" title="启动命令介绍"></a>启动命令介绍</h3><p>进入以下目录<code>/usr/local/opt/hadoop/sbin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./start-dfs.sh # 开启HDFS服务命令</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">./stop-dfs.sh  # 停止HDFS服务命令</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">./start-all.sh # 开启所有命令</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">./stop-all.sh # 停止所有命令</span></pre></td></tr></table></figure><p>开启完毕后使用<code>jps</code>命令查看服务状态</p><p><img src="/2020/02/25/01-Hadoop-Configuration/p8.png" alt="p1"></p><p>按照上述配置，且没有更换端口，通过下面网址接入Hadoop的网页</p><p><strong>Resource Manager： <a href="http://localhost:9780" target="_blank" rel="noopener">http://localhost:9780</a></strong></p><blockquote><p><strong>2.x版本默认为<a href="http://localhost:50070" target="_blank" rel="noopener">http://localhost:50070</a></strong></p></blockquote><p>NameNode Info：</p><p><img src="/2020/02/25/01-Hadoop-Configuration/p9.png" alt="p1"></p><p><strong>JobTracker：<a href="http://localhost:8088/" target="_blank" rel="noopener">http://localhost:8088/</a></strong></p><p>MapReduce Info：</p><p><img src="/2020/02/25/01-Hadoop-Configuration/p10.png" alt="p1"></p><p><strong>Node Specific Info: <a href="http://localhost:8042/" target="_blank" rel="noopener">http://localhost:8042/</a></strong></p><p><img src="/2020/02/25/01-Hadoop-Configuration/p11.png" alt="p1"></p><h2 id="Shell-配置（optional）"><a href="#Shell-配置（optional）" class="headerlink" title="Shell 配置（optional）"></a>Shell 配置（optional）</h2><p>相较于每次都进入目录<code>/usr/local/Cellar/hadoop/3.2.1/sbin</code>，在shell中配置全局<code>PATH</code>会方面很多，这样我们就可以在shell或terminal任意地方使用hadoop相关命令。</p><p>不同的shell配置目录不同，``/etc/profile<code>,</code><del>/.bashrc<code>,</code></del>/.bash_profile<code>,</code><del>/.profile<code>,</code></del>/.zshrc<code>…</code></p><p>我使用zsh，所以打开<code>~/.zshrc</code>下添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/Cellar/hadoop/3.2.1/sbin </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> gohadoop=<span class="string">"cd /usr/local/Cellar/hadoop"</span> <span class="comment">#方便进入hadoop目录</span></span></pre></td></tr></table></figure><p>保存退出</p><p>使用命令<code>source ~/.zshrc</code>使zsh配置生效</p><p>这样在<code>/usr/local/Cellar/hadoop/3.2.1/sbin</code>目录下的文件可以不再进入该目录直接执行即可。</p><p>Hadoop默认配置使用本地框架进行开发调试，如果要在本机上使用YARN，如果shell配置后，可直接使用<code>start-yarn.sh</code>。</p><h2 id="Troble-shooting"><a href="#Troble-shooting" class="headerlink" title="Troble shooting"></a>Troble shooting</h2><p>碰到问题最好先检查日志来找原因。</p><ol><li>开启所有服务后，发现有些服务没有开启</li></ol><p><img src="/2020/02/25/01-Hadoop-Configuration/p15.png" alt="p1"></p><p>Answer：未能开启其余模块，主要是Java版本不兼容，我使用的是Java11进行安装，出现如上错误，下载Java 8 后问题Fix。</p><ol start="2"><li>进行单机伪分布测试时，出现如下问题「unFixed」不影响正常使用</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span></pre></td></tr></table></figure><ol start="3"><li>Hadoop启动错误是出现“ssh: Could not resolve hostname xxx” 「参考」</li></ol><p>通过设置Hadoop的环境变量解决。</p><h2 id="Hadoop伪分布式运行MapReduce实例"><a href="#Hadoop伪分布式运行MapReduce实例" class="headerlink" title="Hadoop伪分布式运行MapReduce实例"></a>Hadoop伪分布式运行MapReduce实例</h2><blockquote><p>此处参考的也是官方文档的例子，但有很多地方会与之有冲突。</p></blockquote><p>单机模式中读取的是本地的数据，而伪分布则读取的是HDFS模式。</p><p>Shell命令的四种方式</p><blockquote><p>./bin/hadoop dfs  #只适合HDFS文件系统<br>hadoop fs  #适用不同的文件系统<br>hadoop dfs #只适合HDFS文件系统<br>hdfs dfs #只适合HDFS文件系统</p></blockquote><ol><li>需要使用HDFS，则需要创建用户目录。mac默认为你原本用户的名字，可以直接用也可以创建用户。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir -p /user/hadoop  #创建hadoop用户</span></pre></td></tr></table></figure><blockquote><p>Report：我在mac的hadoop目录下运行以上命令没有任何反应，查看用户也不存在。</p></blockquote><ol start="2"><li>在分布式文件中创建input文件，然后将文/usr/local/Cellar/hadoop/3.2.1/libexec/etc/hadoop/下的文件复制到分布式文件系统下的input文件中。</li></ol><p>因为我使用的是此电脑的用户即superming，且已有相应用户目录/user/superming，因此在命令中可以使用相对路径如input，绝对路径为/user/superming/input,我在hadoop/3.2.1目录下执行的以下操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir input</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -put .libxexc/etc/hadoop/*.xml input</span></pre></td></tr></table></figure><p>复制完成后通过下面命令查看文件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls input</span></pre></td></tr></table></figure><p>接下来运行MapReduce作业。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./bin/hadoop jar ./libexec/share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output 'dfs[a-z.]+'</span></pre></td></tr></table></figure><p>运行结果截图如下：</p><p><img src="/2020/02/25/01-Hadoop-Configuration/p13.png" alt="p1"></p><p>查看命令运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat output/*</span></pre></td></tr></table></figure><p><img src="/2020/02/25/01-Hadoop-Configuration/p14.png" alt="p1"></p><p>或把文件存入本地再查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">rm -r ./output    # 先删除本地的 output 文件夹（如果存在）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -get output ./output     # 将 HDFS 上的 output 文件夹拷贝到本机</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">cat ./output/*</span></pre></td></tr></table></figure><p>提示：Hadoop运行文件时，输出的目录Hadoop会给你创建，否则会导致冲突。若原本存在或要重新执行以上测试，先删除目标文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -rm -r output 「output指代目标文件」</span></pre></td></tr></table></figure><p>【<strong>参考</strong>】：鉴于此在每次开发中，可以在程序中添加如下代码，能在每次运行时自动删除输出目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Job job = <span class="keyword">new</span> Job(conf);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除输出目录 */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Path outputPath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">outputPath.getFileSystem(conf).delete(outputPath, <span class="keyword">true</span>);</span></pre></td></tr></table></figure><p>关闭Hadoop执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">./sbin/stop-dfs.sh  # 停止HDFS服务命令</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">./sbin/stop-all.sh  # 停止所有hadoop服务</span></pre></td></tr></table></figure><hr><p><strong>目录整理：</strong></p><p>环境配置目录：<code>/usr/local/Cellar/hadoop/3.2.1/libexec/etc/hadoop/capacity-scheduler.xml</code></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://dblab.xmu.edu.cn/blog/2441-2/#more-2441" target="_blank" rel="noopener">林子雨老师的Hadoop3.1.3 安装教程</a></p><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html#Required_Software" target="_blank" rel="noopener">Hadoop: Setting up a Single Node Cluster.</a></p><p>[Complete Guide to Install and Configure Apache Hadoop 3 on MacOS](</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hadoop-配置【一】：macOS-10-15-3-Hadoop-3-2-1&quot;&gt;&lt;a href=&quot;#Hadoop-配置【一】：macOS-10-15-3-Hadoop-3-2-1&quot; class=&quot;headerlink&quot; title=&quot;Hadoop 配置【一】：macOS 10.15.3 + Hadoop 3.2.1&quot;&gt;&lt;/a&gt;Hadoop 配置【一】：macOS 10.15.3 + Hadoop 3.2.1&lt;/h1&gt;&lt;h2 id=&quot;云计算平台&quot;&gt;&lt;a href=&quot;#云计算平台&quot; class=&quot;headerlink&quot; title=&quot;云计算平台&quot;&gt;&lt;/a&gt;云计算平台&lt;/h2&gt;&lt;p&gt;服务层次：基础设施即服务（IaaS）/ 平台即服务（PaaS）/ 软件即服务（SaaS）&lt;/p&gt;
&lt;h2 id=&quot;资料选择&quot;&gt;&lt;a href=&quot;#资料选择&quot; class=&quot;headerlink&quot; title=&quot;资料选择&quot;&gt;&lt;/a&gt;资料选择&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://dblab.xmu.edu.cn/post/5663/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《大数据技术原理与应用》&lt;/a&gt;：作为入门教材使用&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dblab.xmu.edu.cn/post/bigdatapractice/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《大数据基础编程、实验和案例教程》&lt;/a&gt;：配套实验指导书&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/10464777/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Hadoop》&lt;/a&gt;:作为深入研究的书籍&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;大数据计算的几种模式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;大数据计算模式&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;解决问题&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;代表产品&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;批处理计算&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;大规模数据的&lt;strong&gt;批&lt;/strong&gt;处理&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;MapReduce、Spark等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;流计算&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;针对流数据的&lt;strong&gt;实时&lt;/strong&gt;计算&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Storm、S4、Flume、Streams等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;图计算&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;针对大规模&lt;strong&gt;图结构&lt;/strong&gt;数据的处理&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Pregel、GraphX、Giraph、PowerGraph等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;查询分析计算&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;大规模数据的&lt;strong&gt;存储管理和查询&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Dremel、Hive、Cassandra等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;扩展：大数据与云计算、物联网的关系&lt;/p&gt;
&lt;p&gt;云计算概述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决两个核心问题：&lt;/p&gt;
&lt;p&gt;解决海量数据的&lt;strong&gt;分布式存储和分布式处理问题&lt;/strong&gt; / 虚拟化和多租户&lt;/p&gt;
&lt;p&gt;三个核心缩写：&lt;/p&gt;
&lt;p&gt;SaaS： Software as a Service    「从集中的系统部署软件，使之在一台本地计算机上运行的一个模型，SaaS允许出租一个应用程序」&lt;/p&gt;
&lt;p&gt;PaaS：Platform as a Service    「类似IaaS，包括操作系统和围绕特定应用必须的服务」&lt;/p&gt;
&lt;p&gt;IaaS：Infrastructure as a Service    「将基础设施（计算资源和存储）作为服务出租」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;物联网：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感知层    -&amp;gt; 网络层    -&amp;gt;    处理层    -&amp;gt;    应用层&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;云计算为大数据提供技术基础、大数据为云计算提供用武之地。&lt;/p&gt;
&lt;p&gt;物联网是大数据重要来源，大数据为物联网数据分析提供支撑。&lt;/p&gt;
&lt;p&gt;云计算为互联网提供海量数据存储能力，物联网为云计算技术提供广阔的应用空间。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
      <category term="BigData" scheme="http://yoursite.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 个人博客高级配置</title>
    <link href="http://yoursite.com/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-21T14:12:37.000Z</published>
    <updated>2020-02-04T13:12:46.257Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍我搭建博客时考虑到或直接用上的几个集成功能。</p><h2 id="访问统计"><a href="#访问统计" class="headerlink" title="访问统计"></a>访问统计</h2><h3 id="站点访问量统计"><a href="#站点访问量统计" class="headerlink" title="站点访问量统计"></a>站点访问量统计</h3><p>访问统计功能由<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>提供，详细使用参见其个人网站。</p><ul><li><p>效果如下：【前者为uv算法显示，后者为pv算法显示】</p><p><img src="/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/busuanzi.png" alt="valine"></p></li></ul><p>我所使用的Next主题已经集成此功能，只需添加脚本和开启功能即可。</p><p>访问主题下的footer.swig文件添加代码，<code>path:themes/next/layout/_partials/footer.swig</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="attr">async</span> </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure><a id="more"></a><p>然后打开<strong>主题</strong>配置文件，搜索找到busuanzi对应配置页面进行如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># count values only if the other configs are false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># custom uv span for the whole site</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_uv_footer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># custom pv span for the whole site</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">site_pv_footer:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="comment"># custom pv span for one page only</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">page_pv:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">page_pv_footer:</span></span></pre></td></tr></table></figure><p>插件提供了两种不同的算法：</p><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量；配置<code>site_pv:ture</code>开启。</p><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数；配置<code>site_uv:ture</code>开启。</p><p>不蒜子还提供了单页面点击量的统计，配置<code>page_pv:ture</code>开启。</p><h3 id="文章访问量统计"><a href="#文章访问量统计" class="headerlink" title="文章访问量统计"></a>文章访问量统计</h3><p>文章统计基于LeanCloud所提供的后端数据支持。</p><ul><li>效果如下：</li></ul><p><img src="/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/count.png" alt="valine"></p><p>需要在LeanCloud上注册一个账号并且创建一个应用，需要进行实名认证，创建一个Counter的Class，开放所有的权限。</p><p><img src="/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/leancloud.png" alt="valine"></p><p>然后找到控制台中的设置，然后点击应用Keys，App ID 和 App Key 填入到主题配置文件中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appid:</span> <span class="string">//</span> <span class="string">your</span> <span class="string">appid</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appkey:</span> <span class="string">//</span> <span class="string">your</span> <span class="string">appkey</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span></pre></td></tr></table></figure><p>设置完毕后，在安全中心内配置网站的域名，以保护数据安全。</p><p>不蒜子能够在页面内提供文章的阅读统计次数，而不能在主页显示，所以我选择了使用LeanCloud进行站点统计。</p><h2 id="添加豆瓣插件"><a href="#添加豆瓣插件" class="headerlink" title="添加豆瓣插件"></a>添加豆瓣插件</h2><p>使用相关插件爬取你的豆瓣数据，生成单独页面进行显示。<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">插件参考</a></p><ul><li>效果如下：</li></ul><p><img src="/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/douban.png" alt="valine"></p><p>进入根目录执行下面命令安装</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm install hexo-douban --save</span></pre></td></tr></table></figure><p>将以下内容写入到站点的配置文件_config.yml中，如果不想显示某些页面，注释掉即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">douban:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">builtin:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">book:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">title:</span> <span class="string">'This is my book title'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my book quote'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">movie:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">title:</span> <span class="string">'This is my movie title'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my movie quote'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">game:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">title:</span> <span class="string">'This is my game title'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my game quote'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span></pre></td></tr></table></figure><ul><li><strong>user</strong>: 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”<a href="https://www.douban.com/people/xxxxxx/&quot;" target="_blank" rel="noopener">https://www.douban.com/people/xxxxxx/&quot;</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>: 是否将生成页面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默认是<code>false</code>,另一可选项为<code>true</code></li><li><strong>title</strong>: 该页面的标题.</li><li><strong>quote</strong>: 写在页面开头的一段话,支持html语法.</li><li><strong>timeout</strong>: 爬取数据的超时时间，默认是 10000ms ,如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>配置完毕后进入<strong>主题</strong>对菜单进行配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Books:</span> <span class="string">/books</span>     <span class="comment">#This is your books page</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Movies:</span> <span class="string">/movies</span>   <span class="comment">#This is your movies page</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">Games:</span> <span class="string">/games</span>   <span class="comment">#This is your games page</span></span></pre></td></tr></table></figure><p>然后在根目录下执行下列命令生成所有的页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo douban</span></pre></td></tr></table></figure><p>生成指定页面需要添加Options参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo douban -h</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Usage: hexo douban</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Description:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Generate pages from douban</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Options:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  -b, --books   Generate douban books only</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  -g, --games   Generate douban games only</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  -m, --movies  Generate douban movies only</span></pre></td></tr></table></figure><p>即<code>hexo douban -b</code>仅生成书本页面，其余同理。</p><p><strong>Warning：</strong></p><p>一般大家都喜欢使简化命令用<code>hexo g</code>和<code>hexo d</code>来进行部署，但安装此插件后与简化命令冲突，不能使用<code>hexo d</code>了，coz<code>hexo douban</code>和<code>hexo deploy</code>前缀都为<code>hexo d</code>。</p><h2 id="文章评论功能"><a href="#文章评论功能" class="headerlink" title="文章评论功能"></a>文章评论功能</h2><p>Next主题支持很多主流的评论系统。</p><p><a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>：超喜欢的欧美风，主流社交媒体登陆。</p><p><a href="https://www.hypercomments.com/" target="_blank" rel="noopener">Hypercomments</a>:简洁且风格非常漂亮，支持图片视频，收费，国外开发者。</p><p><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>：国内开发者，简洁，符合我的审美，支持Markdown和匿名评论。</p><p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a>：使用github账号登陆，支持Markdown语法，风格类github Issue。</p><p><a href="https://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言</a>：国内开发者，没仔细研究。</p><p>面对这么选择，简单比较后，我选择了Valine作为我的blog评论插件，首先考虑到国内的上网环境，排除了Disqus和Hypercomments，其次考虑到免费和方便，同时照顾到简洁，Gitment评论登陆这个跳转我认为很影响体验，所以还是选择了Valine，免费、简洁、轻量化，支持一波。</p><ul><li>效果如下：</li></ul><p><img src="/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/valine.png" alt="valine"></p><p>直接打开<strong>主题配置</strong>，找到Valine组件，因为Valine基于Leancloud所提供的后段服务，需要配置LeanCloud的App ID和App Key。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appid:</span> <span class="string">***&lt;app_id***</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">appkey:</span> <span class="string">***&lt;app_key&gt;***</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span></pre></td></tr></table></figure><p>配置完毕后，在Leancloud设置界面的安全中心添加你的域名。刷新一下即可看见评论框了。</p><p>关于Valine在Next的集成，不同版本的配置文件不同，我也是查看了bluelzy的<a href="https://bluelzy.com/articles/use_valine_for_your_blog.html" target="_blank" rel="noopener">这篇文章</a>才解决我的问题。</p><p>我的问题：主题配置中为<code>app_id</code>和<code>app_key</code>，而Valine需要的字段名为<code>appid</code>和<code>appkey</code>，去掉中间的<code>_</code>配置成功。</p><p>最后有一个Valine相关拓展的教程详见：<a href="http://www.zhaojun.im/hexo-valine-admin/" target="_blank" rel="noopener">Valine 扩展之邮件通知</a></p><hr><p>以上为我的Blog所用的几个插件，也了解了一些别的插件，比如参考链接，投票等，感觉没有很大必要，目前只集成了这几个，后续若有新发现，会继续更新～谢谢。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ul><li><p><a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">打造个性超赞博客 Hexo + Next + Github Pages 的超深度优化</a></p></li><li><p><a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">Hexo 搭建个人博客系列：进阶设置篇</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍我搭建博客时考虑到或直接用上的几个集成功能。&lt;/p&gt;
&lt;h2 id=&quot;访问统计&quot;&gt;&lt;a href=&quot;#访问统计&quot; class=&quot;headerlink&quot; title=&quot;访问统计&quot;&gt;&lt;/a&gt;访问统计&lt;/h2&gt;&lt;h3 id=&quot;站点访问量统计&quot;&gt;&lt;a href=&quot;#站点访问量统计&quot; class=&quot;headerlink&quot; title=&quot;站点访问量统计&quot;&gt;&lt;/a&gt;站点访问量统计&lt;/h3&gt;&lt;p&gt;访问统计功能由&lt;a href=&quot;http://ibruce.info/2015/04/04/busuanzi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;不蒜子&lt;/a&gt;提供，详细使用参见其个人网站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;效果如下：【前者为uv算法显示，后者为pv算法显示】&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/01/21/Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/busuanzi.png&quot; alt=&quot;valine&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我所使用的Next主题已经集成此功能，只需添加脚本和开启功能即可。&lt;/p&gt;
&lt;p&gt;访问主题下的footer.swig文件添加代码，&lt;code&gt;path:themes/next/layout/_partials/footer.swig&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;attr&quot;&gt;async&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建指北 Hexo+Next+GitHub Pages</title>
    <link href="http://yoursite.com/2020/01/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97-Hexo-Next-GitHub-Pages/"/>
    <id>http://yoursite.com/2020/01/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97-Hexo-Next-GitHub-Pages/</id>
    <published>2020-01-15T05:13:56.000Z</published>
    <updated>2020-02-04T13:12:46.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>鉴于国内各平台现状，它们张口闭口信息共享，言论自由；努力建墙造岛的也是它们，我看到了一座座的数据孤岛，且没有一点好转的迹象…</p><p>还是决定搭建个人博客。记录下一点一滴，觉得对自己、对他人乃至对社会有一点点帮助的文字。</p><p>作为渺小到不能在渺小的个体，随时可能堙灭，悄无声息。而字节一直流淌在互联网之中，只要能够被检索到，一直都会存在。</p></blockquote><p>提到搭建网页，很多朋友都会想要数据库、服务器，还要域名balabala…听着就很麻烦…</p><p>好在大家都在为如何快速搭建博客这一目标努力着，出现了有很多流行的框架，有快速简洁的Hexo、兼容性更强的JekyII，传说最好的博客平台FarBox，简单易用的Hugo…这些框架大大简化了你发布一篇文章的步骤，你负责写文章，框架负责页面的生成。</p><p>而关于服务器，良心的GitHub为你解决了这个问题，Github Pages为每个账户提供一个 {username}.github.io 的仓库，同时为其分配一个二级域名，又支持自定义域名，服务器的问题解决了。接下来就正式开始吧。</p><a id="more"></a><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js</a></h3><p>Hexo安装需要依赖Node.js，安装完毕后确保能使用npm命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew install node</span></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span></pre></td></tr></table></figure><p>等待安装完毕，确认能否正常使用hexo命令</p><p>安装hexo-deployer-git，是一个支持Git部署的插件，需要通过这个插件才能将其部署到GitHub上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span></pre></td></tr></table></figure><h2 id="本地项目初始化"><a href="#本地项目初始化" class="headerlink" title="本地项目初始化"></a>本地项目初始化</h2><p>进入对应目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo init blog  <span class="comment">//blog为项目名称,可改为你自己的项目名称</span></span></pre></td></tr></table></figure><p>创建完项目后对应项目文件夹下会生成themes、sources等文件，然后我们进入生成的文件夹中，使用Hexo自带的generate命令，将文件生成对应的静态页面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">cd blog</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment">//hexo提供简写命令 hexo g 可达成相同效果</span></span></pre></td></tr></table></figure><p>创建完毕后使用Hexo的Server命令将站点在本地运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo server</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//出现以下输出：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">INFO  Hexo is <span class="built_in">running</span> at http:<span class="comment">//localhost:4000 . Press Ctrl+C to stop.</span></span></pre></td></tr></table></figure><p>打开浏览器查看本地4000端口就可以查看网站了<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>到此为止，博客的本地搭建就此结束。</p><h2 id="Github-Pages创建-部署"><a href="#Github-Pages创建-部署" class="headerlink" title="Github  Pages创建+部署"></a>Github  Pages创建+部署</h2><p>创建Github仓库，命名严格按照这个格式： {username}.github.io。username改为你的Github用户名即可。同时Github需要配置下SSH。</p><p>Github Pages创建完毕。接下来我们需要将本地的网站部署到Github Pages上，首先我们需要进行配置，打开根目录下的_config.yml文件，在Deployment处的repo改为新建的GitHub Repository的地址，指定为master分支。</p><p>修改前：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Deployment</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  type: git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  repo: &#123;git repo ssh address&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure><p>我的修改后如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Deployment</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  type: git </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  repo: git@github.com:Super-ming<span class="number">-666</span>/Super-ming<span class="number">-666.</span>github.io.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure><p>修改成功后将其部署到GitHub Pages上「必须安装hexo-deployer-git插件」</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment">//部署命令，hexo d可达到相同效果</span></span></pre></td></tr></table></figure><p>等待部署完成，如果部署完成，我们就可以通过<a href="http://Super-ming-666.github.io来访问我们的博客了，相当于hexo将编译之后的静态页面上传到了GitHub的Master分支上了。" target="_blank" rel="noopener">http://Super-ming-666.github.io来访问我们的博客了，相当于hexo将编译之后的静态页面上传到了GitHub的Master分支上了。</a></p><p>到此为止，博客的搭建和部署完成。接下来就是各种花里胡哨的站点配置和主题选择了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>注意有<strong>两个</strong>_config.yml配置文件，一个在站点的根目录下，另一个配置文件在主题下，比如我的主题为next，其配置路径在/blog/theme/next/_config.yml。</p><p>hexo的主题选择：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题</a></p><p>hexo有很多漂亮的主题，将喜欢的主题clone到根目录然后稍加配置即可。</p><p>以next主题为例，将next的master分支直接clone下来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/theme-next/hexo-theme-next themes/next</span></span></pre></td></tr></table></figure><p>clone完毕后，你会发现theme文件下多了next主题的源文件。</p><p>此时我们需要修改<strong>根目录</strong>的配置文件_config.yml，找到theme字段，修改为next即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Extensions</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">theme: next</span></pre></td></tr></table></figure><p>重新使用hexo server进行本地服务开启，检验主题是否切换成功。</p><h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><p>站点配置的文件在根目录下的_config.yml下，找到Site区域，，可以对站点的信息进行配置，以下是我的配置，比较简单。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">title: SuperMing<span class="number">'</span>s Blog </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">subtitle: <span class="string">''</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">description: ''</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">keywords:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">author: SuperMing</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">language: en</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">timezone: <span class="string">''</span></span></pre></td></tr></table></figure><p>subtitle设置副标题等…语言如果要设置为汉语的话选择：zh-CN</p><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>所有主题配置文件在theme/next/_config.yml中进行修改。</p><p>关于主题修改参见官方文档：<a href="https://theme-next.org/docs/theme-settings/" target="_blank" rel="noopener">官方文档</a></p><p>样式：Next一共四种样式，我选择的是mist样式，大家根据喜好选择，去掉对应样式前的#即可。</p><p><img src="/2020/01/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97-Hexo-Next-GitHub-Pages/themes.png" alt="themes"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta"># scheme: Muse</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">scheme: Mist</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#scheme: Pisces</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#scheme: Gemini</span></span></pre></td></tr></table></figure><h4 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h4><p>博客怎么可以没有RSS订阅呢，安装一个插件即可开启RSS订阅，插件名为hexo-generator-feed</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span></pre></td></tr></table></figure><p>安装完成后无需任何配置，站点会自动生成RSS_Feed文件。</p><h4 id="Favicon-Avatar"><a href="#Favicon-Avatar" class="headerlink" title="Favicon/Avatar"></a>Favicon/Avatar</h4><p>Favicon打开网站页面的小图标，可以更换为自己的Logo，<a href="https://realfavicongenerator.net/" target="_blank" rel="noopener">在这个网站下</a>可以定制自己喜欢的logo。</p><p>定制完毕后将图片放置在themes/next/source/images下</p><p>在favicon配置下进行相关路径等配置即可，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">favicon:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  small: /images/favicon<span class="number">-16</span>x16.png</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  medium: /images/favicon<span class="number">-32</span>x32.png</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  apple_touch_icon: /images/apple-touch-icon.png</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  safari_pinned_tab: /images/safari-pinned-tab.svg</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  #android_manifest: /images/manifest.json</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span></pre></td></tr></table></figure><p>同理，avatar是站点的头像，选好照片后放置在themes/next/source/images/avatar.jpg ，在avatar字段下进行配置，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">avatar: /images/avatar.jpg</span></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2020/01/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97-Hexo-Next-GitHub-Pages/avatar.png" alt="avatar"></p><h4 id="Social-Links"><a href="#Social-Links" class="headerlink" title="Social Links"></a>Social Links</h4><p>社交网站的配置,涵盖多数社交网站，| | 后面的为对应Font Awesome的图标，这个版本不用像以前的版本在social_icons下进行图标的配置，以下是我的配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Social Links.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">social:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  GitHub: https:<span class="comment">//github.com/Super-ming-666 || github</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  E-Mail: mailto:supermingzero@gmail.com || envelope</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  #Google: https:<span class="comment">//plus.google.com/yourname || google</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  Twitter: https:<span class="comment">//twitter.com/SuperMing7 || twitter</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  #FB Page: https:<span class="comment">//www.facebook.com/yourname || facebook</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  #VK Group: https:<span class="comment">//vk.com/yourname || vk</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  #StackOverflow: https:<span class="comment">//stackoverflow.com/yourname || stack-overflow</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  #YouTube: https:<span class="comment">//youtube.com/yourname || youtube</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  Instagram: https:<span class="comment">//instagram.com/super_minnng || instagram</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  #Skype: skype:yourname?call|chat || skype</span></pre></td></tr></table></figure><p>国内社交网站的配置：</p><p>同理将链接放置在Social Link下，一行一个链接，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Social Links.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">social:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  zhihu: https:<span class="comment">//www.zhihu.com/people/zzz-65-21-31/activities || zhihu</span></span></pre></td></tr></table></figure><p>某些版本的链接的图标对应字段为social_icons。键值的格式为匹配键：<a href="https://fontawesome.com/cheatsheet/free/brands" target="_blank" rel="noopener">Font Awesome</a>图标的名称，严格按照Font Awesome的图标进行匹配，大小写等,例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">social_icons:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  enable: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  icons_only: <span class="literal">true</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  transition: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  # Icon Mappings</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  zhihu: zhihu</span></pre></td></tr></table></figure><p>以上简单介绍几个配置，很多有趣的配置参照官方文档大家自己发现吧。</p><h4 id="阅读全文设置"><a href="#阅读全文设置" class="headerlink" title="阅读全文设置"></a>阅读全文设置</h4><p>即在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面的需求。</p><p>NexT 提供三种方式来控制文章在首页的显示方式。 也就是说，在首页显示文章的摘录并显示 <strong>阅读全文</strong> 按钮，可以通过以下方法：</p><ol><li><p>在文章中使用 `` 手动进行截断，Hexo 提供的方式 <strong>推荐</strong></p></li><li><p>在文章的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">front-matter</a> 中添加 <code>description</code>，并提供文章摘录</p></li><li><p>自动形成摘要，在 <strong>主题配置文件</strong> 中添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  enable: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  length: <span class="number">150</span></span></pre></td></tr></table></figure><p>默认截取的长度为 <code>150</code> 字符，可以根据需要自行设定</p></li></ol><p>建议使用 （即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p><h3 id="目录配置"><a href="#目录配置" class="headerlink" title="目录配置"></a>目录配置</h3><p>文章发布前，需要对目录进行设置，找到menu字段进行设置。我配置了标签页，分类页，归档页…前面对应的是目录的路径，|| 后面的是对应的图标，也是按照Font Awesone图标名称的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">menu:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">home</span>: /|| <span class="built_in">home</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  about: /about/|| user</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  tags: /tags/|| tags</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  categories: /categories/|| th</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  archives: /archives/|| archive</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span></pre></td></tr></table></figure><p>创建这些目录页操作类似，例如创建标签页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span></pre></td></tr></table></figure><p>此命令会自动在source文件夹下生成tags文件，同时创建一个index.md文件，用户标签的保存。</p><p>分类页，归档页也是如果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page catagories <span class="comment">//创建分类页</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page archives <span class="comment">//创建归档页</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page about <span class="comment">//创建about介绍页</span></span></pre></td></tr></table></figure><p>对相关页面的修改只需进入对应的文件夹修改对应文件即可。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>目录等配置完毕，如何发布文章呢？</p><p>很简单，使用Hexo提供的命令即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"文章标题"</span></span></pre></td></tr></table></figure><p>创建的markdown格式的文章会保存在source/_posts文件夹下，只需对文章进行编辑即可发布，使用以下命令：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"文章标题"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment">//hexo g</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment">//hexo d</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//以上步骤发布一遍文章</span></span></pre></td></tr></table></figure><p>经过以上步骤，hexo就完成了相关部署，即将本地的修改等部署到GitHub Pages上，直接查看github分配的域名即可访问你的博客。</p><h2 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h2><p>由于Github Pages的域名都是统一的your_name.github.io，如果想使用自己的域名，GitHub Pages也是支持的。</p><ol><li>拥有一个自己的域名</li></ol><p>国内有阿里云、腾讯云等购买一个域名，阿里云相对贵一点，但个人觉得更靠谱一点。假设你得到一个域名xxx.com。</p><ol start="2"><li>创建CNAME文件</li></ol><p>最好在本地博客的source下创建CNAME文件，内容为xxx.com。然后执行hexo g ;hexo d部署到GitHub上。</p><ol start="3"><li>域名绑定</li></ol><p>可以通过CNAME和A记录进行地址绑定，关于域名解析有不明白的查看文章：<a href="https://blog.csdn.net/dai451954706/article/details/37696651" target="_blank" rel="noopener">域名解析</a></p><p>以阿里云为例，进入到阿里云的<strong>云解析DNS</strong>目录下的<strong>域名解析</strong>，找到你的域名，进行解析设置。</p><p>我使用的是CNAME解析，添加@类型数据和www类型数据，指向你的xx.github.io域名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">记录类型    主机记录    解析线路(运营商)   记录值 MX优先级   TTL 状态  操作</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">CNAME   @   默认  xx.github.io    --  <span class="number">10</span>分钟        修改|暂停|删除|备注</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">CNAME   www 默认  xx.github.io    --  <span class="number">10</span>分钟        修改|暂停|删除|备注</span></pre></td></tr></table></figure><p>也可以使用A记录指向，也就是域名直接指向IP地址x.x.x.x</p><p>在终端Ping以下你的xx.github.io，得到IP地址。同上述操作添加两条A记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">记录类型    主机记录    解析线路(运营商)   记录值 MX优先级   TTL 状态  操作</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">A   @   默认  x.x.x.x     --  <span class="number">10</span>分钟        修改|暂停|删除|备注</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">A   www 默认  x.x.x.x   --  <span class="number">10</span>分钟        修改|暂停|删除|备注</span></pre></td></tr></table></figure><blockquote><p>A记录优先级高于CNAME，如果两者同时存在，优先执行A记录。</p></blockquote><p>以上配置完毕，大概等10分钟左右便可通过新域名访问你的博客了！</p><h2 id="TrobleShooting"><a href="#TrobleShooting" class="headerlink" title="TrobleShooting"></a>TrobleShooting</h2><h3 id="文章的图片显示"><a href="#文章的图片显示" class="headerlink" title="文章的图片显示"></a>文章的图片显示</h3><p>需要安装一个插件：<strong>hexo-asset-image</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install https:<span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span></pre></td></tr></table></figure><p>然后修改根目录下的_config.yml文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span></pre></td></tr></table></figure><p>此时使用hexo创建文件时会同时自动生成一个同名文件夹用于存放文章中用到的图片，将文章中需要用到的图片放到该文件夹中。</p><p>在文章中引用照片，可以通过相对路径方式使用markdown进行编写。例如：你将a.jpg图片放到对应文件夹后，通过相对路径的markdown无法进行显示<img src="/2020/01/15/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8C%97-Hexo-Next-GitHub-Pages/a.jpg" alt>，图片可以在文章中正常显示，但是不会在首页中显示。</p><p>因此可以使用图片的另一种方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;%asset_img example.jpg examplename %&#125;</span></pre></td></tr></table></figure><h3 id="Tags标签无法显示"><a href="#Tags标签无法显示" class="headerlink" title="Tags标签无法显示"></a>Tags标签无法显示</h3><p>tags标签显示的问题,大家的问题都不太一样，<a href="https://www.zhihu.com/question/29017171" target="_blank" rel="noopener">参考知乎答案</a></p><p>我参考了虾哔哔的回答解决了问题：</p><p>1.你需要在hexo根目录的source文件夹下新建一个tags文件夹，然后在tags文件夹里面新建一个index.md文件。快捷命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span></pre></td></tr></table></figure><p>2.编辑index.md文件，内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: <span class="string">"tags"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">type: tags</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">layout: <span class="string">"tags"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure><p><strong>重点！！！</strong></p><blockquote><p>注意！这里面最重要的就是 layout 选项，后面的参数对应的是你 主题文件夹下 layout文件夹下第一级的布局文件。比如，我的主题是用ejs写的，那么对应的就是layout/tags.ejs，如果没有，那么就会出现空白的现象！<br>如果你的tags文件的命名时a.ejs，那么你就应该写成 layout: “a”。</p></blockquote><p>3.编辑主题配置文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">nav:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">home</span>: /</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  about: /about</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  tags: /tags</span></pre></td></tr></table></figure><p>编辑hexo配置文件Directory选项。</p><p>4.检查一下名称是否对应</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Directory</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tag_dir: tags</span></pre></td></tr></table></figure><p>最重要的就是看一下你的主题文件里有没有标签页或者分类页的布局文件，一般来说都是有的，只是命名和存放的位置可能不同，所以大家要根据实际情况来修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;鉴于国内各平台现状，它们张口闭口信息共享，言论自由；努力建墙造岛的也是它们，我看到了一座座的数据孤岛，且没有一点好转的迹象…&lt;/p&gt;
&lt;p&gt;还是决定搭建个人博客。记录下一点一滴，觉得对自己、对他人乃至对社会有一点点帮助的文字。&lt;/p&gt;
&lt;p&gt;作为渺小到不能在渺小的个体，随时可能堙灭，悄无声息。而字节一直流淌在互联网之中，只要能够被检索到，一直都会存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提到搭建网页，很多朋友都会想要数据库、服务器，还要域名balabala…听着就很麻烦…&lt;/p&gt;
&lt;p&gt;好在大家都在为如何快速搭建博客这一目标努力着，出现了有很多流行的框架，有快速简洁的Hexo、兼容性更强的JekyII，传说最好的博客平台FarBox，简单易用的Hugo…这些框架大大简化了你发布一篇文章的步骤，你负责写文章，框架负责页面的生成。&lt;/p&gt;
&lt;p&gt;而关于服务器，良心的GitHub为你解决了这个问题，Github Pages为每个账户提供一个 {username}.github.io 的仓库，同时为其分配一个二级域名，又支持自定义域名，服务器的问题解决了。接下来就正式开始吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>WhyHumanRunTheWorld</title>
    <link href="http://yoursite.com/2019/12/27/WhyHumanRunTheWorld/"/>
    <id>http://yoursite.com/2019/12/27/WhyHumanRunTheWorld/</id>
    <published>2019-12-27T10:15:19.000Z</published>
    <updated>2020-02-04T13:12:46.265Z</updated>
    
    <content type="html"><![CDATA[<p>尤瓦尔赫拉利写了三本简史系列，《人类简史》、《未来简史》以及《今日简史》，分别于14年、17年和18年。成书时间越来越短，不可避免质量也打了很多的折扣、很多观点也是旧瓶新酒。总结下来，《人类简史》终究还是三本中最值得的一本。</p><p>并不像《时简》那样，各种干货填充。仅仅作为普普通通的大众科普读物，更多起到的是抛砖引玉的作用。作者也表明自己写书的目标学者是对世界充满好奇的青年，而非专业人士。所以会有很多人说这本书结论的支撑论点很薄弱。的确如此，我认为这本书最大的价值在于作者用宏观视角去审视人类历史，结合心理学、历史学、社会学、基因学、哲学……用庞大的知识体系探讨人类从诞生至今，对自然、对人类本身、对人类未来的影响。作者把自己思考后得出的一些结论进行简单的论证分享给读者，多数知识点仅仅点到为止，不刻意论证，有意留白给读者探索的空间，比如在讲到文化宗教相关问题时，作者的相关论述极大的勾起了我的兴趣，在书海中找到了亨廷顿的《文明的冲突》，深入了解相关问题的论述。这些小细节正是这本书的价值所在。<strong>它给你提供一个看世界的角度，剩下的，交给你的好奇心去完成。</strong>不多bb，谈书中我挺喜欢的三个观点探讨一下。「智人想象的能力，为什么会产生人权，幸福是什么」</p><a id="more"></a><blockquote><p>全书结构：认知革命；农业革命；融合与统一；科学革命</p><p>时间点：135亿年，宇宙形成；38亿年前，有机体诞生；七万年前，智人创造出了“文化”，即认知革命；12000年前，农业革命，500年前，科学革命。</p><p>背景：当今世界上所有的人都属于智人范畴，而在200万年到一万年前，整个世界其实同时存在多种不同的人种。除智人外，还有尼安德特人，梭罗人，弗洛里斯人，丹尼索瓦人，鲁道夫人…</p></blockquote><h2 id="智人各个方面都不是这些人种中的佼佼者，为什么智人能够征服大陆，而其余人种陆续消失？"><a href="#智人各个方面都不是这些人种中的佼佼者，为什么智人能够征服大陆，而其余人种陆续消失？" class="headerlink" title="智人各个方面都不是这些人种中的佼佼者，为什么智人能够征服大陆，而其余人种陆续消失？"></a>智人各个方面都不是这些人种中的佼佼者，为什么智人能够征服大陆，而其余人种陆续消失？</h2><p>作者将原因归为一次偶然的基因突变，使得智人拥有了新的思维和沟通方式，由此诞生了认知革命。别的人种也有语言，那智人的特殊在哪？常见的理论：智人的语言最为灵活，虽然我们只能发出有限的声音，但组合起来就是无限的句子。在这个概念之上，更重要的在于人类自己，将语言发展成了<strong>八卦的工具</strong>。没错，就是八卦的工具，智人因为八卦走上了Human界的巅峰。作者的论证：通过八卦能够让智人知道部落里谁谁最可靠可信，帮助人类发展出了更紧密、更复杂的合作体系。就像当今世界，人类绝大所属的沟通还是八卦，就像历史学家碰面吃饭的时候，聊的往往不是一战起因。就是这么看似无厘头的结论和无厘头的推论，作者将这种“讨论虚构事物”的能力作为智人最独特的功能。看起来不靠谱，但以我目前的知识体系，还真无法完美的反驳他的观点。</p><p>说到想象，作者更进一步， 认知革命前，人类可以喊出“小心，有狮子。”之后，人类能够喊出：“狮子是我们部落的守护神。”自此，当一些想象的内容变成“一起想象”时，宗教、国家、公司等各种形式，其实都源于这个想象。人们相信金钱的存在，所以有富人穷人的概念，人权主义为了维护人权这个想象的概念，活跃各个角落…所以从认知革命以来，智人一直生活在一种双重现实之中，一方面我们相信河流，狮子等客观存在的现实，一方面，我们也有像是神、国家和企业这种想象中的现实。法国大革命很好的体现了这一点，一夜之间，从”天赋人权“到”人民做主“，<strong>一种想象的破灭，同时另一种想象的诞生。</strong></p><p>以讨论虚构事物能力的认知革命为基础，农业革命之中，人类构建了”由想象产生的秩序“，我们想象某种秩序，是因为相信他可以提升合作效率，打造更美好的社会。自然界的秩序是稳定不变的，而想象构建出的秩序，总有一夕崩溃的风险。只要人们不再相信。具体不再展开。</p><p>关于这个想象构建的能力，这个观点我表示十分赞同，就像”世上本没有路，走的人多了，变成了路。“这一切，多么顺其自然，而且几乎存在每个人的生活之中，我们构建了这个想象的世界却没有意识到这都是想象的。这个集体想象发展至今，对人类影响深刻，从阶级社会到现在的民主社会，人类是随着想象构建的制度变化而变化的。想明白了这一点，其实这个世界很多问题都可以解释了。比方说制度、学校、军队、法院等这些机构存在最初的意义是什么，一定程度是为了维护这个由想象构建的社会。再进一步，你可能会像我一样，从一个对xx处处不满的青年变成一个想尽办法适应这个社会的生物，社会法则是人为制定的，个人的力量过于渺小，主动希望渺茫，为了生存，被动适应不妨是另一种选择。有了这种想法后，生活也轻松了很多，有时候发现藏在事情背后的本质…就不会轻易被各种人为渲染出来的情绪拖着走，成为乌合之众的一份子。</p><hr><h2 id="世界本无人权，人人并不平等"><a href="#世界本无人权，人人并不平等" class="headerlink" title="世界本无人权，人人并不平等"></a>世界本无人权，人人并不平等</h2><p>作者讲到人文主义时，作者将其分为三类，自由人文、社会人文、演化人文。所谓人权的存在，也是因为人们“想象出来的。”人权出现的根源就在于美国成立初的《独立宣言》，独立宣言最著名的段落是这样的：</p><blockquote><p>我们认为下面这些真理是不言而喻的：人人生而平等，造物者赋予他们若干不可剥夺的权力，其中包括生命权、自由权和追求幸福的权力。</p></blockquote><p>其实这个概念来自于基督教，基督教认为每个人的灵魂都是上帝创造的，而所有灵魂在上帝面前一律平等。美国人说的很实在，但种族歧视到现在都没有搞定。对于人权这个虚构的概念，对于黑人的态度，他们依旧会选择性的遗忘，看一眼奥斯卡近年来提名影单就知道这事在美国社会已经不可被忽视了。作者认为黑人的其实是僵化的制度常规，并且是个非常棘手的恶性循环。作者给出的逻辑是：偶然的历史事件—&gt;白人控制了黑人—-&gt;制定了种族歧视的法律—&gt;导致黑人普遍贫穷、教育缺失—&gt;又造成人们的文化偏见。而文化偏见的加剧反过去又导致了种族歧视法律的颁布和黑人缺乏教育、贫穷。一直觉得，那时的西方，和Nazi有区别吗？就是这样一个不成文的循环与偏见造成了如今的美国社会困境。说回来人们崇尚人人平等这一观念，但心里最深处，遵循的还是生物学最基本的演化规律，演化规定中从来没有什么平等，生而平等在生物学上其实是演化各有不同。又或者关于幸福，到目前为止，生物学并没有给幸福有一个明确的定义，最直观可客观量化的幸福便是“快感”，多数研究都认可快感的存在。换句话说，幸福其实就是不断追求快感的过程。如果真是如此，那么赫胥黎反乌小说《美丽新世界》中人人靠药物获得快感，每个人都无比幸福，这个社会又有什么问题吗？（信息量过大，快崩溃了…</p><p>所以人权的产生是因为人们都崇尚自由人文与社会人文，而演化人文认为人应该遵循自然法则，优胜劣汰，这样才能演化成更优秀的人类，代表就是纳粹。其本质上（生物学）并没有问题，于此同时，科学研究发现，没有什么灵魂这些东西的存在，人类本质就是普普通通的有机体，仅此而已，和猪狗猫并没有什么区别。这就是科学与当今社会之间的一道鸿沟，而因为社会人文建立起来的一套制度对此视而不见，但这道裂缝已经存在，何时推翻，我认为只是时间问题。在有生之年或许能够见证人类历史，还是蛮期待的。而且反观人类历史，从来都不是正义的。这是书中最令我感兴趣的一段。</p><hr><h2 id="幸福？"><a href="#幸福？" class="headerlink" title="幸福？"></a>幸福？</h2><p>关于宗教的那一段论述也很精彩，过于冗长就不展开。最后作者展开对于幸福与快乐人生的探讨。人类至今都没有搞清楚幸福和快乐的来源，那又如何评判那个社会制度对人民更友好呢？资本主义会说自由市场使得经济增长，会让人自立自强，这样人们会是快乐的，民族主义者认为政治自觉会带来快乐，共产主义者认为无产阶级zz能够带来快乐…又或是关于金钱，学界普遍的一个结论：金钱确实会带来快乐，但有一个阈值，一旦超过，就没有那么明显的效果。尤其是对于经济阶层底层的人来说，钱越多越快乐。balabala作者还从婚姻、疾病等对快乐的影响探讨了一通。作者说了这么一通，又迫使我开始认识自己，思考生命的意义。又或者生命本身就没有意义，纵使地球爆炸，宇宙还在运行，那么生命的意义又是谁赋予的呢？好像也是人类自己赋予的。又或是人活着是为了追求快乐而存在的？为了尽可能只追求更多的快乐来弥补主线痛苦的人生？<strong>尼采说：只要有了活下去的理由，几乎什么都能够忍受。</strong>又或是苦中作乐的快感？咦？好像多数人的人生一生劳碌，终日烦忧，根本没时间享受平静。转瞬即逝的快乐像是逼迫我们活下去的诱饵，你必须寻找更多的快乐，以便承担更多生活的痛苦？想了这么多，感觉佛教真是真理，世间清流，佛教系统的研究了快乐的本质和成因，佛教认为，“追求”这一主观目的是所有痛苦的根源，不管你追求的是什么，你总会陷入一种负面情绪之中，因为你感受到了快乐，所以就给原本正常的生活定义为不快乐，甚至是痛苦。越是追求，越是痛苦，就像海浪一样，风平浪静或许是正常的，你偶然感受到了浪尖的快感，就认为风平浪静是痛苦的，于是想追求更多的浪尖……于是就导致了这个循环。或许放下追求本身，感受自己内心，这样生活好像会好一点。</p><hr><p>最近对于人类历史很感兴趣，就找出这本书翻了，查理芒格大致也说“活着，你最好了解一下自己生前这个世界发生了什么。”，关于历史的重要性，作者在书中有个观点:现代人只是住在了高楼大厦，而DNA还留在草原。隐晦的解释了人类历史变迁之中，最根本的东西其实并没有改变 ，很多失误决策等事件其实老祖宗们做了几百遍了，如果你思考问题的时候考虑一下历史这个维度，或多或少能够减少误判。再次就是多元思维的思考模式，作者正是掌握了多元思维，才能用上帝视角去鸟瞰人类历史，看问题的角度完全不局限在一个领域，太牛x了。总之，全书看似平淡无奇，导向性也很明显（保持清醒，作者其实很多观点都是一点点把你带进去的），但细细推敲，每一个观点背后都值得深挖。是一本会思考的书，且短时间内并不会过时，时不时翻一翻，你会发现自己对于某些观点的看法又会有所改观。这是我第二次阅读这本书，和第一次的时候完完全全是两种不同的心态和感受，我论述的观点可能不是很严谨，但书值得翻阅。四星好评。</p><blockquote><p>纵观所了解过的几个阶段的人类史，和平绝对不是人类历史的主线，动荡与血腥才是。很多人没有意识到我们这个年代有多么多么和平，战后的70多年虽阿富汗伊拉克有零星战火，但整体上还是和平的，每天起床能够享受平静的一天真的是我们这代人的福气，珍惜这来之不易的平静，希望人类能够往好处发展吧，虽然我对未来挺悲观的但还挺想看看未来到底何去何从。</p></blockquote><p>​                                                                                                    <a href="https://www.ted.com/talks/yuval_noah_harari_what_explains_the_rise_of_humans?language=en" target="_blank" rel="noopener">作者TED「值得一看」</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尤瓦尔赫拉利写了三本简史系列，《人类简史》、《未来简史》以及《今日简史》，分别于14年、17年和18年。成书时间越来越短，不可避免质量也打了很多的折扣、很多观点也是旧瓶新酒。总结下来，《人类简史》终究还是三本中最值得的一本。&lt;/p&gt;
&lt;p&gt;并不像《时简》那样，各种干货填充。仅仅作为普普通通的大众科普读物，更多起到的是抛砖引玉的作用。作者也表明自己写书的目标学者是对世界充满好奇的青年，而非专业人士。所以会有很多人说这本书结论的支撑论点很薄弱。的确如此，我认为这本书最大的价值在于作者用宏观视角去审视人类历史，结合心理学、历史学、社会学、基因学、哲学……用庞大的知识体系探讨人类从诞生至今，对自然、对人类本身、对人类未来的影响。作者把自己思考后得出的一些结论进行简单的论证分享给读者，多数知识点仅仅点到为止，不刻意论证，有意留白给读者探索的空间，比如在讲到文化宗教相关问题时，作者的相关论述极大的勾起了我的兴趣，在书海中找到了亨廷顿的《文明的冲突》，深入了解相关问题的论述。这些小细节正是这本书的价值所在。&lt;strong&gt;它给你提供一个看世界的角度，剩下的，交给你的好奇心去完成。&lt;/strong&gt;不多bb，谈书中我挺喜欢的三个观点探讨一下。「智人想象的能力，为什么会产生人权，幸福是什么」&lt;/p&gt;
    
    </summary>
    
    
      <category term="Books" scheme="http://yoursite.com/categories/Books/"/>
    
    
      <category term="human" scheme="http://yoursite.com/tags/human/"/>
    
      <category term="reading" scheme="http://yoursite.com/tags/reading/"/>
    
  </entry>
  
</feed>
